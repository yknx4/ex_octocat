# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule ExOctocat.Api.Reactions do
  @moduledoc """
  API calls for all endpoints tagged `Reactions`.
  """

  alias ExOctocat.Connection
  import ExOctocat.RequestBuilder

  @doc """
  Create reaction for a commit comment
  Create a reaction to a [commit comment](https://docs.github.com/rest/reference/repos#comments). A response with an HTTP `200` status means that you already added the reaction type to this commit comment.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - comment_id (integer()): comment_id parameter
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject75):
  ## Returns

  {:ok, ExOctocat.Model.Reaction.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec reactions_create_for_commit_comment(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          integer(),
          keyword()
        ) ::
          {:ok, ExOctocat.Model.InlineResponse415.t()}
          | {:ok, ExOctocat.Model.ValidationError.t()}
          | {:ok, ExOctocat.Model.Reaction.t()}
          | {:error, Tesla.Env.t()}
  def reactions_create_for_commit_comment(connection, owner, repo, comment_id, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:post)
    |> url("/repos/#{owner}/#{repo}/comments/#{comment_id}/reactions")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.Reaction{}},
      {201, %ExOctocat.Model.Reaction{}},
      {415, %ExOctocat.Model.InlineResponse415{}},
      {422, %ExOctocat.Model.ValidationError{}}
    ])
  end

  @doc """
  Create reaction for an issue
  Create a reaction to an [issue](https://docs.github.com/rest/reference/issues/). A response with an HTTP `200` status means that you already added the reaction type to this issue.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - issue_number (integer()): issue_number parameter
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject107):
  ## Returns

  {:ok, ExOctocat.Model.Reaction.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec reactions_create_for_issue(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          integer(),
          keyword()
        ) ::
          {:ok, ExOctocat.Model.InlineResponse415.t()}
          | {:ok, ExOctocat.Model.ValidationError.t()}
          | {:ok, ExOctocat.Model.Reaction.t()}
          | {:error, Tesla.Env.t()}
  def reactions_create_for_issue(connection, owner, repo, issue_number, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:post)
    |> url("/repos/#{owner}/#{repo}/issues/#{issue_number}/reactions")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.Reaction{}},
      {201, %ExOctocat.Model.Reaction{}},
      {415, %ExOctocat.Model.InlineResponse415{}},
      {422, %ExOctocat.Model.ValidationError{}}
    ])
  end

  @doc """
  Create reaction for an issue comment
  Create a reaction to an [issue comment](https://docs.github.com/rest/reference/issues#comments). A response with an HTTP `200` status means that you already added the reaction type to this issue comment.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - comment_id (integer()): comment_id parameter
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject101):
  ## Returns

  {:ok, ExOctocat.Model.Reaction.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec reactions_create_for_issue_comment(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          integer(),
          keyword()
        ) ::
          {:ok, ExOctocat.Model.InlineResponse415.t()}
          | {:ok, ExOctocat.Model.ValidationError.t()}
          | {:ok, ExOctocat.Model.Reaction.t()}
          | {:error, Tesla.Env.t()}
  def reactions_create_for_issue_comment(connection, owner, repo, comment_id, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:post)
    |> url("/repos/#{owner}/#{repo}/issues/comments/#{comment_id}/reactions")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.Reaction{}},
      {201, %ExOctocat.Model.Reaction{}},
      {415, %ExOctocat.Model.InlineResponse415{}},
      {422, %ExOctocat.Model.ValidationError{}}
    ])
  end

  @doc """
  Create reaction for a pull request review comment
  Create a reaction to a [pull request review comment](https://docs.github.com/rest/reference/pulls#comments). A response with an HTTP `200` status means that you already added the reaction type to this pull request review comment.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - comment_id (integer()): comment_id parameter
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject119):
  ## Returns

  {:ok, ExOctocat.Model.Reaction.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec reactions_create_for_pull_request_review_comment(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          integer(),
          keyword()
        ) ::
          {:ok, ExOctocat.Model.InlineResponse415.t()}
          | {:ok, ExOctocat.Model.ValidationError.t()}
          | {:ok, ExOctocat.Model.Reaction.t()}
          | {:error, Tesla.Env.t()}
  def reactions_create_for_pull_request_review_comment(
        connection,
        owner,
        repo,
        comment_id,
        opts \\ []
      ) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:post)
    |> url("/repos/#{owner}/#{repo}/pulls/comments/#{comment_id}/reactions")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.Reaction{}},
      {201, %ExOctocat.Model.Reaction{}},
      {415, %ExOctocat.Model.InlineResponse415{}},
      {422, %ExOctocat.Model.ValidationError{}}
    ])
  end

  @doc """
  Create reaction for a release
  Create a reaction to a [release](https://docs.github.com/rest/reference/repos#releases). A response with a `Status: 200 OK` means that you already added the reaction type to this release.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - release_id (integer()): release_id parameter
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject133):
  ## Returns

  {:ok, ExOctocat.Model.Reaction.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec reactions_create_for_release(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          integer(),
          keyword()
        ) ::
          {:ok, ExOctocat.Model.InlineResponse415.t()}
          | {:ok, ExOctocat.Model.ValidationError.t()}
          | {:ok, ExOctocat.Model.Reaction.t()}
          | {:error, Tesla.Env.t()}
  def reactions_create_for_release(connection, owner, repo, release_id, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:post)
    |> url("/repos/#{owner}/#{repo}/releases/#{release_id}/reactions")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.Reaction{}},
      {201, %ExOctocat.Model.Reaction{}},
      {415, %ExOctocat.Model.InlineResponse415{}},
      {422, %ExOctocat.Model.ValidationError{}}
    ])
  end

  @doc """
  Create reaction for a team discussion comment
  Create a reaction to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP `200` status means that you already added the reaction type to this team discussion comment.  **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions`.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - team_slug (String.t): team_slug parameter
  - discussion_number (integer()):
  - comment_number (integer()):
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject46):
  ## Returns

  {:ok, ExOctocat.Model.Reaction.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec reactions_create_for_team_discussion_comment_in_org(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          integer(),
          integer(),
          keyword()
        ) :: {:ok, ExOctocat.Model.Reaction.t()} | {:error, Tesla.Env.t()}
  def reactions_create_for_team_discussion_comment_in_org(
        connection,
        org,
        team_slug,
        discussion_number,
        comment_number,
        opts \\ []
      ) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:post)
    |> url(
      "/orgs/#{org}/teams/#{team_slug}/discussions/#{discussion_number}/comments/#{comment_number}/reactions"
    )
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.Reaction{}},
      {201, %ExOctocat.Model.Reaction{}}
    ])
  end

  @doc """
  Create reaction for a team discussion comment (Legacy)
  **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new \"[Create reaction for a team discussion comment](https://docs.github.com/rest/reference/reactions#create-reaction-for-a-team-discussion-comment)\" endpoint.  Create a reaction to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP `200` status means that you already added the reaction type to this team discussion comment.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - team_id (integer()):
  - discussion_number (integer()):
  - comment_number (integer()):
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject155):
  ## Returns

  {:ok, ExOctocat.Model.Reaction.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec reactions_create_for_team_discussion_comment_legacy(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          keyword()
        ) :: {:ok, ExOctocat.Model.Reaction.t()} | {:error, Tesla.Env.t()}
  def reactions_create_for_team_discussion_comment_legacy(
        connection,
        team_id,
        discussion_number,
        comment_number,
        opts \\ []
      ) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:post)
    |> url(
      "/teams/#{team_id}/discussions/#{discussion_number}/comments/#{comment_number}/reactions"
    )
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {201, %ExOctocat.Model.Reaction{}}
    ])
  end

  @doc """
  Create reaction for a team discussion
  Create a reaction to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP `200` status means that you already added the reaction type to this team discussion.  **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions`.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - team_slug (String.t): team_slug parameter
  - discussion_number (integer()):
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject47):
  ## Returns

  {:ok, ExOctocat.Model.Reaction.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec reactions_create_for_team_discussion_in_org(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          integer(),
          keyword()
        ) :: {:ok, ExOctocat.Model.Reaction.t()} | {:error, Tesla.Env.t()}
  def reactions_create_for_team_discussion_in_org(
        connection,
        org,
        team_slug,
        discussion_number,
        opts \\ []
      ) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:post)
    |> url("/orgs/#{org}/teams/#{team_slug}/discussions/#{discussion_number}/reactions")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.Reaction{}},
      {201, %ExOctocat.Model.Reaction{}}
    ])
  end

  @doc """
  Create reaction for a team discussion (Legacy)
  **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Create reaction for a team discussion`](https://docs.github.com/rest/reference/reactions#create-reaction-for-a-team-discussion) endpoint.  Create a reaction to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP `200` status means that you already added the reaction type to this team discussion.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - team_id (integer()):
  - discussion_number (integer()):
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject156):
  ## Returns

  {:ok, ExOctocat.Model.Reaction.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec reactions_create_for_team_discussion_legacy(
          Tesla.Env.client(),
          integer(),
          integer(),
          keyword()
        ) :: {:ok, ExOctocat.Model.Reaction.t()} | {:error, Tesla.Env.t()}
  def reactions_create_for_team_discussion_legacy(
        connection,
        team_id,
        discussion_number,
        opts \\ []
      ) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:post)
    |> url("/teams/#{team_id}/discussions/#{discussion_number}/reactions")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {201, %ExOctocat.Model.Reaction{}}
    ])
  end

  @doc """
  Delete a commit comment reaction
  **Note:** You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/comments/:comment_id/reactions/:reaction_id`.  Delete a reaction to a [commit comment](https://docs.github.com/rest/reference/repos#comments).

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - comment_id (integer()): comment_id parameter
  - reaction_id (integer()):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec reactions_delete_for_commit_comment(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          integer(),
          integer(),
          keyword()
        ) :: {:ok, nil} | {:error, Tesla.Env.t()}
  def reactions_delete_for_commit_comment(
        connection,
        owner,
        repo,
        comment_id,
        reaction_id,
        _opts \\ []
      ) do
    %{}
    |> method(:delete)
    |> url("/repos/#{owner}/#{repo}/comments/#{comment_id}/reactions/#{reaction_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false}
    ])
  end

  @doc """
  Delete an issue reaction
  **Note:** You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/issues/:issue_number/reactions/:reaction_id`.  Delete a reaction to an [issue](https://docs.github.com/rest/reference/issues/).

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - issue_number (integer()): issue_number parameter
  - reaction_id (integer()):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec reactions_delete_for_issue(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          integer(),
          integer(),
          keyword()
        ) :: {:ok, nil} | {:error, Tesla.Env.t()}
  def reactions_delete_for_issue(connection, owner, repo, issue_number, reaction_id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/repos/#{owner}/#{repo}/issues/#{issue_number}/reactions/#{reaction_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false}
    ])
  end

  @doc """
  Delete an issue comment reaction
  **Note:** You can also specify a repository by `repository_id` using the route `DELETE delete /repositories/:repository_id/issues/comments/:comment_id/reactions/:reaction_id`.  Delete a reaction to an [issue comment](https://docs.github.com/rest/reference/issues#comments).

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - comment_id (integer()): comment_id parameter
  - reaction_id (integer()):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec reactions_delete_for_issue_comment(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          integer(),
          integer(),
          keyword()
        ) :: {:ok, nil} | {:error, Tesla.Env.t()}
  def reactions_delete_for_issue_comment(
        connection,
        owner,
        repo,
        comment_id,
        reaction_id,
        _opts \\ []
      ) do
    %{}
    |> method(:delete)
    |> url("/repos/#{owner}/#{repo}/issues/comments/#{comment_id}/reactions/#{reaction_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false}
    ])
  end

  @doc """
  Delete a pull request comment reaction
  **Note:** You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/pulls/comments/:comment_id/reactions/:reaction_id.`  Delete a reaction to a [pull request review comment](https://docs.github.com/rest/reference/pulls#review-comments).

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - comment_id (integer()): comment_id parameter
  - reaction_id (integer()):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec reactions_delete_for_pull_request_comment(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          integer(),
          integer(),
          keyword()
        ) :: {:ok, nil} | {:error, Tesla.Env.t()}
  def reactions_delete_for_pull_request_comment(
        connection,
        owner,
        repo,
        comment_id,
        reaction_id,
        _opts \\ []
      ) do
    %{}
    |> method(:delete)
    |> url("/repos/#{owner}/#{repo}/pulls/comments/#{comment_id}/reactions/#{reaction_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false}
    ])
  end

  @doc """
  Delete team discussion reaction
  **Note:** You can also specify a team or organization with `team_id` and `org_id` using the route `DELETE /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions/:reaction_id`.  Delete a reaction to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - team_slug (String.t): team_slug parameter
  - discussion_number (integer()):
  - reaction_id (integer()):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec reactions_delete_for_team_discussion(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          integer(),
          integer(),
          keyword()
        ) :: {:ok, nil} | {:error, Tesla.Env.t()}
  def reactions_delete_for_team_discussion(
        connection,
        org,
        team_slug,
        discussion_number,
        reaction_id,
        _opts \\ []
      ) do
    %{}
    |> method(:delete)
    |> url(
      "/orgs/#{org}/teams/#{team_slug}/discussions/#{discussion_number}/reactions/#{reaction_id}"
    )
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false}
    ])
  end

  @doc """
  Delete team discussion comment reaction
  **Note:** You can also specify a team or organization with `team_id` and `org_id` using the route `DELETE /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions/:reaction_id`.  Delete a reaction to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - team_slug (String.t): team_slug parameter
  - discussion_number (integer()):
  - comment_number (integer()):
  - reaction_id (integer()):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec reactions_delete_for_team_discussion_comment(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          integer(),
          integer(),
          integer(),
          keyword()
        ) :: {:ok, nil} | {:error, Tesla.Env.t()}
  def reactions_delete_for_team_discussion_comment(
        connection,
        org,
        team_slug,
        discussion_number,
        comment_number,
        reaction_id,
        _opts \\ []
      ) do
    %{}
    |> method(:delete)
    |> url(
      "/orgs/#{org}/teams/#{team_slug}/discussions/#{discussion_number}/comments/#{comment_number}/reactions/#{
        reaction_id
      }"
    )
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false}
    ])
  end

  @doc """
  Delete a reaction (Legacy)
  **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Reactions API. We recommend migrating your existing code to use the new delete reactions endpoints. For more information, see this [blog post](https://developer.github.com/changes/2020-02-26-new-delete-reactions-endpoints/).  OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), when deleting a [team discussion](https://docs.github.com/rest/reference/teams#discussions) or [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments).

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - reaction_id (integer()):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec reactions_delete_legacy(Tesla.Env.client(), integer(), keyword()) ::
          {:ok, nil}
          | {:ok, ExOctocat.Model.InlineResponse415.t()}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:error, Tesla.Env.t()}
  def reactions_delete_legacy(connection, reaction_id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/reactions/#{reaction_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false},
      {304, false},
      {403, %ExOctocat.Model.BasicError{}},
      {401, %ExOctocat.Model.BasicError{}},
      {410, %ExOctocat.Model.BasicError{}},
      {415, %ExOctocat.Model.InlineResponse415{}}
    ])
  end

  @doc """
  List reactions for a commit comment
  List the reactions to a [commit comment](https://docs.github.com/rest/reference/repos#comments).

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - comment_id (integer()): comment_id parameter
  - opts (KeywordList): [optional] Optional parameters
    - :content (String.t): Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a commit comment.
    - :per_page (integer()): Results per page (max 100)
    - :page (integer()): Page number of the results to fetch.
  ## Returns

  {:ok, [%Reaction{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec reactions_list_for_commit_comment(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          integer(),
          keyword()
        ) ::
          {:ok, ExOctocat.Model.InlineResponse415.t()}
          | {:ok, list(ExOctocat.Model.Reaction.t())}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:error, Tesla.Env.t()}
  def reactions_list_for_commit_comment(connection, owner, repo, comment_id, opts \\ []) do
    optional_params = %{
      :content => :query,
      :per_page => :query,
      :page => :query
    }

    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/comments/#{comment_id}/reactions")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, [%ExOctocat.Model.Reaction{}]},
      {404, %ExOctocat.Model.BasicError{}},
      {415, %ExOctocat.Model.InlineResponse415{}}
    ])
  end

  @doc """
  List reactions for an issue
  List the reactions to an [issue](https://docs.github.com/rest/reference/issues).

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - issue_number (integer()): issue_number parameter
  - opts (KeywordList): [optional] Optional parameters
    - :content (String.t): Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to an issue.
    - :per_page (integer()): Results per page (max 100)
    - :page (integer()): Page number of the results to fetch.
  ## Returns

  {:ok, [%Reaction{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec reactions_list_for_issue(Tesla.Env.client(), String.t(), String.t(), integer(), keyword()) ::
          {:ok, ExOctocat.Model.InlineResponse415.t()}
          | {:ok, list(ExOctocat.Model.Reaction.t())}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:error, Tesla.Env.t()}
  def reactions_list_for_issue(connection, owner, repo, issue_number, opts \\ []) do
    optional_params = %{
      :content => :query,
      :per_page => :query,
      :page => :query
    }

    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/issues/#{issue_number}/reactions")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, [%ExOctocat.Model.Reaction{}]},
      {404, %ExOctocat.Model.BasicError{}},
      {410, %ExOctocat.Model.BasicError{}},
      {415, %ExOctocat.Model.InlineResponse415{}}
    ])
  end

  @doc """
  List reactions for an issue comment
  List the reactions to an [issue comment](https://docs.github.com/rest/reference/issues#comments).

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - comment_id (integer()): comment_id parameter
  - opts (KeywordList): [optional] Optional parameters
    - :content (String.t): Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to an issue comment.
    - :per_page (integer()): Results per page (max 100)
    - :page (integer()): Page number of the results to fetch.
  ## Returns

  {:ok, [%Reaction{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec reactions_list_for_issue_comment(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          integer(),
          keyword()
        ) ::
          {:ok, ExOctocat.Model.InlineResponse415.t()}
          | {:ok, list(ExOctocat.Model.Reaction.t())}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:error, Tesla.Env.t()}
  def reactions_list_for_issue_comment(connection, owner, repo, comment_id, opts \\ []) do
    optional_params = %{
      :content => :query,
      :per_page => :query,
      :page => :query
    }

    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/issues/comments/#{comment_id}/reactions")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, [%ExOctocat.Model.Reaction{}]},
      {404, %ExOctocat.Model.BasicError{}},
      {415, %ExOctocat.Model.InlineResponse415{}}
    ])
  end

  @doc """
  List reactions for a pull request review comment
  List the reactions to a [pull request review comment](https://docs.github.com/rest/reference/pulls#review-comments).

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - comment_id (integer()): comment_id parameter
  - opts (KeywordList): [optional] Optional parameters
    - :content (String.t): Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a pull request review comment.
    - :per_page (integer()): Results per page (max 100)
    - :page (integer()): Page number of the results to fetch.
  ## Returns

  {:ok, [%Reaction{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec reactions_list_for_pull_request_review_comment(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          integer(),
          keyword()
        ) ::
          {:ok, ExOctocat.Model.InlineResponse415.t()}
          | {:ok, list(ExOctocat.Model.Reaction.t())}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:error, Tesla.Env.t()}
  def reactions_list_for_pull_request_review_comment(
        connection,
        owner,
        repo,
        comment_id,
        opts \\ []
      ) do
    optional_params = %{
      :content => :query,
      :per_page => :query,
      :page => :query
    }

    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/pulls/comments/#{comment_id}/reactions")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, [%ExOctocat.Model.Reaction{}]},
      {404, %ExOctocat.Model.BasicError{}},
      {415, %ExOctocat.Model.InlineResponse415{}}
    ])
  end

  @doc """
  List reactions for a team discussion comment
  List the reactions to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments/). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions`.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - team_slug (String.t): team_slug parameter
  - discussion_number (integer()):
  - comment_number (integer()):
  - opts (KeywordList): [optional] Optional parameters
    - :content (String.t): Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion comment.
    - :per_page (integer()): Results per page (max 100)
    - :page (integer()): Page number of the results to fetch.
  ## Returns

  {:ok, [%Reaction{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec reactions_list_for_team_discussion_comment_in_org(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          integer(),
          integer(),
          keyword()
        ) :: {:ok, list(ExOctocat.Model.Reaction.t())} | {:error, Tesla.Env.t()}
  def reactions_list_for_team_discussion_comment_in_org(
        connection,
        org,
        team_slug,
        discussion_number,
        comment_number,
        opts \\ []
      ) do
    optional_params = %{
      :content => :query,
      :per_page => :query,
      :page => :query
    }

    %{}
    |> method(:get)
    |> url(
      "/orgs/#{org}/teams/#{team_slug}/discussions/#{discussion_number}/comments/#{comment_number}/reactions"
    )
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, [%ExOctocat.Model.Reaction{}]}
    ])
  end

  @doc """
  List reactions for a team discussion comment (Legacy)
  **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List reactions for a team discussion comment`](https://docs.github.com/rest/reference/reactions#list-reactions-for-a-team-discussion-comment) endpoint.  List the reactions to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - team_id (integer()):
  - discussion_number (integer()):
  - comment_number (integer()):
  - opts (KeywordList): [optional] Optional parameters
    - :content (String.t): Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion comment.
    - :per_page (integer()): Results per page (max 100)
    - :page (integer()): Page number of the results to fetch.
  ## Returns

  {:ok, [%Reaction{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec reactions_list_for_team_discussion_comment_legacy(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          keyword()
        ) :: {:ok, list(ExOctocat.Model.Reaction.t())} | {:error, Tesla.Env.t()}
  def reactions_list_for_team_discussion_comment_legacy(
        connection,
        team_id,
        discussion_number,
        comment_number,
        opts \\ []
      ) do
    optional_params = %{
      :content => :query,
      :per_page => :query,
      :page => :query
    }

    %{}
    |> method(:get)
    |> url(
      "/teams/#{team_id}/discussions/#{discussion_number}/comments/#{comment_number}/reactions"
    )
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, [%ExOctocat.Model.Reaction{}]}
    ])
  end

  @doc """
  List reactions for a team discussion
  List the reactions to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions`.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - team_slug (String.t): team_slug parameter
  - discussion_number (integer()):
  - opts (KeywordList): [optional] Optional parameters
    - :content (String.t): Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion.
    - :per_page (integer()): Results per page (max 100)
    - :page (integer()): Page number of the results to fetch.
  ## Returns

  {:ok, [%Reaction{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec reactions_list_for_team_discussion_in_org(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          integer(),
          keyword()
        ) :: {:ok, list(ExOctocat.Model.Reaction.t())} | {:error, Tesla.Env.t()}
  def reactions_list_for_team_discussion_in_org(
        connection,
        org,
        team_slug,
        discussion_number,
        opts \\ []
      ) do
    optional_params = %{
      :content => :query,
      :per_page => :query,
      :page => :query
    }

    %{}
    |> method(:get)
    |> url("/orgs/#{org}/teams/#{team_slug}/discussions/#{discussion_number}/reactions")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, [%ExOctocat.Model.Reaction{}]}
    ])
  end

  @doc """
  List reactions for a team discussion (Legacy)
  **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List reactions for a team discussion`](https://docs.github.com/rest/reference/reactions#list-reactions-for-a-team-discussion) endpoint.  List the reactions to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - team_id (integer()):
  - discussion_number (integer()):
  - opts (KeywordList): [optional] Optional parameters
    - :content (String.t): Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion.
    - :per_page (integer()): Results per page (max 100)
    - :page (integer()): Page number of the results to fetch.
  ## Returns

  {:ok, [%Reaction{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec reactions_list_for_team_discussion_legacy(
          Tesla.Env.client(),
          integer(),
          integer(),
          keyword()
        ) :: {:ok, list(ExOctocat.Model.Reaction.t())} | {:error, Tesla.Env.t()}
  def reactions_list_for_team_discussion_legacy(
        connection,
        team_id,
        discussion_number,
        opts \\ []
      ) do
    optional_params = %{
      :content => :query,
      :per_page => :query,
      :page => :query
    }

    %{}
    |> method(:get)
    |> url("/teams/#{team_id}/discussions/#{discussion_number}/reactions")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, [%ExOctocat.Model.Reaction{}]}
    ])
  end
end
