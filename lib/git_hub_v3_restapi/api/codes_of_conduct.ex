# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule ExOctocat.Api.CodesOfConduct do
  @moduledoc """
  API calls for all endpoints tagged `CodesOfConduct`.
  """

  alias ExOctocat.Connection
  import ExOctocat.RequestBuilder

  @doc """
  Get all codes of conduct

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, [%CodeOfConduct{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec codes_of_conduct_get_all_codes_of_conduct(Tesla.Env.client(), keyword()) ::
          {:ok, nil}
          | {:ok, list(ExOctocat.Model.CodeOfConduct.t())}
          | {:error, Tesla.Env.t()}
  def codes_of_conduct_get_all_codes_of_conduct(connection, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/codes_of_conduct")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, [%ExOctocat.Model.CodeOfConduct{}]},
      {304, false}
    ])
  end

  @doc """
  Get a code of conduct

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - key (String.t):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, ExOctocat.Model.CodeOfConduct.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec codes_of_conduct_get_conduct_code(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, nil}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:ok, ExOctocat.Model.CodeOfConduct.t()}
          | {:error, Tesla.Env.t()}
  def codes_of_conduct_get_conduct_code(connection, key, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/codes_of_conduct/#{key}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.CodeOfConduct{}},
      {404, %ExOctocat.Model.BasicError{}},
      {304, false}
    ])
  end

  @doc """
  Get the code of conduct for a repository
  Returns the contents of the repository's code of conduct file, if one is detected.  A code of conduct is detected if there is a file named `CODE_OF_CONDUCT` in the root directory of the repository. GitHub detects which code of conduct it is using fuzzy matching.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, ExOctocat.Model.CodeOfConduct.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec codes_of_conduct_get_for_repo(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, ExOctocat.Model.CodeOfConduct.t()} | {:error, Tesla.Env.t()}
  def codes_of_conduct_get_for_repo(connection, owner, repo, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/community/code_of_conduct")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.CodeOfConduct{}}
    ])
  end
end
