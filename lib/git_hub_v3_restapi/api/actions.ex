# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule ExOctocat.Api.Actions do
  @moduledoc """
  API calls for all endpoints tagged `Actions`.
  """

  alias ExOctocat.Connection
  import ExOctocat.RequestBuilder

  @doc """
  Add repository access to a self-hosted runner group in an organization
  The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see \"[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products).\"   Adds a repository to the list of selected repositories that can access a self-hosted runner group. The runner group must have `visibility` set to `selected`. For more information, see \"[Create a self-hosted runner group for an organization](#create-a-self-hosted-runner-group-for-an-organization).\"  You must authenticate using an access token with the `admin:org` scope to use this endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - runner_group_id (integer()): Unique identifier of the self-hosted runner group.
  - repository_id (integer()):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec actions_add_repo_access_to_self_hosted_runner_group_in_org(
          Tesla.Env.client(),
          String.t(),
          integer(),
          integer(),
          keyword()
        ) :: {:ok, nil} | {:error, Tesla.Env.t()}
  def actions_add_repo_access_to_self_hosted_runner_group_in_org(
        connection,
        org,
        runner_group_id,
        repository_id,
        _opts \\ []
      ) do
    %{}
    |> method(:put)
    |> url("/orgs/#{org}/actions/runner-groups/#{runner_group_id}/repositories/#{repository_id}")
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false}
    ])
  end

  @doc """
  Add selected repository to an organization secret
  Adds a repository to an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - secret_name (String.t): secret_name parameter
  - repository_id (integer()):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec actions_add_selected_repo_to_org_secret(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          integer(),
          keyword()
        ) :: {:ok, nil} | {:error, Tesla.Env.t()}
  def actions_add_selected_repo_to_org_secret(
        connection,
        org,
        secret_name,
        repository_id,
        _opts \\ []
      ) do
    %{}
    |> method(:put)
    |> url("/orgs/#{org}/actions/secrets/#{secret_name}/repositories/#{repository_id}")
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false},
      {409, false}
    ])
  end

  @doc """
  Add a self-hosted runner to a group for an organization
  The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see \"[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products).\"   Adds a self-hosted runner to a runner group configured in an organization.  You must authenticate using an access token with the `admin:org` scope to use this endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - runner_group_id (integer()): Unique identifier of the self-hosted runner group.
  - runner_id (integer()): Unique identifier of the self-hosted runner.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec actions_add_self_hosted_runner_to_group_for_org(
          Tesla.Env.client(),
          String.t(),
          integer(),
          integer(),
          keyword()
        ) :: {:ok, nil} | {:error, Tesla.Env.t()}
  def actions_add_self_hosted_runner_to_group_for_org(
        connection,
        org,
        runner_group_id,
        runner_id,
        _opts \\ []
      ) do
    %{}
    |> method(:put)
    |> url("/orgs/#{org}/actions/runner-groups/#{runner_group_id}/runners/#{runner_id}")
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false}
    ])
  end

  @doc """
  Approve a workflow run for a fork pull request
  Approves a workflow run for a pull request from a public fork of a first time contributor. For more information, see [\"Approving workflow runs from public forks](https://docs.github.com/actions/managing-workflow-runs/approving-workflow-runs-from-public-forks).\"  You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - run_id (integer()): The id of the workflow run.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, map()} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec actions_approve_workflow_run(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          integer(),
          keyword()
        ) ::
          {:ok, Map.t()} | {:ok, ExOctocat.Model.BasicError.t()} | {:error, Tesla.Env.t()}
  def actions_approve_workflow_run(connection, owner, repo, run_id, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/repos/#{owner}/#{repo}/actions/runs/#{run_id}/approve")
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {201, false},
      {404, %ExOctocat.Model.BasicError{}},
      {403, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  Cancel a workflow run
  Cancels a workflow run using its `id`. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - run_id (integer()): The id of the workflow run.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, map()} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec actions_cancel_workflow_run(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          integer(),
          keyword()
        ) :: {:ok, Map.t()} | {:error, Tesla.Env.t()}
  def actions_cancel_workflow_run(connection, owner, repo, run_id, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/repos/#{owner}/#{repo}/actions/runs/#{run_id}/cancel")
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {202, false}
    ])
  end

  @doc """
  Create or update an environment secret
  Creates or updates an environment secret with an encrypted value. Encrypt your secret using [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.  #### Example encrypting a secret using Node.js  Encrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library.  ``` const sodium = require('tweetsodium');  const key = \"base64-encoded-public-key\"; const value = \"plain-text-secret\";  // Convert the message and key to Uint8Array's (Buffer implements that interface) const messageBytes = Buffer.from(value); const keyBytes = Buffer.from(key, 'base64');  // Encrypt using LibSodium. const encryptedBytes = sodium.seal(messageBytes, keyBytes);  // Base64 the encrypted secret const encrypted = Buffer.from(encryptedBytes).toString('base64');  console.log(encrypted); ```   #### Example encrypting a secret using Python  Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/stable/public/#nacl-public-sealedbox) with Python 3.  ``` from base64 import b64encode from nacl import encoding, public  def encrypt(public_key: str, secret_value: str) -> str:   \"\"\"Encrypt a Unicode string using the public key.\"\"\"   public_key = public.PublicKey(public_key.encode(\"utf-8\"), encoding.Base64Encoder())   sealed_box = public.SealedBox(public_key)   encrypted = sealed_box.encrypt(secret_value.encode(\"utf-8\"))   return b64encode(encrypted).decode(\"utf-8\") ```  #### Example encrypting a secret using C#  Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.  ``` var secretValue = System.Text.Encoding.UTF8.GetBytes(\"mySecret\"); var publicKey = Convert.FromBase64String(\"2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=\");  var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);  Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox)); ```  #### Example encrypting a secret using Ruby  Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.  ```ruby require \"rbnacl\" require \"base64\"  key = Base64.decode64(\"+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=\") public_key = RbNaCl::PublicKey.new(key)  box = RbNaCl::Boxes::Sealed.from_public_key(public_key) encrypted_secret = box.encrypt(\"my_secret\")  # Print the base64 encoded secret puts Base64.strict_encode64(encrypted_secret) ```

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - repository_id (integer()):
  - environment_name (String.t): The name of the environment
  - secret_name (String.t): secret_name parameter
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject140):
  ## Returns

  {:ok, map()} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec actions_create_or_update_environment_secret(
          Tesla.Env.client(),
          integer(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, nil} | {:ok, Map.t()} | {:error, Tesla.Env.t()}
  def actions_create_or_update_environment_secret(
        connection,
        repository_id,
        environment_name,
        secret_name,
        opts \\ []
      ) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:put)
    |> url(
      "/repositories/#{repository_id}/environments/#{environment_name}/secrets/#{secret_name}"
    )
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {201, false},
      {204, false}
    ])
  end

  @doc """
  Create or update an organization secret
  Creates or updates an organization secret with an encrypted value. Encrypt your secret using [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.  #### Example encrypting a secret using Node.js  Encrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library.  ``` const sodium = require('tweetsodium');  const key = \"base64-encoded-public-key\"; const value = \"plain-text-secret\";  // Convert the message and key to Uint8Array's (Buffer implements that interface) const messageBytes = Buffer.from(value); const keyBytes = Buffer.from(key, 'base64');  // Encrypt using LibSodium. const encryptedBytes = sodium.seal(messageBytes, keyBytes);  // Base64 the encrypted secret const encrypted = Buffer.from(encryptedBytes).toString('base64');  console.log(encrypted); ```   #### Example encrypting a secret using Python  Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/stable/public/#nacl-public-sealedbox) with Python 3.  ``` from base64 import b64encode from nacl import encoding, public  def encrypt(public_key: str, secret_value: str) -> str:   \"\"\"Encrypt a Unicode string using the public key.\"\"\"   public_key = public.PublicKey(public_key.encode(\"utf-8\"), encoding.Base64Encoder())   sealed_box = public.SealedBox(public_key)   encrypted = sealed_box.encrypt(secret_value.encode(\"utf-8\"))   return b64encode(encrypted).decode(\"utf-8\") ```  #### Example encrypting a secret using C#  Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.  ``` var secretValue = System.Text.Encoding.UTF8.GetBytes(\"mySecret\"); var publicKey = Convert.FromBase64String(\"2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=\");  var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);  Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox)); ```  #### Example encrypting a secret using Ruby  Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.  ```ruby require \"rbnacl\" require \"base64\"  key = Base64.decode64(\"+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=\") public_key = RbNaCl::PublicKey.new(key)  box = RbNaCl::Boxes::Sealed.from_public_key(public_key) encrypted_secret = box.encrypt(\"my_secret\")  # Print the base64 encoded secret puts Base64.strict_encode64(encrypted_secret) ```

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - secret_name (String.t): secret_name parameter
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject30):
  ## Returns

  {:ok, map()} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec actions_create_or_update_org_secret(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, nil} | {:ok, Map.t()} | {:error, Tesla.Env.t()}
  def actions_create_or_update_org_secret(connection, org, secret_name, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:put)
    |> url("/orgs/#{org}/actions/secrets/#{secret_name}")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {201, false},
      {204, false}
    ])
  end

  @doc """
  Create or update a repository secret
  Creates or updates a repository secret with an encrypted value. Encrypt your secret using [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.  #### Example encrypting a secret using Node.js  Encrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library.  ``` const sodium = require('tweetsodium');  const key = \"base64-encoded-public-key\"; const value = \"plain-text-secret\";  // Convert the message and key to Uint8Array's (Buffer implements that interface) const messageBytes = Buffer.from(value); const keyBytes = Buffer.from(key, 'base64');  // Encrypt using LibSodium. const encryptedBytes = sodium.seal(messageBytes, keyBytes);  // Base64 the encrypted secret const encrypted = Buffer.from(encryptedBytes).toString('base64');  console.log(encrypted); ```   #### Example encrypting a secret using Python  Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/stable/public/#nacl-public-sealedbox) with Python 3.  ``` from base64 import b64encode from nacl import encoding, public  def encrypt(public_key: str, secret_value: str) -> str:   \"\"\"Encrypt a Unicode string using the public key.\"\"\"   public_key = public.PublicKey(public_key.encode(\"utf-8\"), encoding.Base64Encoder())   sealed_box = public.SealedBox(public_key)   encrypted = sealed_box.encrypt(secret_value.encode(\"utf-8\"))   return b64encode(encrypted).decode(\"utf-8\") ```  #### Example encrypting a secret using C#  Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.  ``` var secretValue = System.Text.Encoding.UTF8.GetBytes(\"mySecret\"); var publicKey = Convert.FromBase64String(\"2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=\");  var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);  Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox)); ```  #### Example encrypting a secret using Ruby  Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.  ```ruby require \"rbnacl\" require \"base64\"  key = Base64.decode64(\"+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=\") public_key = RbNaCl::PublicKey.new(key)  box = RbNaCl::Boxes::Sealed.from_public_key(public_key) encrypted_secret = box.encrypt(\"my_secret\")  # Print the base64 encoded secret puts Base64.strict_encode64(encrypted_secret) ```

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - secret_name (String.t): secret_name parameter
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject62):
  ## Returns

  {:ok, map()} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec actions_create_or_update_repo_secret(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, nil} | {:ok, Map.t()} | {:error, Tesla.Env.t()}
  def actions_create_or_update_repo_secret(connection, owner, repo, secret_name, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:put)
    |> url("/repos/#{owner}/#{repo}/actions/secrets/#{secret_name}")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {201, false},
      {204, false}
    ])
  end

  @doc """
  Create a registration token for an organization
  Returns a token that you can pass to the `config` script. The token expires after one hour.  You must authenticate using an access token with the `admin:org` scope to use this endpoint.  #### Example using registration token  Configure your self-hosted runner, replacing `TOKEN` with the registration token provided by this endpoint.  ``` ./config.sh --url https://github.com/octo-org --token TOKEN ```

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, ExOctocat.Model.AuthenticationToken.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec actions_create_registration_token_for_org(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, ExOctocat.Model.AuthenticationToken.t()} | {:error, Tesla.Env.t()}
  def actions_create_registration_token_for_org(connection, org, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/orgs/#{org}/actions/runners/registration-token")
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {201, %ExOctocat.Model.AuthenticationToken{}}
    ])
  end

  @doc """
  Create a registration token for a repository
  Returns a token that you can pass to the `config` script. The token expires after one hour. You must authenticate using an access token with the `repo` scope to use this endpoint.  #### Example using registration token   Configure your self-hosted runner, replacing `TOKEN` with the registration token provided by this endpoint.  ``` ./config.sh --url https://github.com/octo-org/octo-repo-artifacts --token TOKEN ```

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, ExOctocat.Model.AuthenticationToken.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec actions_create_registration_token_for_repo(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, ExOctocat.Model.AuthenticationToken.t()} | {:error, Tesla.Env.t()}
  def actions_create_registration_token_for_repo(connection, owner, repo, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/repos/#{owner}/#{repo}/actions/runners/registration-token")
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {201, %ExOctocat.Model.AuthenticationToken{}}
    ])
  end

  @doc """
  Create a remove token for an organization
  Returns a token that you can pass to the `config` script to remove a self-hosted runner from an organization. The token expires after one hour.  You must authenticate using an access token with the `admin:org` scope to use this endpoint.  #### Example using remove token  To remove your self-hosted runner from an organization, replace `TOKEN` with the remove token provided by this endpoint.  ``` ./config.sh remove --token TOKEN ```

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, ExOctocat.Model.AuthenticationToken.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec actions_create_remove_token_for_org(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, ExOctocat.Model.AuthenticationToken.t()} | {:error, Tesla.Env.t()}
  def actions_create_remove_token_for_org(connection, org, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/orgs/#{org}/actions/runners/remove-token")
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {201, %ExOctocat.Model.AuthenticationToken{}}
    ])
  end

  @doc """
  Create a remove token for a repository
  Returns a token that you can pass to remove a self-hosted runner from a repository. The token expires after one hour. You must authenticate using an access token with the `repo` scope to use this endpoint.  #### Example using remove token   To remove your self-hosted runner from a repository, replace TOKEN with the remove token provided by this endpoint.  ``` ./config.sh remove --token TOKEN ```

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, ExOctocat.Model.AuthenticationToken.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec actions_create_remove_token_for_repo(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, ExOctocat.Model.AuthenticationToken.t()} | {:error, Tesla.Env.t()}
  def actions_create_remove_token_for_repo(connection, owner, repo, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/repos/#{owner}/#{repo}/actions/runners/remove-token")
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {201, %ExOctocat.Model.AuthenticationToken{}}
    ])
  end

  @doc """
  Create a self-hosted runner group for an organization
  The self-hosted runner groups REST API is available with GitHub Enterprise Cloud and GitHub Enterprise Server. For more information, see \"[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products).\"  Creates a new self-hosted runner group for an organization.  You must authenticate using an access token with the `admin:org` scope to use this endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject26):
  ## Returns

  {:ok, ExOctocat.Model.RunnerGroupsOrg.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec actions_create_self_hosted_runner_group_for_org(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, ExOctocat.Model.RunnerGroupsOrg.t()} | {:error, Tesla.Env.t()}
  def actions_create_self_hosted_runner_group_for_org(connection, org, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:post)
    |> url("/orgs/#{org}/actions/runner-groups")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {201, %ExOctocat.Model.RunnerGroupsOrg{}}
    ])
  end

  @doc """
  Create a workflow dispatch event
  You can use this endpoint to manually trigger a GitHub Actions workflow run. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.  You must configure your GitHub Actions workflow to run when the [`workflow_dispatch` webhook](/developers/webhooks-and-events/webhook-events-and-payloads#workflow_dispatch) event occurs. The `inputs` are configured in the workflow file. For more information about how to configure the `workflow_dispatch` event in the workflow file, see \"[Events that trigger workflows](/actions/reference/events-that-trigger-workflows#workflow_dispatch).\"  You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint. For more information, see \"[Creating a personal access token for the command line](https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line).\"

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - workflow_id (OneOfintegerstring): The ID of the workflow. You can also pass the workflow file name as a string.
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject63):
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec actions_create_workflow_dispatch(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          ExOctocat.Model.OneOfintegerstring.t(),
          keyword()
        ) :: {:ok, nil} | {:error, Tesla.Env.t()}
  def actions_create_workflow_dispatch(connection, owner, repo, workflow_id, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:post)
    |> url("/repos/#{owner}/#{repo}/actions/workflows/#{workflow_id}/dispatches")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false}
    ])
  end

  @doc """
  Delete an artifact
  Deletes an artifact for a workflow run. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - artifact_id (integer()): artifact_id parameter
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec actions_delete_artifact(Tesla.Env.client(), String.t(), String.t(), integer(), keyword()) ::
          {:ok, nil} | {:error, Tesla.Env.t()}
  def actions_delete_artifact(connection, owner, repo, artifact_id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/repos/#{owner}/#{repo}/actions/artifacts/#{artifact_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false}
    ])
  end

  @doc """
  Delete an environment secret
  Deletes a secret in an environment using the secret name. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - repository_id (integer()):
  - environment_name (String.t): The name of the environment
  - secret_name (String.t): secret_name parameter
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec actions_delete_environment_secret(
          Tesla.Env.client(),
          integer(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, nil} | {:error, Tesla.Env.t()}
  def actions_delete_environment_secret(
        connection,
        repository_id,
        environment_name,
        secret_name,
        _opts \\ []
      ) do
    %{}
    |> method(:delete)
    |> url(
      "/repositories/#{repository_id}/environments/#{environment_name}/secrets/#{secret_name}"
    )
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false}
    ])
  end

  @doc """
  Delete an organization secret
  Deletes a secret in an organization using the secret name. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - secret_name (String.t): secret_name parameter
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec actions_delete_org_secret(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, nil} | {:error, Tesla.Env.t()}
  def actions_delete_org_secret(connection, org, secret_name, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/orgs/#{org}/actions/secrets/#{secret_name}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false}
    ])
  end

  @doc """
  Delete a repository secret
  Deletes a secret in a repository using the secret name. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - secret_name (String.t): secret_name parameter
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec actions_delete_repo_secret(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, nil} | {:error, Tesla.Env.t()}
  def actions_delete_repo_secret(connection, owner, repo, secret_name, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/repos/#{owner}/#{repo}/actions/secrets/#{secret_name}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false}
    ])
  end

  @doc """
  Delete a self-hosted runner from an organization
  Forces the removal of a self-hosted runner from an organization. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.  You must authenticate using an access token with the `admin:org` scope to use this endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - runner_id (integer()): Unique identifier of the self-hosted runner.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec actions_delete_self_hosted_runner_from_org(
          Tesla.Env.client(),
          String.t(),
          integer(),
          keyword()
        ) :: {:ok, nil} | {:error, Tesla.Env.t()}
  def actions_delete_self_hosted_runner_from_org(connection, org, runner_id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/orgs/#{org}/actions/runners/#{runner_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false}
    ])
  end

  @doc """
  Delete a self-hosted runner from a repository
  Forces the removal of a self-hosted runner from a repository. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.  You must authenticate using an access token with the `repo` scope to use this endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - runner_id (integer()): Unique identifier of the self-hosted runner.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec actions_delete_self_hosted_runner_from_repo(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          integer(),
          keyword()
        ) :: {:ok, nil} | {:error, Tesla.Env.t()}
  def actions_delete_self_hosted_runner_from_repo(connection, owner, repo, runner_id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/repos/#{owner}/#{repo}/actions/runners/#{runner_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false}
    ])
  end

  @doc """
  Delete a self-hosted runner group from an organization
  The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see \"[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products).\"  Deletes a self-hosted runner group for an organization.  You must authenticate using an access token with the `admin:org` scope to use this endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - runner_group_id (integer()): Unique identifier of the self-hosted runner group.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec actions_delete_self_hosted_runner_group_from_org(
          Tesla.Env.client(),
          String.t(),
          integer(),
          keyword()
        ) :: {:ok, nil} | {:error, Tesla.Env.t()}
  def actions_delete_self_hosted_runner_group_from_org(
        connection,
        org,
        runner_group_id,
        _opts \\ []
      ) do
    %{}
    |> method(:delete)
    |> url("/orgs/#{org}/actions/runner-groups/#{runner_group_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false}
    ])
  end

  @doc """
  Delete a workflow run
  Delete a specific workflow run. Anyone with write access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:write` permission to use this endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - run_id (integer()): The id of the workflow run.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec actions_delete_workflow_run(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          integer(),
          keyword()
        ) :: {:ok, nil} | {:error, Tesla.Env.t()}
  def actions_delete_workflow_run(connection, owner, repo, run_id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/repos/#{owner}/#{repo}/actions/runs/#{run_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false}
    ])
  end

  @doc """
  Delete workflow run logs
  Deletes all logs for a workflow run. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - run_id (integer()): The id of the workflow run.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec actions_delete_workflow_run_logs(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          integer(),
          keyword()
        ) :: {:ok, nil} | {:error, Tesla.Env.t()}
  def actions_delete_workflow_run_logs(connection, owner, repo, run_id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/repos/#{owner}/#{repo}/actions/runs/#{run_id}/logs")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false}
    ])
  end

  @doc """
  Disable a selected repository for GitHub Actions in an organization
  Removes a repository from the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\"  You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - repository_id (integer()):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec actions_disable_selected_repository_github_actions_organization(
          Tesla.Env.client(),
          String.t(),
          integer(),
          keyword()
        ) :: {:ok, nil} | {:error, Tesla.Env.t()}
  def actions_disable_selected_repository_github_actions_organization(
        connection,
        org,
        repository_id,
        _opts \\ []
      ) do
    %{}
    |> method(:delete)
    |> url("/orgs/#{org}/actions/permissions/repositories/#{repository_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false}
    ])
  end

  @doc """
  Disable a workflow
  Disables a workflow and sets the `state` of the workflow to `disabled_manually`. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.  You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - workflow_id (OneOfintegerstring): The ID of the workflow. You can also pass the workflow file name as a string.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec actions_disable_workflow(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          ExOctocat.Model.OneOfintegerstring.t(),
          keyword()
        ) :: {:ok, nil} | {:error, Tesla.Env.t()}
  def actions_disable_workflow(connection, owner, repo, workflow_id, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/repos/#{owner}/#{repo}/actions/workflows/#{workflow_id}/disable")
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false}
    ])
  end

  @doc """
  Download an artifact
  Gets a redirect URL to download an archive for a repository. This URL expires after 1 minute. Look for `Location:` in the response header to find the URL for the download. The `:archive_format` must be `zip`. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - artifact_id (integer()): artifact_id parameter
  - archive_format (String.t):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec actions_download_artifact(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          integer(),
          String.t(),
          keyword()
        ) :: {:ok, nil} | {:error, Tesla.Env.t()}
  def actions_download_artifact(connection, owner, repo, artifact_id, archive_format, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/actions/artifacts/#{artifact_id}/#{archive_format}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {302, false}
    ])
  end

  @doc """
  Download job logs for a workflow run
  Gets a redirect URL to download a plain text file of logs for a workflow job. This link expires after 1 minute. Look for `Location:` in the response header to find the URL for the download. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - job_id (integer()): job_id parameter
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec actions_download_job_logs_for_workflow_run(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          integer(),
          keyword()
        ) :: {:ok, nil} | {:error, Tesla.Env.t()}
  def actions_download_job_logs_for_workflow_run(connection, owner, repo, job_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/actions/jobs/#{job_id}/logs")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {302, false}
    ])
  end

  @doc """
  Download workflow run logs
  Gets a redirect URL to download an archive of log files for a workflow run. This link expires after 1 minute. Look for `Location:` in the response header to find the URL for the download. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - run_id (integer()): The id of the workflow run.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec actions_download_workflow_run_logs(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          integer(),
          keyword()
        ) :: {:ok, nil} | {:error, Tesla.Env.t()}
  def actions_download_workflow_run_logs(connection, owner, repo, run_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/actions/runs/#{run_id}/logs")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {302, false}
    ])
  end

  @doc """
  Enable a selected repository for GitHub Actions in an organization
  Adds a repository to the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\"  You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - repository_id (integer()):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec actions_enable_selected_repository_github_actions_organization(
          Tesla.Env.client(),
          String.t(),
          integer(),
          keyword()
        ) :: {:ok, nil} | {:error, Tesla.Env.t()}
  def actions_enable_selected_repository_github_actions_organization(
        connection,
        org,
        repository_id,
        _opts \\ []
      ) do
    %{}
    |> method(:put)
    |> url("/orgs/#{org}/actions/permissions/repositories/#{repository_id}")
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false}
    ])
  end

  @doc """
  Enable a workflow
  Enables a workflow and sets the `state` of the workflow to `active`. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.  You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - workflow_id (OneOfintegerstring): The ID of the workflow. You can also pass the workflow file name as a string.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec actions_enable_workflow(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          ExOctocat.Model.OneOfintegerstring.t(),
          keyword()
        ) :: {:ok, nil} | {:error, Tesla.Env.t()}
  def actions_enable_workflow(connection, owner, repo, workflow_id, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/repos/#{owner}/#{repo}/actions/workflows/#{workflow_id}/enable")
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false}
    ])
  end

  @doc """
  Get allowed actions for an organization
  Gets the selected actions that are allowed in an organization. To use this endpoint, the organization permission policy for `allowed_actions` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\"\"  You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, ExOctocat.Model.SelectedActions.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec actions_get_allowed_actions_organization(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, ExOctocat.Model.SelectedActions.t()} | {:error, Tesla.Env.t()}
  def actions_get_allowed_actions_organization(connection, org, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/orgs/#{org}/actions/permissions/selected-actions")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.SelectedActions{}}
    ])
  end

  @doc """
  Get allowed actions for a repository
  Gets the settings for selected actions that are allowed in a repository. To use this endpoint, the repository policy for `allowed_actions` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository).\"  You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration` repository permission to use this API.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, ExOctocat.Model.SelectedActions.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec actions_get_allowed_actions_repository(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, ExOctocat.Model.SelectedActions.t()} | {:error, Tesla.Env.t()}
  def actions_get_allowed_actions_repository(connection, owner, repo, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/actions/permissions/selected-actions")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.SelectedActions{}}
    ])
  end

  @doc """
  Get an artifact
  Gets a specific artifact for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - artifact_id (integer()): artifact_id parameter
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, ExOctocat.Model.Artifact.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec actions_get_artifact(Tesla.Env.client(), String.t(), String.t(), integer(), keyword()) ::
          {:ok, ExOctocat.Model.Artifact.t()} | {:error, Tesla.Env.t()}
  def actions_get_artifact(connection, owner, repo, artifact_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/actions/artifacts/#{artifact_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.Artifact{}}
    ])
  end

  @doc """
  Get an environment public key
  Get the public key for an environment, which you need to encrypt environment secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `secrets` repository permission to use this endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - repository_id (integer()):
  - environment_name (String.t): The name of the environment
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, ExOctocat.Model.ActionsPublicKey.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec actions_get_environment_public_key(Tesla.Env.client(), integer(), String.t(), keyword()) ::
          {:ok, ExOctocat.Model.ActionsPublicKey.t()} | {:error, Tesla.Env.t()}
  def actions_get_environment_public_key(connection, repository_id, environment_name, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/repositories/#{repository_id}/environments/#{environment_name}/secrets/public-key")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.ActionsPublicKey{}}
    ])
  end

  @doc """
  Get an environment secret
  Gets a single environment secret without revealing its encrypted value. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - repository_id (integer()):
  - environment_name (String.t): The name of the environment
  - secret_name (String.t): secret_name parameter
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, ExOctocat.Model.ActionsSecret.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec actions_get_environment_secret(
          Tesla.Env.client(),
          integer(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, ExOctocat.Model.ActionsSecret.t()} | {:error, Tesla.Env.t()}
  def actions_get_environment_secret(
        connection,
        repository_id,
        environment_name,
        secret_name,
        _opts \\ []
      ) do
    %{}
    |> method(:get)
    |> url(
      "/repositories/#{repository_id}/environments/#{environment_name}/secrets/#{secret_name}"
    )
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.ActionsSecret{}}
    ])
  end

  @doc """
  Get GitHub Actions permissions for an organization
  Gets the GitHub Actions permissions policy for repositories and allowed actions in an organization.  You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, ExOctocat.Model.ActionsOrganizationPermissions.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec actions_get_github_actions_permissions_organization(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, ExOctocat.Model.ActionsOrganizationPermissions.t()}
          | {:error, Tesla.Env.t()}
  def actions_get_github_actions_permissions_organization(connection, org, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/orgs/#{org}/actions/permissions")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.ActionsOrganizationPermissions{}}
    ])
  end

  @doc """
  Get GitHub Actions permissions for a repository
  Gets the GitHub Actions permissions policy for a repository, including whether GitHub Actions is enabled and the actions allowed to run in the repository.  You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration` repository permission to use this API.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, ExOctocat.Model.ActionsRepositoryPermissions.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec actions_get_github_actions_permissions_repository(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, ExOctocat.Model.ActionsRepositoryPermissions.t()} | {:error, Tesla.Env.t()}
  def actions_get_github_actions_permissions_repository(connection, owner, repo, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/actions/permissions")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.ActionsRepositoryPermissions{}}
    ])
  end

  @doc """
  Get a job for a workflow run
  Gets a specific job in a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - job_id (integer()): job_id parameter
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, ExOctocat.Model.Job.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec actions_get_job_for_workflow_run(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          integer(),
          keyword()
        ) :: {:ok, ExOctocat.Model.Job.t()} | {:error, Tesla.Env.t()}
  def actions_get_job_for_workflow_run(connection, owner, repo, job_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/actions/jobs/#{job_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.Job{}}
    ])
  end

  @doc """
  Get an organization public key
  Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, ExOctocat.Model.ActionsPublicKey.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec actions_get_org_public_key(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, ExOctocat.Model.ActionsPublicKey.t()} | {:error, Tesla.Env.t()}
  def actions_get_org_public_key(connection, org, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/orgs/#{org}/actions/secrets/public-key")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.ActionsPublicKey{}}
    ])
  end

  @doc """
  Get an organization secret
  Gets a single organization secret without revealing its encrypted value. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - secret_name (String.t): secret_name parameter
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, ExOctocat.Model.OrganizationActionsSecret.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec actions_get_org_secret(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, ExOctocat.Model.OrganizationActionsSecret.t()} | {:error, Tesla.Env.t()}
  def actions_get_org_secret(connection, org, secret_name, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/orgs/#{org}/actions/secrets/#{secret_name}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.OrganizationActionsSecret{}}
    ])
  end

  @doc """
  Get pending deployments for a workflow run
  Get all deployment environments for a workflow run that are waiting for protection rules to pass.  Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - run_id (integer()): The id of the workflow run.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, [%PendingDeployment{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec actions_get_pending_deployments_for_run(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          integer(),
          keyword()
        ) :: {:ok, list(ExOctocat.Model.PendingDeployment.t())} | {:error, Tesla.Env.t()}
  def actions_get_pending_deployments_for_run(connection, owner, repo, run_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/actions/runs/#{run_id}/pending_deployments")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, [%ExOctocat.Model.PendingDeployment{}]}
    ])
  end

  @doc """
  Get a repository public key
  Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `secrets` repository permission to use this endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, ExOctocat.Model.ActionsPublicKey.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec actions_get_repo_public_key(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, ExOctocat.Model.ActionsPublicKey.t()} | {:error, Tesla.Env.t()}
  def actions_get_repo_public_key(connection, owner, repo, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/actions/secrets/public-key")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.ActionsPublicKey{}}
    ])
  end

  @doc """
  Get a repository secret
  Gets a single repository secret without revealing its encrypted value. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - secret_name (String.t): secret_name parameter
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, ExOctocat.Model.ActionsSecret.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec actions_get_repo_secret(Tesla.Env.client(), String.t(), String.t(), String.t(), keyword()) ::
          {:ok, ExOctocat.Model.ActionsSecret.t()} | {:error, Tesla.Env.t()}
  def actions_get_repo_secret(connection, owner, repo, secret_name, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/actions/secrets/#{secret_name}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.ActionsSecret{}}
    ])
  end

  @doc """
  Get the review history for a workflow run
  Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - run_id (integer()): The id of the workflow run.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, [%EnvironmentApprovals{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec actions_get_reviews_for_run(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          integer(),
          keyword()
        ) :: {:ok, list(ExOctocat.Model.EnvironmentApprovals.t())} | {:error, Tesla.Env.t()}
  def actions_get_reviews_for_run(connection, owner, repo, run_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/actions/runs/#{run_id}/approvals")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, [%ExOctocat.Model.EnvironmentApprovals{}]}
    ])
  end

  @doc """
  Get a self-hosted runner for an organization
  Gets a specific self-hosted runner configured in an organization.  You must authenticate using an access token with the `admin:org` scope to use this endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - runner_id (integer()): Unique identifier of the self-hosted runner.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, ExOctocat.Model.Runner.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec actions_get_self_hosted_runner_for_org(
          Tesla.Env.client(),
          String.t(),
          integer(),
          keyword()
        ) :: {:ok, ExOctocat.Model.Runner.t()} | {:error, Tesla.Env.t()}
  def actions_get_self_hosted_runner_for_org(connection, org, runner_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/orgs/#{org}/actions/runners/#{runner_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.Runner{}}
    ])
  end

  @doc """
  Get a self-hosted runner for a repository
  Gets a specific self-hosted runner configured in a repository.  You must authenticate using an access token with the `repo` scope to use this endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - runner_id (integer()): Unique identifier of the self-hosted runner.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, ExOctocat.Model.Runner.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec actions_get_self_hosted_runner_for_repo(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          integer(),
          keyword()
        ) :: {:ok, ExOctocat.Model.Runner.t()} | {:error, Tesla.Env.t()}
  def actions_get_self_hosted_runner_for_repo(connection, owner, repo, runner_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/actions/runners/#{runner_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.Runner{}}
    ])
  end

  @doc """
  Get a self-hosted runner group for an organization
  The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see \"[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products).\"  Gets a specific self-hosted runner group for an organization.  You must authenticate using an access token with the `admin:org` scope to use this endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - runner_group_id (integer()): Unique identifier of the self-hosted runner group.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, ExOctocat.Model.RunnerGroupsOrg.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec actions_get_self_hosted_runner_group_for_org(
          Tesla.Env.client(),
          String.t(),
          integer(),
          keyword()
        ) :: {:ok, ExOctocat.Model.RunnerGroupsOrg.t()} | {:error, Tesla.Env.t()}
  def actions_get_self_hosted_runner_group_for_org(connection, org, runner_group_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/orgs/#{org}/actions/runner-groups/#{runner_group_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.RunnerGroupsOrg{}}
    ])
  end

  @doc """
  Get a workflow
  Gets a specific workflow. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - workflow_id (OneOfintegerstring): The ID of the workflow. You can also pass the workflow file name as a string.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, ExOctocat.Model.Workflow.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec actions_get_workflow(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          ExOctocat.Model.OneOfintegerstring.t(),
          keyword()
        ) :: {:ok, ExOctocat.Model.Workflow.t()} | {:error, Tesla.Env.t()}
  def actions_get_workflow(connection, owner, repo, workflow_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/actions/workflows/#{workflow_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.Workflow{}}
    ])
  end

  @doc """
  Get a workflow run
  Gets a specific workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - run_id (integer()): The id of the workflow run.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, ExOctocat.Model.WorkflowRun.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec actions_get_workflow_run(Tesla.Env.client(), String.t(), String.t(), integer(), keyword()) ::
          {:ok, ExOctocat.Model.WorkflowRun.t()} | {:error, Tesla.Env.t()}
  def actions_get_workflow_run(connection, owner, repo, run_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/actions/runs/#{run_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.WorkflowRun{}}
    ])
  end

  @doc """
  Get workflow run usage
  Gets the number of billable minutes and total run time for a specific workflow run. Billable minutes only apply to workflows in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see \"[Managing billing for GitHub Actions](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)\".  Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - run_id (integer()): The id of the workflow run.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, ExOctocat.Model.WorkflowRunUsage.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec actions_get_workflow_run_usage(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          integer(),
          keyword()
        ) :: {:ok, ExOctocat.Model.WorkflowRunUsage.t()} | {:error, Tesla.Env.t()}
  def actions_get_workflow_run_usage(connection, owner, repo, run_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/actions/runs/#{run_id}/timing")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.WorkflowRunUsage{}}
    ])
  end

  @doc """
  Get workflow usage
  Gets the number of billable minutes used by a specific workflow during the current billing cycle. Billable minutes only apply to workflows in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see \"[Managing billing for GitHub Actions](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)\".  You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - workflow_id (OneOfintegerstring): The ID of the workflow. You can also pass the workflow file name as a string.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, ExOctocat.Model.WorkflowUsage.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec actions_get_workflow_usage(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          ExOctocat.Model.OneOfintegerstring.t(),
          keyword()
        ) :: {:ok, ExOctocat.Model.WorkflowUsage.t()} | {:error, Tesla.Env.t()}
  def actions_get_workflow_usage(connection, owner, repo, workflow_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/actions/workflows/#{workflow_id}/timing")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.WorkflowUsage{}}
    ])
  end

  @doc """
  List artifacts for a repository
  Lists all artifacts for a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :per_page (integer()): Results per page (max 100)
    - :page (integer()): Page number of the results to fetch.
  ## Returns

  {:ok, ExOctocat.Model.InlineResponse20013.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec actions_list_artifacts_for_repo(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, ExOctocat.Model.InlineResponse20013.t()} | {:error, Tesla.Env.t()}
  def actions_list_artifacts_for_repo(connection, owner, repo, opts \\ []) do
    optional_params = %{
      :per_page => :query,
      :page => :query
    }

    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/actions/artifacts")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.InlineResponse20013{}}
    ])
  end

  @doc """
  List environment secrets
  Lists all secrets available in an environment without revealing their encrypted values. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - repository_id (integer()):
  - environment_name (String.t): The name of the environment
  - opts (KeywordList): [optional] Optional parameters
    - :per_page (integer()): Results per page (max 100)
    - :page (integer()): Page number of the results to fetch.
  ## Returns

  {:ok, ExOctocat.Model.InlineResponse20016.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec actions_list_environment_secrets(Tesla.Env.client(), integer(), String.t(), keyword()) ::
          {:ok, ExOctocat.Model.InlineResponse20016.t()} | {:error, Tesla.Env.t()}
  def actions_list_environment_secrets(connection, repository_id, environment_name, opts \\ []) do
    optional_params = %{
      :per_page => :query,
      :page => :query
    }

    %{}
    |> method(:get)
    |> url("/repositories/#{repository_id}/environments/#{environment_name}/secrets")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.InlineResponse20016{}}
    ])
  end

  @doc """
  List jobs for a workflow run
  Lists jobs for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - run_id (integer()): The id of the workflow run.
  - opts (KeywordList): [optional] Optional parameters
    - :filter (String.t): Filters jobs by their `completed_at` timestamp. Can be one of:   \\* `latest`: Returns jobs from the most recent execution of the workflow run.   \\* `all`: Returns all jobs for a workflow run, including from old executions of the workflow run.
    - :per_page (integer()): Results per page (max 100)
    - :page (integer()): Page number of the results to fetch.
  ## Returns

  {:ok, ExOctocat.Model.InlineResponse20015.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec actions_list_jobs_for_workflow_run(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          integer(),
          keyword()
        ) :: {:ok, ExOctocat.Model.InlineResponse20015.t()} | {:error, Tesla.Env.t()}
  def actions_list_jobs_for_workflow_run(connection, owner, repo, run_id, opts \\ []) do
    optional_params = %{
      :filter => :query,
      :per_page => :query,
      :page => :query
    }

    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/actions/runs/#{run_id}/jobs")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.InlineResponse20015{}}
    ])
  end

  @doc """
  List organization secrets
  Lists all secrets available in an organization without revealing their encrypted values. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :per_page (integer()): Results per page (max 100)
    - :page (integer()): Page number of the results to fetch.
  ## Returns

  {:ok, ExOctocat.Model.InlineResponse20010.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec actions_list_org_secrets(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, ExOctocat.Model.InlineResponse20010.t()} | {:error, Tesla.Env.t()}
  def actions_list_org_secrets(connection, org, opts \\ []) do
    optional_params = %{
      :per_page => :query,
      :page => :query
    }

    %{}
    |> method(:get)
    |> url("/orgs/#{org}/actions/secrets")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.InlineResponse20010{}}
    ])
  end

  @doc """
  List repository access to a self-hosted runner group in an organization
  The self-hosted runner groups REST API is available with GitHub Enterprise Cloud and GitHub Enterprise Server. For more information, see \"[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products).\"  Lists the repositories with access to a self-hosted runner group configured in an organization.  You must authenticate using an access token with the `admin:org` scope to use this endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - runner_group_id (integer()): Unique identifier of the self-hosted runner group.
  - opts (KeywordList): [optional] Optional parameters
    - :page (integer()): Page number of the results to fetch.
    - :per_page (integer()): Results per page (max 100)
  ## Returns

  {:ok, ExOctocat.Model.InlineResponse2008.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec actions_list_repo_access_to_self_hosted_runner_group_in_org(
          Tesla.Env.client(),
          String.t(),
          integer(),
          keyword()
        ) :: {:ok, ExOctocat.Model.InlineResponse2008.t()} | {:error, Tesla.Env.t()}
  def actions_list_repo_access_to_self_hosted_runner_group_in_org(
        connection,
        org,
        runner_group_id,
        opts \\ []
      ) do
    optional_params = %{
      :page => :query,
      :per_page => :query
    }

    %{}
    |> method(:get)
    |> url("/orgs/#{org}/actions/runner-groups/#{runner_group_id}/repositories")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.InlineResponse2008{}}
    ])
  end

  @doc """
  List repository secrets
  Lists all secrets available in a repository without revealing their encrypted values. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :per_page (integer()): Results per page (max 100)
    - :page (integer()): Page number of the results to fetch.
  ## Returns

  {:ok, ExOctocat.Model.InlineResponse20016.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec actions_list_repo_secrets(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, ExOctocat.Model.InlineResponse20016.t()} | {:error, Tesla.Env.t()}
  def actions_list_repo_secrets(connection, owner, repo, opts \\ []) do
    optional_params = %{
      :per_page => :query,
      :page => :query
    }

    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/actions/secrets")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.InlineResponse20016{}}
    ])
  end

  @doc """
  List repository workflows
  Lists the workflows in a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :per_page (integer()): Results per page (max 100)
    - :page (integer()): Page number of the results to fetch.
  ## Returns

  {:ok, ExOctocat.Model.InlineResponse20017.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec actions_list_repo_workflows(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, ExOctocat.Model.InlineResponse20017.t()} | {:error, Tesla.Env.t()}
  def actions_list_repo_workflows(connection, owner, repo, opts \\ []) do
    optional_params = %{
      :per_page => :query,
      :page => :query
    }

    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/actions/workflows")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.InlineResponse20017{}}
    ])
  end

  @doc """
  List runner applications for an organization
  Lists binaries for the runner application that you can download and run.  You must authenticate using an access token with the `admin:org` scope to use this endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, [%RunnerApplication{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec actions_list_runner_applications_for_org(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, list(ExOctocat.Model.RunnerApplication.t())} | {:error, Tesla.Env.t()}
  def actions_list_runner_applications_for_org(connection, org, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/orgs/#{org}/actions/runners/downloads")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, [%ExOctocat.Model.RunnerApplication{}]}
    ])
  end

  @doc """
  List runner applications for a repository
  Lists binaries for the runner application that you can download and run.  You must authenticate using an access token with the `repo` scope to use this endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, [%RunnerApplication{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec actions_list_runner_applications_for_repo(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, list(ExOctocat.Model.RunnerApplication.t())} | {:error, Tesla.Env.t()}
  def actions_list_runner_applications_for_repo(connection, owner, repo, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/actions/runners/downloads")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, [%ExOctocat.Model.RunnerApplication{}]}
    ])
  end

  @doc """
  List selected repositories for an organization secret
  Lists all repositories that have been selected when the `visibility` for repository access to a secret is set to `selected`. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - secret_name (String.t): secret_name parameter
  - opts (KeywordList): [optional] Optional parameters
    - :page (integer()): Page number of the results to fetch.
    - :per_page (integer()): Results per page (max 100)
  ## Returns

  {:ok, ExOctocat.Model.InlineResponse20011.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec actions_list_selected_repos_for_org_secret(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, ExOctocat.Model.InlineResponse20011.t()} | {:error, Tesla.Env.t()}
  def actions_list_selected_repos_for_org_secret(connection, org, secret_name, opts \\ []) do
    optional_params = %{
      :page => :query,
      :per_page => :query
    }

    %{}
    |> method(:get)
    |> url("/orgs/#{org}/actions/secrets/#{secret_name}/repositories")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.InlineResponse20011{}}
    ])
  end

  @doc """
  List selected repositories enabled for GitHub Actions in an organization
  Lists the selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\"  You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :per_page (integer()): Results per page (max 100)
    - :page (integer()): Page number of the results to fetch.
  ## Returns

  {:ok, ExOctocat.Model.InlineResponse2006.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec actions_list_selected_repositories_enabled_github_actions_organization(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) :: {:ok, ExOctocat.Model.InlineResponse2006.t()} | {:error, Tesla.Env.t()}
  def actions_list_selected_repositories_enabled_github_actions_organization(
        connection,
        org,
        opts \\ []
      ) do
    optional_params = %{
      :per_page => :query,
      :page => :query
    }

    %{}
    |> method(:get)
    |> url("/orgs/#{org}/actions/permissions/repositories")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.InlineResponse2006{}}
    ])
  end

  @doc """
  List self-hosted runner groups for an organization
  The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see \"[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products).\"  Lists all self-hosted runner groups configured in an organization and inherited from an enterprise.  You must authenticate using an access token with the `admin:org` scope to use this endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :per_page (integer()): Results per page (max 100)
    - :page (integer()): Page number of the results to fetch.
  ## Returns

  {:ok, ExOctocat.Model.InlineResponse2007.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec actions_list_self_hosted_runner_groups_for_org(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, ExOctocat.Model.InlineResponse2007.t()} | {:error, Tesla.Env.t()}
  def actions_list_self_hosted_runner_groups_for_org(connection, org, opts \\ []) do
    optional_params = %{
      :per_page => :query,
      :page => :query
    }

    %{}
    |> method(:get)
    |> url("/orgs/#{org}/actions/runner-groups")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.InlineResponse2007{}}
    ])
  end

  @doc """
  List self-hosted runners for an organization
  Lists all self-hosted runners configured in an organization.  You must authenticate using an access token with the `admin:org` scope to use this endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :per_page (integer()): Results per page (max 100)
    - :page (integer()): Page number of the results to fetch.
  ## Returns

  {:ok, ExOctocat.Model.InlineResponse2009.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec actions_list_self_hosted_runners_for_org(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, ExOctocat.Model.InlineResponse2009.t()} | {:error, Tesla.Env.t()}
  def actions_list_self_hosted_runners_for_org(connection, org, opts \\ []) do
    optional_params = %{
      :per_page => :query,
      :page => :query
    }

    %{}
    |> method(:get)
    |> url("/orgs/#{org}/actions/runners")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.InlineResponse2009{}}
    ])
  end

  @doc """
  List self-hosted runners for a repository
  Lists all self-hosted runners configured in a repository. You must authenticate using an access token with the `repo` scope to use this endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :per_page (integer()): Results per page (max 100)
    - :page (integer()): Page number of the results to fetch.
  ## Returns

  {:ok, ExOctocat.Model.InlineResponse2009.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec actions_list_self_hosted_runners_for_repo(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, ExOctocat.Model.InlineResponse2009.t()} | {:error, Tesla.Env.t()}
  def actions_list_self_hosted_runners_for_repo(connection, owner, repo, opts \\ []) do
    optional_params = %{
      :per_page => :query,
      :page => :query
    }

    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/actions/runners")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.InlineResponse2009{}}
    ])
  end

  @doc """
  List self-hosted runners in a group for an organization
  The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see \"[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products).\"  Lists self-hosted runners that are in a specific organization group.  You must authenticate using an access token with the `admin:org` scope to use this endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - runner_group_id (integer()): Unique identifier of the self-hosted runner group.
  - opts (KeywordList): [optional] Optional parameters
    - :per_page (integer()): Results per page (max 100)
    - :page (integer()): Page number of the results to fetch.
  ## Returns

  {:ok, ExOctocat.Model.InlineResponse2003.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec actions_list_self_hosted_runners_in_group_for_org(
          Tesla.Env.client(),
          String.t(),
          integer(),
          keyword()
        ) :: {:ok, ExOctocat.Model.InlineResponse2003.t()} | {:error, Tesla.Env.t()}
  def actions_list_self_hosted_runners_in_group_for_org(
        connection,
        org,
        runner_group_id,
        opts \\ []
      ) do
    optional_params = %{
      :per_page => :query,
      :page => :query
    }

    %{}
    |> method(:get)
    |> url("/orgs/#{org}/actions/runner-groups/#{runner_group_id}/runners")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.InlineResponse2003{}}
    ])
  end

  @doc """
  List workflow run artifacts
  Lists artifacts for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - run_id (integer()): The id of the workflow run.
  - opts (KeywordList): [optional] Optional parameters
    - :per_page (integer()): Results per page (max 100)
    - :page (integer()): Page number of the results to fetch.
  ## Returns

  {:ok, ExOctocat.Model.InlineResponse20013.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec actions_list_workflow_run_artifacts(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          integer(),
          keyword()
        ) :: {:ok, ExOctocat.Model.InlineResponse20013.t()} | {:error, Tesla.Env.t()}
  def actions_list_workflow_run_artifacts(connection, owner, repo, run_id, opts \\ []) do
    optional_params = %{
      :per_page => :query,
      :page => :query
    }

    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/actions/runs/#{run_id}/artifacts")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.InlineResponse20013{}}
    ])
  end

  @doc """
  List workflow runs
  List all workflow runs for a workflow. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).  Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - workflow_id (OneOfintegerstring): The ID of the workflow. You can also pass the workflow file name as a string.
  - opts (KeywordList): [optional] Optional parameters
    - :actor (String.t): Returns someone's workflow runs. Use the login for the user who created the `push` associated with the check suite or workflow run.
    - :branch (String.t): Returns workflow runs associated with a branch. Use the name of the branch of the `push`.
    - :event (String.t): Returns workflow run triggered by the event you specify. For example, `push`, `pull_request` or `issue`. For more information, see \"[Events that trigger workflows](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows).\"
    - :status (String.t): Returns workflow runs with the check run `status` or `conclusion` that you specify. For example, a conclusion can be `success` or a status can be `in_progress`. Only GitHub can set a status of `waiting` or `requested`. For a list of the possible `status` and `conclusion` options, see \"[Create a check run](https://docs.github.com/rest/reference/checks#create-a-check-run).\"
    - :per_page (integer()): Results per page (max 100)
    - :page (integer()): Page number of the results to fetch.
    - :created (DateTime.t):
  ## Returns

  {:ok, ExOctocat.Model.InlineResponse20014.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec actions_list_workflow_runs(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          ExOctocat.Model.OneOfintegerstring.t(),
          keyword()
        ) :: {:ok, ExOctocat.Model.InlineResponse20014.t()} | {:error, Tesla.Env.t()}
  def actions_list_workflow_runs(connection, owner, repo, workflow_id, opts \\ []) do
    optional_params = %{
      :actor => :query,
      :branch => :query,
      :event => :query,
      :status => :query,
      :per_page => :query,
      :page => :query,
      :created => :query
    }

    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/actions/workflows/#{workflow_id}/runs")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.InlineResponse20014{}}
    ])
  end

  @doc """
  List workflow runs for a repository
  Lists all workflow runs for a repository. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).  Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :actor (String.t): Returns someone's workflow runs. Use the login for the user who created the `push` associated with the check suite or workflow run.
    - :branch (String.t): Returns workflow runs associated with a branch. Use the name of the branch of the `push`.
    - :event (String.t): Returns workflow run triggered by the event you specify. For example, `push`, `pull_request` or `issue`. For more information, see \"[Events that trigger workflows](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows).\"
    - :status (String.t): Returns workflow runs with the check run `status` or `conclusion` that you specify. For example, a conclusion can be `success` or a status can be `in_progress`. Only GitHub can set a status of `waiting` or `requested`. For a list of the possible `status` and `conclusion` options, see \"[Create a check run](https://docs.github.com/rest/reference/checks#create-a-check-run).\"
    - :per_page (integer()): Results per page (max 100)
    - :page (integer()): Page number of the results to fetch.
    - :created (DateTime.t):
  ## Returns

  {:ok, ExOctocat.Model.InlineResponse20014.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec actions_list_workflow_runs_for_repo(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, ExOctocat.Model.InlineResponse20014.t()} | {:error, Tesla.Env.t()}
  def actions_list_workflow_runs_for_repo(connection, owner, repo, opts \\ []) do
    optional_params = %{
      :actor => :query,
      :branch => :query,
      :event => :query,
      :status => :query,
      :per_page => :query,
      :page => :query,
      :created => :query
    }

    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/actions/runs")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.InlineResponse20014{}}
    ])
  end

  @doc """
  Re-run a workflow
  Re-runs your workflow run using its `id`. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - run_id (integer()): The id of the workflow run.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, map()} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec actions_re_run_workflow(Tesla.Env.client(), String.t(), String.t(), integer(), keyword()) ::
          {:ok, Map.t()} | {:error, Tesla.Env.t()}
  def actions_re_run_workflow(connection, owner, repo, run_id, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/repos/#{owner}/#{repo}/actions/runs/#{run_id}/rerun")
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {201, false}
    ])
  end

  @doc """
  Remove repository access to a self-hosted runner group in an organization
  The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see \"[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products).\"   Removes a repository from the list of selected repositories that can access a self-hosted runner group. The runner group must have `visibility` set to `selected`. For more information, see \"[Create a self-hosted runner group for an organization](#create-a-self-hosted-runner-group-for-an-organization).\"  You must authenticate using an access token with the `admin:org` scope to use this endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - runner_group_id (integer()): Unique identifier of the self-hosted runner group.
  - repository_id (integer()):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec actions_remove_repo_access_to_self_hosted_runner_group_in_org(
          Tesla.Env.client(),
          String.t(),
          integer(),
          integer(),
          keyword()
        ) :: {:ok, nil} | {:error, Tesla.Env.t()}
  def actions_remove_repo_access_to_self_hosted_runner_group_in_org(
        connection,
        org,
        runner_group_id,
        repository_id,
        _opts \\ []
      ) do
    %{}
    |> method(:delete)
    |> url("/orgs/#{org}/actions/runner-groups/#{runner_group_id}/repositories/#{repository_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false}
    ])
  end

  @doc """
  Remove selected repository from an organization secret
  Removes a repository from an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - secret_name (String.t): secret_name parameter
  - repository_id (integer()):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec actions_remove_selected_repo_from_org_secret(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          integer(),
          keyword()
        ) :: {:ok, nil} | {:error, Tesla.Env.t()}
  def actions_remove_selected_repo_from_org_secret(
        connection,
        org,
        secret_name,
        repository_id,
        _opts \\ []
      ) do
    %{}
    |> method(:delete)
    |> url("/orgs/#{org}/actions/secrets/#{secret_name}/repositories/#{repository_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false},
      {409, false}
    ])
  end

  @doc """
  Remove a self-hosted runner from a group for an organization
  The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see \"[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products).\"   Removes a self-hosted runner from a group configured in an organization. The runner is then returned to the default group.  You must authenticate using an access token with the `admin:org` scope to use this endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - runner_group_id (integer()): Unique identifier of the self-hosted runner group.
  - runner_id (integer()): Unique identifier of the self-hosted runner.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec actions_remove_self_hosted_runner_from_group_for_org(
          Tesla.Env.client(),
          String.t(),
          integer(),
          integer(),
          keyword()
        ) :: {:ok, nil} | {:error, Tesla.Env.t()}
  def actions_remove_self_hosted_runner_from_group_for_org(
        connection,
        org,
        runner_group_id,
        runner_id,
        _opts \\ []
      ) do
    %{}
    |> method(:delete)
    |> url("/orgs/#{org}/actions/runner-groups/#{runner_group_id}/runners/#{runner_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false}
    ])
  end

  @doc """
  Review pending deployments for a workflow run
  Approve or reject pending deployments that are waiting on approval by a required reviewer.  Anyone with read access to the repository contents and deployments can use this endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - run_id (integer()): The id of the workflow run.
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject61):
  ## Returns

  {:ok, [%Deployment{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec actions_review_pending_deployments_for_run(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          integer(),
          keyword()
        ) :: {:ok, list(ExOctocat.Model.Deployment.t())} | {:error, Tesla.Env.t()}
  def actions_review_pending_deployments_for_run(connection, owner, repo, run_id, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:post)
    |> url("/repos/#{owner}/#{repo}/actions/runs/#{run_id}/pending_deployments")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, [%ExOctocat.Model.Deployment{}]}
    ])
  end

  @doc """
  Set allowed actions for an organization
  Sets the actions that are allowed in an organization. To use this endpoint, the organization permission policy for `allowed_actions` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\"  If the organization belongs to an enterprise that has `selected` actions set at the enterprise level, then you cannot override any of the enterprise's allowed actions settings.  To use the `patterns_allowed` setting for private repositories, the organization must belong to an enterprise. If the organization does not belong to an enterprise, then the `patterns_allowed` setting only applies to public repositories in the organization.  You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :body (SelectedActions):
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec actions_set_allowed_actions_organization(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, nil} | {:error, Tesla.Env.t()}
  def actions_set_allowed_actions_organization(connection, org, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:put)
    |> url("/orgs/#{org}/actions/permissions/selected-actions")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false}
    ])
  end

  @doc """
  Set allowed actions for a repository
  Sets the actions that are allowed in a repository. To use this endpoint, the repository permission policy for `allowed_actions` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository).\"  If the repository belongs to an organization or enterprise that has `selected` actions set at the organization or enterprise levels, then you cannot override any of the allowed actions settings.  To use the `patterns_allowed` setting for private repositories, the repository must belong to an enterprise. If the repository does not belong to an enterprise, then the `patterns_allowed` setting only applies to public repositories.  You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration` repository permission to use this API.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :body (SelectedActions):
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec actions_set_allowed_actions_repository(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, nil} | {:error, Tesla.Env.t()}
  def actions_set_allowed_actions_repository(connection, owner, repo, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:put)
    |> url("/repos/#{owner}/#{repo}/actions/permissions/selected-actions")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false}
    ])
  end

  @doc """
  Set GitHub Actions permissions for an organization
  Sets the GitHub Actions permissions policy for repositories and allowed actions in an organization.  If the organization belongs to an enterprise that has set restrictive permissions at the enterprise level, such as `allowed_actions` to `selected` actions, then you cannot override them for the organization.  You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject24):
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec actions_set_github_actions_permissions_organization(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) :: {:ok, nil} | {:error, Tesla.Env.t()}
  def actions_set_github_actions_permissions_organization(connection, org, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:put)
    |> url("/orgs/#{org}/actions/permissions")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false}
    ])
  end

  @doc """
  Set GitHub Actions permissions for a repository
  Sets the GitHub Actions permissions policy for enabling GitHub Actions and allowed actions in the repository.  If the repository belongs to an organization or enterprise that has set restrictive permissions at the organization or enterprise levels, such as `allowed_actions` to `selected` actions, then you cannot override them for the repository.  You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration` repository permission to use this API.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject60):
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec actions_set_github_actions_permissions_repository(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, nil} | {:error, Tesla.Env.t()}
  def actions_set_github_actions_permissions_repository(connection, owner, repo, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:put)
    |> url("/repos/#{owner}/#{repo}/actions/permissions")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false}
    ])
  end

  @doc """
  Set repository access for a self-hosted runner group in an organization
  The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see \"[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products).\"  Replaces the list of repositories that have access to a self-hosted runner group configured in an organization.  You must authenticate using an access token with the `admin:org` scope to use this endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - runner_group_id (integer()): Unique identifier of the self-hosted runner group.
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject28):
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec actions_set_repo_access_to_self_hosted_runner_group_in_org(
          Tesla.Env.client(),
          String.t(),
          integer(),
          keyword()
        ) :: {:ok, nil} | {:error, Tesla.Env.t()}
  def actions_set_repo_access_to_self_hosted_runner_group_in_org(
        connection,
        org,
        runner_group_id,
        opts \\ []
      ) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:put)
    |> url("/orgs/#{org}/actions/runner-groups/#{runner_group_id}/repositories")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false}
    ])
  end

  @doc """
  Set selected repositories for an organization secret
  Replaces all repositories for an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - secret_name (String.t): secret_name parameter
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject31):
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec actions_set_selected_repos_for_org_secret(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, nil} | {:error, Tesla.Env.t()}
  def actions_set_selected_repos_for_org_secret(connection, org, secret_name, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:put)
    |> url("/orgs/#{org}/actions/secrets/#{secret_name}/repositories")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false}
    ])
  end

  @doc """
  Set selected repositories enabled for GitHub Actions in an organization
  Replaces the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\"  You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject25):
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec actions_set_selected_repositories_enabled_github_actions_organization(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) :: {:ok, nil} | {:error, Tesla.Env.t()}
  def actions_set_selected_repositories_enabled_github_actions_organization(
        connection,
        org,
        opts \\ []
      ) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:put)
    |> url("/orgs/#{org}/actions/permissions/repositories")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false}
    ])
  end

  @doc """
  Set self-hosted runners in a group for an organization
  The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see \"[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products).\"  Replaces the list of self-hosted runners that are part of an organization runner group.  You must authenticate using an access token with the `admin:org` scope to use this endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - runner_group_id (integer()): Unique identifier of the self-hosted runner group.
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject29):
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec actions_set_self_hosted_runners_in_group_for_org(
          Tesla.Env.client(),
          String.t(),
          integer(),
          keyword()
        ) :: {:ok, nil} | {:error, Tesla.Env.t()}
  def actions_set_self_hosted_runners_in_group_for_org(
        connection,
        org,
        runner_group_id,
        opts \\ []
      ) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:put)
    |> url("/orgs/#{org}/actions/runner-groups/#{runner_group_id}/runners")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false}
    ])
  end

  @doc """
  Update a self-hosted runner group for an organization
  The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see \"[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products).\"  Updates the `name` and `visibility` of a self-hosted runner group in an organization.  You must authenticate using an access token with the `admin:org` scope to use this endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - runner_group_id (integer()): Unique identifier of the self-hosted runner group.
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject27):
  ## Returns

  {:ok, ExOctocat.Model.RunnerGroupsOrg.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec actions_update_self_hosted_runner_group_for_org(
          Tesla.Env.client(),
          String.t(),
          integer(),
          keyword()
        ) :: {:ok, ExOctocat.Model.RunnerGroupsOrg.t()} | {:error, Tesla.Env.t()}
  def actions_update_self_hosted_runner_group_for_org(
        connection,
        org,
        runner_group_id,
        opts \\ []
      ) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:patch)
    |> url("/orgs/#{org}/actions/runner-groups/#{runner_group_id}")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.RunnerGroupsOrg{}}
    ])
  end
end
