# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule ExOctocat.Api.Pulls do
  @moduledoc """
  API calls for all endpoints tagged `Pulls`.
  """

  alias ExOctocat.Connection
  import ExOctocat.RequestBuilder

  @doc """
  Check if a pull request has been merged

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - pull_number (integer()):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec pulls_check_if_merged(Tesla.Env.client(), String.t(), String.t(), integer(), keyword()) ::
          {:ok, nil} | {:error, Tesla.Env.t()}
  def pulls_check_if_merged(connection, owner, repo, pull_number, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/pulls/#{pull_number}/merge")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false},
      {404, false}
    ])
  end

  @doc """
  Create a pull request
  Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  To open or update a pull request in a public repository, you must have write access to the head or the source branch. For organization-owned repositories, you must be a member of the organization that owns the repository to open or update a pull request.  You can create a new pull request.  This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \"[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\" and \"[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)\" for details.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject117):
  ## Returns

  {:ok, ExOctocat.Model.PullRequest.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec pulls_create(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, ExOctocat.Model.PullRequest.t()}
          | {:ok, ExOctocat.Model.ValidationError.t()}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:error, Tesla.Env.t()}
  def pulls_create(connection, owner, repo, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:post)
    |> url("/repos/#{owner}/#{repo}/pulls")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {201, %ExOctocat.Model.PullRequest{}},
      {403, %ExOctocat.Model.BasicError{}},
      {422, %ExOctocat.Model.ValidationError{}}
    ])
  end

  @doc """
  Create a reply for a review comment
  Creates a reply to a review comment for a pull request. For the `comment_id`, provide the ID of the review comment you are replying to. This must be the ID of a _top-level review comment_, not a reply to that comment. Replies to replies are not supported.  This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \"[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\" and \"[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\" for details.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - pull_number (integer()):
  - comment_id (integer()): comment_id parameter
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject122):
  ## Returns

  {:ok, ExOctocat.Model.PullRequestReviewComment.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec pulls_create_reply_for_review_comment(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok, ExOctocat.Model.BasicError.t()}
          | {:ok, ExOctocat.Model.PullRequestReviewComment.t()}
          | {:error, Tesla.Env.t()}
  def pulls_create_reply_for_review_comment(
        connection,
        owner,
        repo,
        pull_number,
        comment_id,
        opts \\ []
      ) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:post)
    |> url("/repos/#{owner}/#{repo}/pulls/#{pull_number}/comments/#{comment_id}/replies")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {201, %ExOctocat.Model.PullRequestReviewComment{}},
      {404, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  Create a review for a pull request
  This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \"[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\" and \"[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\" for details.  Pull request reviews created in the `PENDING` state do not include the `submitted_at` property in the response.  **Note:** To comment on a specific line in a file, you need to first determine the _position_ of that line in the diff. The GitHub REST API v3 offers the `application/vnd.github.v3.diff` [media type](https://docs.github.com/rest/overview/media-types#commits-commit-comparison-and-pull-requests). To see a pull request diff, add this media type to the `Accept` header of a call to the [single pull request](https://docs.github.com/rest/reference/pulls#get-a-pull-request) endpoint.  The `position` value equals the number of lines down from the first \"@@\" hunk header in the file you want to add a comment. The line just below the \"@@\" line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - pull_number (integer()):
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject125):
  ## Returns

  {:ok, ExOctocat.Model.PullRequestReview.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec pulls_create_review(Tesla.Env.client(), String.t(), String.t(), integer(), keyword()) ::
          {:ok, ExOctocat.Model.ValidationErrorSimple.t()}
          | {:ok, ExOctocat.Model.PullRequestReview.t()}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:error, Tesla.Env.t()}
  def pulls_create_review(connection, owner, repo, pull_number, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:post)
    |> url("/repos/#{owner}/#{repo}/pulls/#{pull_number}/reviews")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.PullRequestReview{}},
      {422, %ExOctocat.Model.ValidationErrorSimple{}},
      {403, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  Create a review comment for a pull request
   Creates a review comment in the pull request diff. To add a regular comment to a pull request timeline, see \"[Create an issue comment](https://docs.github.com/rest/reference/issues#create-an-issue-comment).\" We recommend creating a review comment using `line`, `side`, and optionally `start_line` and `start_side` if your comment applies to more than one line in the pull request diff.  You can still create a review comment using the `position` parameter. When you use `position`, the `line`, `side`, `start_line`, and `start_side` parameters are not required. For more information, see the [`comfort-fade` preview notice](https://docs.github.com/rest/reference/pulls#create-a-review-comment-for-a-pull-request-preview-notices).  **Note:** The position value equals the number of lines down from the first \"@@\" hunk header in the file you want to add a comment. The line just below the \"@@\" line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.  This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \"[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\" and \"[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\" for details.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - pull_number (integer()):
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject121):
  ## Returns

  {:ok, ExOctocat.Model.PullRequestReviewComment.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec pulls_create_review_comment(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          integer(),
          keyword()
        ) ::
          {:ok, ExOctocat.Model.ValidationError.t()}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:ok, ExOctocat.Model.PullRequestReviewComment.t()}
          | {:error, Tesla.Env.t()}
  def pulls_create_review_comment(connection, owner, repo, pull_number, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:post)
    |> url("/repos/#{owner}/#{repo}/pulls/#{pull_number}/comments")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {201, %ExOctocat.Model.PullRequestReviewComment{}},
      {422, %ExOctocat.Model.ValidationError{}},
      {403, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  Delete a pending review for a pull request

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - pull_number (integer()):
  - review_id (integer()): review_id parameter
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, ExOctocat.Model.PullRequestReview.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec pulls_delete_pending_review(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok, ExOctocat.Model.ValidationErrorSimple.t()}
          | {:ok, ExOctocat.Model.PullRequestReview.t()}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:error, Tesla.Env.t()}
  def pulls_delete_pending_review(connection, owner, repo, pull_number, review_id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/repos/#{owner}/#{repo}/pulls/#{pull_number}/reviews/#{review_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.PullRequestReview{}},
      {422, %ExOctocat.Model.ValidationErrorSimple{}},
      {404, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  Delete a review comment for a pull request
  Deletes a review comment.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - comment_id (integer()): comment_id parameter
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec pulls_delete_review_comment(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          integer(),
          keyword()
        ) :: {:ok, nil} | {:ok, ExOctocat.Model.BasicError.t()} | {:error, Tesla.Env.t()}
  def pulls_delete_review_comment(connection, owner, repo, comment_id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/repos/#{owner}/#{repo}/pulls/comments/#{comment_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false},
      {404, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  Dismiss a review for a pull request
  **Note:** To dismiss a pull request review on a [protected branch](https://docs.github.com/rest/reference/repos#branches), you must be a repository administrator or be included in the list of people or teams who can dismiss pull request reviews.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - pull_number (integer()):
  - review_id (integer()): review_id parameter
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject127):
  ## Returns

  {:ok, ExOctocat.Model.PullRequestReview.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec pulls_dismiss_review(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok, ExOctocat.Model.ValidationErrorSimple.t()}
          | {:ok, ExOctocat.Model.PullRequestReview.t()}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:error, Tesla.Env.t()}
  def pulls_dismiss_review(connection, owner, repo, pull_number, review_id, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:put)
    |> url("/repos/#{owner}/#{repo}/pulls/#{pull_number}/reviews/#{review_id}/dismissals")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.PullRequestReview{}},
      {404, %ExOctocat.Model.BasicError{}},
      {422, %ExOctocat.Model.ValidationErrorSimple{}}
    ])
  end

  @doc """
  Get a pull request
  Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Lists details of a pull request by providing its number.  When you get, [create](https://docs.github.com/rest/reference/pulls/#create-a-pull-request), or [edit](https://docs.github.com/rest/reference/pulls#update-a-pull-request) a pull request, GitHub creates a merge commit to test whether the pull request can be automatically merged into the base branch. This test commit is not added to the base branch or the head branch. You can review the status of the test commit using the `mergeable` key. For more information, see \"[Checking mergeability of pull requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)\".  The value of the `mergeable` attribute can be `true`, `false`, or `null`. If the value is `null`, then GitHub has started a background job to compute the mergeability. After giving the job time to complete, resubmit the request. When the job finishes, you will see a non-`null` value for the `mergeable` attribute in the response. If `mergeable` is `true`, then `merge_commit_sha` will be the SHA of the _test_ merge commit.  The value of the `merge_commit_sha` attribute changes depending on the state of the pull request. Before merging a pull request, the `merge_commit_sha` attribute holds the SHA of the _test_ merge commit. After merging a pull request, the `merge_commit_sha` attribute changes depending on how you merged the pull request:  *   If merged as a [merge commit](https://help.github.com/articles/about-merge-methods-on-github/), `merge_commit_sha` represents the SHA of the merge commit. *   If merged via a [squash](https://help.github.com/articles/about-merge-methods-on-github/#squashing-your-merge-commits), `merge_commit_sha` represents the SHA of the squashed commit on the base branch. *   If [rebased](https://help.github.com/articles/about-merge-methods-on-github/#rebasing-and-merging-your-commits), `merge_commit_sha` represents the commit that the base branch was updated to.  Pass the appropriate [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - pull_number (integer()):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, ExOctocat.Model.PullRequest.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec pulls_get(Tesla.Env.client(), String.t(), String.t(), integer(), keyword()) ::
          {:ok, nil}
          | {:ok, ExOctocat.Model.PullRequest.t()}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:error, Tesla.Env.t()}
  def pulls_get(connection, owner, repo, pull_number, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/pulls/#{pull_number}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.PullRequest{}},
      {304, false},
      {500, %ExOctocat.Model.BasicError{}},
      {404, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  Get a review for a pull request

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - pull_number (integer()):
  - review_id (integer()): review_id parameter
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, ExOctocat.Model.PullRequestReview.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec pulls_get_review(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok, ExOctocat.Model.PullRequestReview.t()}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:error, Tesla.Env.t()}
  def pulls_get_review(connection, owner, repo, pull_number, review_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/pulls/#{pull_number}/reviews/#{review_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.PullRequestReview{}},
      {404, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  Get a review comment for a pull request
  Provides details for a review comment.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - comment_id (integer()): comment_id parameter
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, ExOctocat.Model.PullRequestReviewComment.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec pulls_get_review_comment(Tesla.Env.client(), String.t(), String.t(), integer(), keyword()) ::
          {:ok, ExOctocat.Model.BasicError.t()}
          | {:ok, ExOctocat.Model.PullRequestReviewComment.t()}
          | {:error, Tesla.Env.t()}
  def pulls_get_review_comment(connection, owner, repo, comment_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/pulls/comments/#{comment_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.PullRequestReviewComment{}},
      {404, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  List pull requests
  Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :state (String.t): Either `open`, `closed`, or `all` to filter by state.
    - :head (String.t): Filter pulls by head user or head organization and branch name in the format of `user:ref-name` or `organization:ref-name`. For example: `github:new-script-format` or `octocat:test-branch`.
    - :base (String.t): Filter pulls by base branch name. Example: `gh-pages`.
    - :sort (String.t): What to sort results by. Can be either `created`, `updated`, `popularity` (comment count) or `long-running` (age, filtering by pulls updated in the last month).
    - :direction (String.t): The direction of the sort. Can be either `asc` or `desc`. Default: `desc` when sort is `created` or sort is not specified, otherwise `asc`.
    - :per_page (integer()): Results per page (max 100)
    - :page (integer()): Page number of the results to fetch.
  ## Returns

  {:ok, [%PullRequestSimple{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec pulls_list(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, nil}
          | {:ok, ExOctocat.Model.ValidationError.t()}
          | {:ok, list(ExOctocat.Model.PullRequestSimple.t())}
          | {:error, Tesla.Env.t()}
  def pulls_list(connection, owner, repo, opts \\ []) do
    optional_params = %{
      :state => :query,
      :head => :query,
      :base => :query,
      :sort => :query,
      :direction => :query,
      :per_page => :query,
      :page => :query
    }

    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/pulls")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, [%ExOctocat.Model.PullRequestSimple{}]},
      {304, false},
      {422, %ExOctocat.Model.ValidationError{}}
    ])
  end

  @doc """
  List comments for a pull request review
  List comments for a specific pull request review.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - pull_number (integer()):
  - review_id (integer()): review_id parameter
  - opts (KeywordList): [optional] Optional parameters
    - :per_page (integer()): Results per page (max 100)
    - :page (integer()): Page number of the results to fetch.
  ## Returns

  {:ok, [%ReviewComment{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec pulls_list_comments_for_review(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok, list(ExOctocat.Model.ReviewComment.t())}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:error, Tesla.Env.t()}
  def pulls_list_comments_for_review(connection, owner, repo, pull_number, review_id, opts \\ []) do
    optional_params = %{
      :per_page => :query,
      :page => :query
    }

    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/pulls/#{pull_number}/reviews/#{review_id}/comments")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, [%ExOctocat.Model.ReviewComment{}]},
      {404, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  List commits on a pull request
  Lists a maximum of 250 commits for a pull request. To receive a complete commit list for pull requests with more than 250 commits, use the [List commits](https://docs.github.com/rest/reference/repos#list-commits) endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - pull_number (integer()):
  - opts (KeywordList): [optional] Optional parameters
    - :per_page (integer()): Results per page (max 100)
    - :page (integer()): Page number of the results to fetch.
  ## Returns

  {:ok, [%Commit{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec pulls_list_commits(Tesla.Env.client(), String.t(), String.t(), integer(), keyword()) ::
          {:ok, list(ExOctocat.Model.Commit.t())} | {:error, Tesla.Env.t()}
  def pulls_list_commits(connection, owner, repo, pull_number, opts \\ []) do
    optional_params = %{
      :per_page => :query,
      :page => :query
    }

    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/pulls/#{pull_number}/commits")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, [%ExOctocat.Model.Commit{}]}
    ])
  end

  @doc """
  List pull requests files
  **Note:** Responses include a maximum of 3000 files. The paginated response returns 30 files per page by default.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - pull_number (integer()):
  - opts (KeywordList): [optional] Optional parameters
    - :per_page (integer()): Results per page (max 100)
    - :page (integer()): Page number of the results to fetch.
  ## Returns

  {:ok, [%DiffEntry{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec pulls_list_files(Tesla.Env.client(), String.t(), String.t(), integer(), keyword()) ::
          {:ok, ExOctocat.Model.ValidationError.t()}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:ok, list(ExOctocat.Model.DiffEntry.t())}
          | {:error, Tesla.Env.t()}
  def pulls_list_files(connection, owner, repo, pull_number, opts \\ []) do
    optional_params = %{
      :per_page => :query,
      :page => :query
    }

    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/pulls/#{pull_number}/files")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, [%ExOctocat.Model.DiffEntry{}]},
      {422, %ExOctocat.Model.ValidationError{}},
      {500, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  List requested reviewers for a pull request

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - pull_number (integer()):
  - opts (KeywordList): [optional] Optional parameters
    - :per_page (integer()): Results per page (max 100)
    - :page (integer()): Page number of the results to fetch.
  ## Returns

  {:ok, ExOctocat.Model.PullRequestReviewRequest.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec pulls_list_requested_reviewers(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          integer(),
          keyword()
        ) :: {:ok, ExOctocat.Model.PullRequestReviewRequest.t()} | {:error, Tesla.Env.t()}
  def pulls_list_requested_reviewers(connection, owner, repo, pull_number, opts \\ []) do
    optional_params = %{
      :per_page => :query,
      :page => :query
    }

    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/pulls/#{pull_number}/requested_reviewers")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.PullRequestReviewRequest{}}
    ])
  end

  @doc """
  List review comments on a pull request
  Lists all review comments for a pull request. By default, review comments are in ascending order by ID.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - pull_number (integer()):
  - opts (KeywordList): [optional] Optional parameters
    - :sort (String.t): One of `created` (when the repository was starred) or `updated` (when it was last pushed to).
    - :direction (String.t): Can be either `asc` or `desc`. Ignored without `sort` parameter.
    - :since (DateTime.t): Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
    - :per_page (integer()): Results per page (max 100)
    - :page (integer()): Page number of the results to fetch.
  ## Returns

  {:ok, [%PullRequestReviewComment{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec pulls_list_review_comments(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          integer(),
          keyword()
        ) ::
          {:ok, list(ExOctocat.Model.PullRequestReviewComment.t())}
          | {:error, Tesla.Env.t()}
  def pulls_list_review_comments(connection, owner, repo, pull_number, opts \\ []) do
    optional_params = %{
      :sort => :query,
      :direction => :query,
      :since => :query,
      :per_page => :query,
      :page => :query
    }

    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/pulls/#{pull_number}/comments")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, [%ExOctocat.Model.PullRequestReviewComment{}]}
    ])
  end

  @doc """
  List review comments in a repository
  Lists review comments for all pull requests in a repository. By default, review comments are in ascending order by ID.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :sort (String.t):
    - :direction (String.t): Can be either `asc` or `desc`. Ignored without `sort` parameter.
    - :since (DateTime.t): Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
    - :per_page (integer()): Results per page (max 100)
    - :page (integer()): Page number of the results to fetch.
  ## Returns

  {:ok, [%PullRequestReviewComment{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec pulls_list_review_comments_for_repo(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, list(ExOctocat.Model.PullRequestReviewComment.t())}
          | {:error, Tesla.Env.t()}
  def pulls_list_review_comments_for_repo(connection, owner, repo, opts \\ []) do
    optional_params = %{
      :sort => :query,
      :direction => :query,
      :since => :query,
      :per_page => :query,
      :page => :query
    }

    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/pulls/comments")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, [%ExOctocat.Model.PullRequestReviewComment{}]}
    ])
  end

  @doc """
  List reviews for a pull request
  The list of reviews returns in chronological order.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - pull_number (integer()):
  - opts (KeywordList): [optional] Optional parameters
    - :per_page (integer()): Results per page (max 100)
    - :page (integer()): Page number of the results to fetch.
  ## Returns

  {:ok, [%PullRequestReview{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec pulls_list_reviews(Tesla.Env.client(), String.t(), String.t(), integer(), keyword()) ::
          {:ok, list(ExOctocat.Model.PullRequestReview.t())} | {:error, Tesla.Env.t()}
  def pulls_list_reviews(connection, owner, repo, pull_number, opts \\ []) do
    optional_params = %{
      :per_page => :query,
      :page => :query
    }

    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/pulls/#{pull_number}/reviews")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, [%ExOctocat.Model.PullRequestReview{}]}
    ])
  end

  @doc """
  Merge a pull request
  This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \"[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\" and \"[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\" for details.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - pull_number (integer()):
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject123):
  ## Returns

  {:ok, ExOctocat.Model.PullRequestMergeResult.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec pulls_merge(Tesla.Env.client(), String.t(), String.t(), integer(), keyword()) ::
          {:ok, ExOctocat.Model.PullRequestMergeResult.t()}
          | {:ok, ExOctocat.Model.ValidationError.t()}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:ok, ExOctocat.Model.InlineResponse422.t()}
          | {:error, Tesla.Env.t()}
  def pulls_merge(connection, owner, repo, pull_number, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:put)
    |> url("/repos/#{owner}/#{repo}/pulls/#{pull_number}/merge")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.PullRequestMergeResult{}},
      {405, %ExOctocat.Model.InlineResponse422{}},
      {409, %ExOctocat.Model.InlineResponse422{}},
      {422, %ExOctocat.Model.ValidationError{}},
      {403, %ExOctocat.Model.BasicError{}},
      {404, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  Remove requested reviewers from a pull request

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - pull_number (integer()):
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject124):
  ## Returns

  {:ok, ExOctocat.Model.PullRequestSimple.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec pulls_remove_requested_reviewers(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          integer(),
          keyword()
        ) ::
          {:ok, ExOctocat.Model.PullRequestSimple.t()}
          | {:ok, ExOctocat.Model.ValidationError.t()}
          | {:error, Tesla.Env.t()}
  def pulls_remove_requested_reviewers(connection, owner, repo, pull_number, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:delete)
    |> url("/repos/#{owner}/#{repo}/pulls/#{pull_number}/requested_reviewers")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.PullRequestSimple{}},
      {422, %ExOctocat.Model.ValidationError{}}
    ])
  end

  @doc """
  Request reviewers for a pull request
  This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \"[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\" and \"[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\" for details.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - pull_number (integer()):
  - opts (KeywordList): [optional] Optional parameters
    - :body (UNKNOWN_BASE_TYPE):
  ## Returns

  {:ok, ExOctocat.Model.PullRequestSimple.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec pulls_request_reviewers(Tesla.Env.client(), String.t(), String.t(), integer(), keyword()) ::
          {:ok, ExOctocat.Model.PullRequestSimple.t()}
          | {:ok, nil}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:error, Tesla.Env.t()}
  def pulls_request_reviewers(connection, owner, repo, pull_number, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:post)
    |> url("/repos/#{owner}/#{repo}/pulls/#{pull_number}/requested_reviewers")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {201, %ExOctocat.Model.PullRequestSimple{}},
      {422, false},
      {403, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  Submit a review for a pull request

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - pull_number (integer()):
  - review_id (integer()): review_id parameter
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject128):
  ## Returns

  {:ok, ExOctocat.Model.PullRequestReview.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec pulls_submit_review(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok, ExOctocat.Model.ValidationErrorSimple.t()}
          | {:ok, ExOctocat.Model.PullRequestReview.t()}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:error, Tesla.Env.t()}
  def pulls_submit_review(connection, owner, repo, pull_number, review_id, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:post)
    |> url("/repos/#{owner}/#{repo}/pulls/#{pull_number}/reviews/#{review_id}/events")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.PullRequestReview{}},
      {404, %ExOctocat.Model.BasicError{}},
      {422, %ExOctocat.Model.ValidationErrorSimple{}},
      {403, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  Update a pull request
  Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  To open or update a pull request in a public repository, you must have write access to the head or the source branch. For organization-owned repositories, you must be a member of the organization that owns the repository to open or update a pull request.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - pull_number (integer()):
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject120):
  ## Returns

  {:ok, ExOctocat.Model.PullRequest.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec pulls_update(Tesla.Env.client(), String.t(), String.t(), integer(), keyword()) ::
          {:ok, ExOctocat.Model.PullRequest.t()}
          | {:ok, ExOctocat.Model.ValidationError.t()}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:error, Tesla.Env.t()}
  def pulls_update(connection, owner, repo, pull_number, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:patch)
    |> url("/repos/#{owner}/#{repo}/pulls/#{pull_number}")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.PullRequest{}},
      {422, %ExOctocat.Model.ValidationError{}},
      {403, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  Update a pull request branch
  Updates the pull request branch with the latest upstream changes by merging HEAD from the base branch into the pull request branch.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - pull_number (integer()):
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject129):
  ## Returns

  {:ok, ExOctocat.Model.InlineResponse2021.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec pulls_update_branch(Tesla.Env.client(), String.t(), String.t(), integer(), keyword()) ::
          {:ok, ExOctocat.Model.InlineResponse415.t()}
          | {:ok, ExOctocat.Model.ValidationError.t()}
          | {:ok, ExOctocat.Model.InlineResponse2021.t()}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:error, Tesla.Env.t()}
  def pulls_update_branch(connection, owner, repo, pull_number, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:put)
    |> url("/repos/#{owner}/#{repo}/pulls/#{pull_number}/update-branch")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {202, %ExOctocat.Model.InlineResponse2021{}},
      {422, %ExOctocat.Model.ValidationError{}},
      {403, %ExOctocat.Model.BasicError{}},
      {415, %ExOctocat.Model.InlineResponse415{}}
    ])
  end

  @doc """
  Update a review for a pull request
  Update the review summary comment with new text.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - pull_number (integer()):
  - review_id (integer()): review_id parameter
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject126):
  ## Returns

  {:ok, ExOctocat.Model.PullRequestReview.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec pulls_update_review(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok, ExOctocat.Model.ValidationErrorSimple.t()}
          | {:ok, ExOctocat.Model.PullRequestReview.t()}
          | {:error, Tesla.Env.t()}
  def pulls_update_review(connection, owner, repo, pull_number, review_id, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:put)
    |> url("/repos/#{owner}/#{repo}/pulls/#{pull_number}/reviews/#{review_id}")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.PullRequestReview{}},
      {422, %ExOctocat.Model.ValidationErrorSimple{}}
    ])
  end

  @doc """
  Update a review comment for a pull request
  Enables you to edit a review comment.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - comment_id (integer()): comment_id parameter
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject118):
  ## Returns

  {:ok, ExOctocat.Model.PullRequestReviewComment.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec pulls_update_review_comment(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          integer(),
          keyword()
        ) :: {:ok, ExOctocat.Model.PullRequestReviewComment.t()} | {:error, Tesla.Env.t()}
  def pulls_update_review_comment(connection, owner, repo, comment_id, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:patch)
    |> url("/repos/#{owner}/#{repo}/pulls/comments/#{comment_id}")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.PullRequestReviewComment{}}
    ])
  end
end
