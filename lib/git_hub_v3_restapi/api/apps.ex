# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule ExOctocat.Api.Apps do
  @moduledoc """
  API calls for all endpoints tagged `Apps`.
  """

  alias ExOctocat.Connection
  import ExOctocat.RequestBuilder

  @doc """
  Add a repository to an app installation
  Add a single repository to an installation. The authenticated user must have admin access to the repository.  You must use a personal access token (which you can create via the [command line](https://docs.github.com/github/authenticating-to-github/creating-a-personal-access-token) or [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication)) to access this endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - installation_id (integer()): installation_id parameter
  - repository_id (integer()):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec apps_add_repo_to_installation(Tesla.Env.client(), integer(), integer(), keyword()) ::
          {:ok, nil} | {:ok, ExOctocat.Model.BasicError.t()} | {:error, Tesla.Env.t()}
  def apps_add_repo_to_installation(connection, installation_id, repository_id, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/user/installations/#{installation_id}/repositories/#{repository_id}")
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false},
      {403, %ExOctocat.Model.BasicError{}},
      {304, false},
      {404, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  Check an authorization
  **Deprecation Notice:** GitHub will discontinue OAuth endpoints that contain `access_token` in the path parameter. We have introduced new endpoints that allow you to securely manage tokens for OAuth Apps by moving `access_token` to the request body. For more information, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-app-endpoint/).  OAuth applications can use a special API method for checking OAuth token validity without exceeding the normal rate limits for failed login attempts. Authentication works differently with this particular endpoint. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. Invalid tokens will return `404 NOT FOUND`.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - client_id (String.t): The client ID of your GitHub app.
  - access_token (String.t):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Authorization} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec apps_check_authorization(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, ExOctocat.Model.BasicError.t()}
          | {:ok, ExOctocat.Model.Authorization.t()}
          | {:error, Tesla.Env.t()}
  def apps_check_authorization(connection, client_id, access_token, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/applications/#{client_id}/tokens/#{access_token}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.Authorization{}},
      {404, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  Check a token
  OAuth applications can use a special API method for checking OAuth token validity without exceeding the normal rate limits for failed login attempts. Authentication works differently with this particular endpoint. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) to use this endpoint, where the username is the OAuth application `client_id` and the password is its `client_secret`. Invalid tokens will return `404 NOT FOUND`.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - client_id (String.t): The client ID of your GitHub app.
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject3):
  ## Returns

  {:ok, ExOctocat.Model.Authorization.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec apps_check_token(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, ExOctocat.Model.ValidationError.t()}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:ok, ExOctocat.Model.Authorization.t()}
          | {:error, Tesla.Env.t()}
  def apps_check_token(connection, client_id, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:post)
    |> url("/applications/#{client_id}/token")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.Authorization{}},
      {422, %ExOctocat.Model.ValidationError{}},
      {404, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  Create a content attachment
  Creates an attachment under a content reference URL in the body or comment of an issue or pull request. Use the `id` and `repository` `full_name` of the content reference from the [`content_reference` event](https://docs.github.com/webhooks/event-payloads/#content_reference) to create an attachment.  The app must create a content attachment within six hours of the content reference URL being posted. See \"[Using content attachments](https://docs.github.com/apps/using-content-attachments/)\" for details about content attachments.  You must use an [installation access token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t): The owner of the repository. Determined from the `repository` `full_name` of the `content_reference` event.
  - repo (String.t): The name of the repository. Determined from the `repository` `full_name` of the `content_reference` event.
  - content_reference_id (integer()): The `id` of the `content_reference` event.
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject77):
  ## Returns

  {:ok, ExOctocat.Model.ContentReferenceAttachment.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec apps_create_content_attachment(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          integer(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, ExOctocat.Model.ContentReferenceAttachment.t()}
          | {:ok, ExOctocat.Model.InlineResponse415.t()}
          | {:ok, ExOctocat.Model.ValidationError.t()}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:error, Tesla.Env.t()}
  def apps_create_content_attachment(connection, owner, repo, content_reference_id, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:post)
    |> url("/repos/#{owner}/#{repo}/content_references/#{content_reference_id}/attachments")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.ContentReferenceAttachment{}},
      {422, %ExOctocat.Model.ValidationError{}},
      {404, %ExOctocat.Model.BasicError{}},
      {410, %ExOctocat.Model.BasicError{}},
      {415, %ExOctocat.Model.InlineResponse415{}},
      {304, false},
      {403, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  Create a GitHub App from a manifest
  Use this endpoint to complete the handshake necessary when implementing the [GitHub App Manifest flow](https://docs.github.com/apps/building-github-apps/creating-github-apps-from-a-manifest/). When you create a GitHub App with the manifest flow, you receive a temporary `code` used to retrieve the GitHub App's `id`, `pem` (private key), and `webhook_secret`.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - code (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :body (map()):
  ## Returns

  {:ok, Integration} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec apps_create_from_manifest(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, ExOctocat.Model.ValidationErrorSimple.t()}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:ok, ExOctocat.Model.Integration.t()}
          | {:error, Tesla.Env.t()}
  def apps_create_from_manifest(connection, code, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:post)
    |> url("/app-manifests/#{code}/conversions")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {201, %ExOctocat.Model.Integration{}},
      {404, %ExOctocat.Model.BasicError{}},
      {422, %ExOctocat.Model.ValidationErrorSimple{}}
    ])
  end

  @doc """
  Create an installation access token for an app
  Creates an installation access token that enables a GitHub App to make authenticated API requests for the app's installation on an organization or individual account. Installation tokens expire one hour from the time you create them. Using an expired token produces a status code of `401 - Unauthorized`, and requires creating a new installation token. By default the installation token has access to all repositories that the installation can access. To restrict the access to specific repositories, you can provide the `repository_ids` when creating the token. When you omit `repository_ids`, the response does not contain the `repositories` key.  You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - installation_id (integer()): installation_id parameter
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject1):
  ## Returns

  {:ok, ExOctocat.Model.InstallationToken.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec apps_create_installation_access_token(Tesla.Env.client(), integer(), keyword()) ::
          {:ok, ExOctocat.Model.InstallationToken.t()}
          | {:ok, ExOctocat.Model.InlineResponse415.t()}
          | {:ok, ExOctocat.Model.ValidationError.t()}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:error, Tesla.Env.t()}
  def apps_create_installation_access_token(connection, installation_id, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:post)
    |> url("/app/installations/#{installation_id}/access_tokens")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {201, %ExOctocat.Model.InstallationToken{}},
      {403, %ExOctocat.Model.BasicError{}},
      {415, %ExOctocat.Model.InlineResponse415{}},
      {401, %ExOctocat.Model.BasicError{}},
      {404, %ExOctocat.Model.BasicError{}},
      {422, %ExOctocat.Model.ValidationError{}}
    ])
  end

  @doc """
  Delete an app authorization
  OAuth application owners can revoke a grant for their OAuth application and a specific user. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. You must also provide a valid OAuth `access_token` as an input parameter and the grant for the token's owner will be deleted. Deleting an OAuth application's grant will also delete all OAuth tokens associated with the application for the user. Once deleted, the application will have no access to the user's account and will no longer be listed on [the application authorizations settings screen within GitHub](https://github.com/settings/applications#authorized).

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - client_id (String.t): The client ID of your GitHub app.
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject2):
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec apps_delete_authorization(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, nil} | {:ok, ExOctocat.Model.ValidationError.t()} | {:error, Tesla.Env.t()}
  def apps_delete_authorization(connection, client_id, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:delete)
    |> url("/applications/#{client_id}/grant")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false},
      {422, %ExOctocat.Model.ValidationError{}}
    ])
  end

  @doc """
  Delete an installation for the authenticated app
  Uninstalls a GitHub App on a user, organization, or business account. If you prefer to temporarily suspend an app's access to your account's resources, then we recommend the \"[Suspend an app installation](https://docs.github.com/rest/reference/apps/#suspend-an-app-installation)\" endpoint.  You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - installation_id (integer()): installation_id parameter
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec apps_delete_installation(Tesla.Env.client(), integer(), keyword()) ::
          {:ok, nil} | {:ok, ExOctocat.Model.BasicError.t()} | {:error, Tesla.Env.t()}
  def apps_delete_installation(connection, installation_id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/app/installations/#{installation_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false},
      {404, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  Delete an app token
  OAuth application owners can revoke a single token for an OAuth application. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - client_id (String.t): The client ID of your GitHub app.
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject4):
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec apps_delete_token(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, nil} | {:ok, ExOctocat.Model.ValidationError.t()} | {:error, Tesla.Env.t()}
  def apps_delete_token(connection, client_id, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:delete)
    |> url("/applications/#{client_id}/token")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false},
      {422, %ExOctocat.Model.ValidationError{}}
    ])
  end

  @doc """
  Get the authenticated app
  Returns the GitHub App associated with the authentication credentials used. To see how many app installations are associated with this GitHub App, see the `installations_count` in the response. For more details about your app's installations, see the \"[List installations for the authenticated app](https://docs.github.com/rest/reference/apps#list-installations-for-the-authenticated-app)\" endpoint.  You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, ExOctocat.Model.Integration.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec apps_get_authenticated(Tesla.Env.client(), keyword()) ::
          {:ok, ExOctocat.Model.Integration.t()} | {:error, Tesla.Env.t()}
  def apps_get_authenticated(connection, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/app")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.Integration{}}
    ])
  end

  @doc """
  Get an app
  **Note**: The `:app_slug` is just the URL-friendly name of your GitHub App. You can find this on the settings page for your GitHub App (e.g., `https://github.com/settings/apps/:app_slug`).  If the GitHub App you specify is public, you can access this endpoint without authenticating. If the GitHub App you specify is private, you must authenticate with a [personal access token](https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line/) or an [installation access token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - app_slug (String.t):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, ExOctocat.Model.Integration.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec apps_get_by_slug(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, ExOctocat.Model.InlineResponse415.t()}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:ok, ExOctocat.Model.Integration.t()}
          | {:error, Tesla.Env.t()}
  def apps_get_by_slug(connection, app_slug, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/apps/#{app_slug}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.Integration{}},
      {403, %ExOctocat.Model.BasicError{}},
      {404, %ExOctocat.Model.BasicError{}},
      {415, %ExOctocat.Model.InlineResponse415{}}
    ])
  end

  @doc """
  Get an installation for the authenticated app
  Enables an authenticated GitHub App to find an installation's information using the installation id. The installation's account type (`target_type`) will be either an organization or a user account, depending which account the repository belongs to.  You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - installation_id (integer()): installation_id parameter
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, ExOctocat.Model.Installation.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec apps_get_installation(Tesla.Env.client(), integer(), keyword()) ::
          {:ok, ExOctocat.Model.InlineResponse415.t()}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:ok, ExOctocat.Model.Installation.t()}
          | {:error, Tesla.Env.t()}
  def apps_get_installation(connection, installation_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/app/installations/#{installation_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.Installation{}},
      {404, %ExOctocat.Model.BasicError{}},
      {415, %ExOctocat.Model.InlineResponse415{}}
    ])
  end

  @doc """
  Get an organization installation for the authenticated app
  Enables an authenticated GitHub App to find the organization's installation information.  You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, ExOctocat.Model.Installation.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec apps_get_org_installation(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, ExOctocat.Model.Installation.t()} | {:error, Tesla.Env.t()}
  def apps_get_org_installation(connection, org, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/orgs/#{org}/installation")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.Installation{}}
    ])
  end

  @doc """
  Get a repository installation for the authenticated app
  Enables an authenticated GitHub App to find the repository's installation information. The installation's account type will be either an organization or a user account, depending which account the repository belongs to.  You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, ExOctocat.Model.Installation.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec apps_get_repo_installation(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, ExOctocat.Model.BasicError.t()}
          | {:ok, ExOctocat.Model.Installation.t()}
          | {:error, Tesla.Env.t()}
  def apps_get_repo_installation(connection, owner, repo, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/installation")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.Installation{}},
      {301, %ExOctocat.Model.BasicError{}},
      {404, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  Get a subscription plan for an account
  Shows whether the user or organization account actively subscribes to a plan listed by the authenticated GitHub App. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.  GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - account_id (integer()): account_id parameter
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, ExOctocat.Model.MarketplacePurchase.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec apps_get_subscription_plan_for_account(Tesla.Env.client(), integer(), keyword()) ::
          {:ok, ExOctocat.Model.MarketplacePurchase.t()}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:error, Tesla.Env.t()}
  def apps_get_subscription_plan_for_account(connection, account_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/marketplace_listing/accounts/#{account_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.MarketplacePurchase{}},
      {404, %ExOctocat.Model.BasicError{}},
      {401, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  Get a subscription plan for an account (stubbed)
  Shows whether the user or organization account actively subscribes to a plan listed by the authenticated GitHub App. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.  GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - account_id (integer()): account_id parameter
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, ExOctocat.Model.MarketplacePurchase.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec apps_get_subscription_plan_for_account_stubbed(Tesla.Env.client(), integer(), keyword()) ::
          {:ok, ExOctocat.Model.MarketplacePurchase.t()}
          | {:ok, nil}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:error, Tesla.Env.t()}
  def apps_get_subscription_plan_for_account_stubbed(connection, account_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/marketplace_listing/stubbed/accounts/#{account_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.MarketplacePurchase{}},
      {404, false},
      {401, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  Get a user installation for the authenticated app
  Enables an authenticated GitHub App to find the user’s installation information.  You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - username (String.t):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, ExOctocat.Model.Installation.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec apps_get_user_installation(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, ExOctocat.Model.Installation.t()} | {:error, Tesla.Env.t()}
  def apps_get_user_installation(connection, username, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/users/#{username}/installation")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.Installation{}}
    ])
  end

  @doc """
  Get a webhook configuration for an app
  Returns the webhook configuration for a GitHub App. For more information about configuring a webhook for your app, see \"[Creating a GitHub App](/developers/apps/creating-a-github-app).\"  You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, ExOctocat.Model.WebhookConfig.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec apps_get_webhook_config_for_app(Tesla.Env.client(), keyword()) ::
          {:ok, ExOctocat.Model.WebhookConfig.t()} | {:error, Tesla.Env.t()}
  def apps_get_webhook_config_for_app(connection, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/app/hook/config")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.WebhookConfig{}}
    ])
  end

  @doc """
  Get a delivery for an app webhook
  Returns a delivery for the webhook configured for a GitHub App.  You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - delivery_id (integer()):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, ExOctocat.Model.HookDelivery.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec apps_get_webhook_delivery(Tesla.Env.client(), integer(), keyword()) ::
          {:ok, ExOctocat.Model.HookDelivery.t()}
          | {:ok, ExOctocat.Model.ValidationError.t()}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:error, Tesla.Env.t()}
  def apps_get_webhook_delivery(connection, delivery_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/app/hook/deliveries/#{delivery_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.HookDelivery{}},
      {400, %ExOctocat.Model.BasicError{}},
      {422, %ExOctocat.Model.ValidationError{}}
    ])
  end

  @doc """
  List accounts for a plan
  Returns user and organization accounts associated with the specified plan, including free plans. For per-seat pricing, you see the list of accounts that have purchased the plan, including the number of seats purchased. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.  GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - plan_id (integer()): plan_id parameter
  - opts (KeywordList): [optional] Optional parameters
    - :sort (String.t): One of `created` (when the repository was starred) or `updated` (when it was last pushed to).
    - :direction (String.t): To return the oldest accounts first, set to `asc`. Can be one of `asc` or `desc`. Ignored without the `sort` parameter.
    - :per_page (integer()): Results per page (max 100)
    - :page (integer()): Page number of the results to fetch.
  ## Returns

  {:ok, [%MarketplacePurchase{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec apps_list_accounts_for_plan(Tesla.Env.client(), integer(), keyword()) ::
          {:ok, ExOctocat.Model.ValidationError.t()}
          | {:ok, list(ExOctocat.Model.MarketplacePurchase.t())}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:error, Tesla.Env.t()}
  def apps_list_accounts_for_plan(connection, plan_id, opts \\ []) do
    optional_params = %{
      :sort => :query,
      :direction => :query,
      :per_page => :query,
      :page => :query
    }

    %{}
    |> method(:get)
    |> url("/marketplace_listing/plans/#{plan_id}/accounts")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, [%ExOctocat.Model.MarketplacePurchase{}]},
      {404, %ExOctocat.Model.BasicError{}},
      {422, %ExOctocat.Model.ValidationError{}},
      {401, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  List accounts for a plan (stubbed)
  Returns repository and organization accounts associated with the specified plan, including free plans. For per-seat pricing, you see the list of accounts that have purchased the plan, including the number of seats purchased. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.  GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - plan_id (integer()): plan_id parameter
  - opts (KeywordList): [optional] Optional parameters
    - :sort (String.t): One of `created` (when the repository was starred) or `updated` (when it was last pushed to).
    - :direction (String.t): To return the oldest accounts first, set to `asc`. Can be one of `asc` or `desc`. Ignored without the `sort` parameter.
    - :per_page (integer()): Results per page (max 100)
    - :page (integer()): Page number of the results to fetch.
  ## Returns

  {:ok, [%MarketplacePurchase{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec apps_list_accounts_for_plan_stubbed(Tesla.Env.client(), integer(), keyword()) ::
          {:ok, list(ExOctocat.Model.MarketplacePurchase.t())}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:error, Tesla.Env.t()}
  def apps_list_accounts_for_plan_stubbed(connection, plan_id, opts \\ []) do
    optional_params = %{
      :sort => :query,
      :direction => :query,
      :per_page => :query,
      :page => :query
    }

    %{}
    |> method(:get)
    |> url("/marketplace_listing/stubbed/plans/#{plan_id}/accounts")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, [%ExOctocat.Model.MarketplacePurchase{}]},
      {401, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  List repositories accessible to the user access token
  List repositories that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access for an installation.  The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.  You must use a [user-to-server OAuth access token](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint.  The access the user has to each repository is included in the hash under the `permissions` key.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - installation_id (integer()): installation_id parameter
  - opts (KeywordList): [optional] Optional parameters
    - :per_page (integer()): Results per page (max 100)
    - :page (integer()): Page number of the results to fetch.
  ## Returns

  {:ok, ExOctocat.Model.InlineResponse20028.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec apps_list_installation_repos_for_authenticated_user(
          Tesla.Env.client(),
          integer(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:ok, ExOctocat.Model.InlineResponse20028.t()}
          | {:error, Tesla.Env.t()}
  def apps_list_installation_repos_for_authenticated_user(connection, installation_id, opts \\ []) do
    optional_params = %{
      :per_page => :query,
      :page => :query
    }

    %{}
    |> method(:get)
    |> url("/user/installations/#{installation_id}/repositories")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.InlineResponse20028{}},
      {404, %ExOctocat.Model.BasicError{}},
      {403, %ExOctocat.Model.BasicError{}},
      {304, false}
    ])
  end

  @doc """
  List installations for the authenticated app
  You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.  The permissions the installation has are included under the `permissions` key.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :per_page (integer()): Results per page (max 100)
    - :page (integer()): Page number of the results to fetch.
    - :since (DateTime.t): Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
    - :outdated (String.t):
  ## Returns

  {:ok, [%Installation{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec apps_list_installations(Tesla.Env.client(), keyword()) ::
          {:ok, list(ExOctocat.Model.Installation.t())} | {:error, Tesla.Env.t()}
  def apps_list_installations(connection, opts \\ []) do
    optional_params = %{
      :per_page => :query,
      :page => :query,
      :since => :query,
      :outdated => :query
    }

    %{}
    |> method(:get)
    |> url("/app/installations")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, [%ExOctocat.Model.Installation{}]}
    ])
  end

  @doc """
  List app installations accessible to the user access token
  Lists installations of your GitHub App that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access.  You must use a [user-to-server OAuth access token](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint.  The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.  You can find the permissions for the installation under the `permissions` key.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :per_page (integer()): Results per page (max 100)
    - :page (integer()): Page number of the results to fetch.
  ## Returns

  {:ok, ExOctocat.Model.InlineResponse20012.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec apps_list_installations_for_authenticated_user(Tesla.Env.client(), keyword()) ::
          {:ok, nil}
          | {:ok, ExOctocat.Model.InlineResponse415.t()}
          | {:ok, ExOctocat.Model.InlineResponse20012.t()}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:error, Tesla.Env.t()}
  def apps_list_installations_for_authenticated_user(connection, opts \\ []) do
    optional_params = %{
      :per_page => :query,
      :page => :query
    }

    %{}
    |> method(:get)
    |> url("/user/installations")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.InlineResponse20012{}},
      {304, false},
      {403, %ExOctocat.Model.BasicError{}},
      {401, %ExOctocat.Model.BasicError{}},
      {415, %ExOctocat.Model.InlineResponse415{}}
    ])
  end

  @doc """
  List plans
  Lists all plans that are part of your GitHub Marketplace listing.  GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :per_page (integer()): Results per page (max 100)
    - :page (integer()): Page number of the results to fetch.
  ## Returns

  {:ok, [%MarketplaceListingPlan{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec apps_list_plans(Tesla.Env.client(), keyword()) ::
          {:ok, ExOctocat.Model.BasicError.t()}
          | {:ok, list(ExOctocat.Model.MarketplaceListingPlan.t())}
          | {:error, Tesla.Env.t()}
  def apps_list_plans(connection, opts \\ []) do
    optional_params = %{
      :per_page => :query,
      :page => :query
    }

    %{}
    |> method(:get)
    |> url("/marketplace_listing/plans")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, [%ExOctocat.Model.MarketplaceListingPlan{}]},
      {404, %ExOctocat.Model.BasicError{}},
      {401, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  List plans (stubbed)
  Lists all plans that are part of your GitHub Marketplace listing.  GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :per_page (integer()): Results per page (max 100)
    - :page (integer()): Page number of the results to fetch.
  ## Returns

  {:ok, [%MarketplaceListingPlan{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec apps_list_plans_stubbed(Tesla.Env.client(), keyword()) ::
          {:ok, ExOctocat.Model.BasicError.t()}
          | {:ok, list(ExOctocat.Model.MarketplaceListingPlan.t())}
          | {:error, Tesla.Env.t()}
  def apps_list_plans_stubbed(connection, opts \\ []) do
    optional_params = %{
      :per_page => :query,
      :page => :query
    }

    %{}
    |> method(:get)
    |> url("/marketplace_listing/stubbed/plans")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, [%ExOctocat.Model.MarketplaceListingPlan{}]},
      {401, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  List repositories accessible to the app installation
  List repositories that an app installation can access.  You must use an [installation access token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :per_page (integer()): Results per page (max 100)
    - :page (integer()): Page number of the results to fetch.
  ## Returns

  {:ok, ExOctocat.Model.InlineResponse2005.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec apps_list_repos_accessible_to_installation(Tesla.Env.client(), keyword()) ::
          {:ok, ExOctocat.Model.InlineResponse2005.t()}
          | {:ok, nil}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:error, Tesla.Env.t()}
  def apps_list_repos_accessible_to_installation(connection, opts \\ []) do
    optional_params = %{
      :per_page => :query,
      :page => :query
    }

    %{}
    |> method(:get)
    |> url("/installation/repositories")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.InlineResponse2005{}},
      {403, %ExOctocat.Model.BasicError{}},
      {304, false},
      {401, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  List subscriptions for the authenticated user
  Lists the active subscriptions for the authenticated user. You must use a [user-to-server OAuth access token](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint. . OAuth Apps must authenticate using an [OAuth token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/).

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :per_page (integer()): Results per page (max 100)
    - :page (integer()): Page number of the results to fetch.
  ## Returns

  {:ok, [%UserMarketplacePurchase{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec apps_list_subscriptions_for_authenticated_user(Tesla.Env.client(), keyword()) ::
          {:ok, nil}
          | {:ok, list(ExOctocat.Model.UserMarketplacePurchase.t())}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:error, Tesla.Env.t()}
  def apps_list_subscriptions_for_authenticated_user(connection, opts \\ []) do
    optional_params = %{
      :per_page => :query,
      :page => :query
    }

    %{}
    |> method(:get)
    |> url("/user/marketplace_purchases")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, [%ExOctocat.Model.UserMarketplacePurchase{}]},
      {304, false},
      {401, %ExOctocat.Model.BasicError{}},
      {404, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  List subscriptions for the authenticated user (stubbed)
  Lists the active subscriptions for the authenticated user. You must use a [user-to-server OAuth access token](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint. . OAuth Apps must authenticate using an [OAuth token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/).

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :per_page (integer()): Results per page (max 100)
    - :page (integer()): Page number of the results to fetch.
  ## Returns

  {:ok, [%UserMarketplacePurchase{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec apps_list_subscriptions_for_authenticated_user_stubbed(Tesla.Env.client(), keyword()) ::
          {:ok, nil}
          | {:ok, list(ExOctocat.Model.UserMarketplacePurchase.t())}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:error, Tesla.Env.t()}
  def apps_list_subscriptions_for_authenticated_user_stubbed(connection, opts \\ []) do
    optional_params = %{
      :per_page => :query,
      :page => :query
    }

    %{}
    |> method(:get)
    |> url("/user/marketplace_purchases/stubbed")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, [%ExOctocat.Model.UserMarketplacePurchase{}]},
      {304, false},
      {401, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  List deliveries for an app webhook
  Returns a list of webhook deliveries for the webhook configured for a GitHub App.  You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :per_page (integer()): Results per page (max 100)
    - :cursor (String.t): Used for pagination: the starting delivery from which the page of deliveries is fetched. Refer to the `link` header for the next and previous page cursors.
  ## Returns

  {:ok, [%HookDeliveryItem{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec apps_list_webhook_deliveries(Tesla.Env.client(), keyword()) ::
          {:ok, ExOctocat.Model.ValidationError.t()}
          | {:ok, list(ExOctocat.Model.HookDeliveryItem.t())}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:error, Tesla.Env.t()}
  def apps_list_webhook_deliveries(connection, opts \\ []) do
    optional_params = %{
      :per_page => :query,
      :cursor => :query
    }

    %{}
    |> method(:get)
    |> url("/app/hook/deliveries")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, [%ExOctocat.Model.HookDeliveryItem{}]},
      {400, %ExOctocat.Model.BasicError{}},
      {422, %ExOctocat.Model.ValidationError{}}
    ])
  end

  @doc """
  Redeliver a delivery for an app webhook
  Redeliver a delivery for the webhook configured for a GitHub App.  You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - delivery_id (integer()):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, map()} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec apps_redeliver_webhook_delivery(Tesla.Env.client(), integer(), keyword()) ::
          {:ok, Map.t()}
          | {:ok, ExOctocat.Model.ValidationError.t()}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:error, Tesla.Env.t()}
  def apps_redeliver_webhook_delivery(connection, delivery_id, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/app/hook/deliveries/#{delivery_id}/attempts")
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {202, false},
      {400, %ExOctocat.Model.BasicError{}},
      {422, %ExOctocat.Model.ValidationError{}}
    ])
  end

  @doc """
  Remove a repository from an app installation
  Remove a single repository from an installation. The authenticated user must have admin access to the repository.  You must use a personal access token (which you can create via the [command line](https://docs.github.com/github/authenticating-to-github/creating-a-personal-access-token) or [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication)) to access this endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - installation_id (integer()): installation_id parameter
  - repository_id (integer()):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec apps_remove_repo_from_installation(Tesla.Env.client(), integer(), integer(), keyword()) ::
          {:ok, nil} | {:ok, ExOctocat.Model.BasicError.t()} | {:error, Tesla.Env.t()}
  def apps_remove_repo_from_installation(connection, installation_id, repository_id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/user/installations/#{installation_id}/repositories/#{repository_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false},
      {403, %ExOctocat.Model.BasicError{}},
      {304, false},
      {404, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  Reset an authorization
  **Deprecation Notice:** GitHub will discontinue OAuth endpoints that contain `access_token` in the path parameter. We have introduced new endpoints that allow you to securely manage tokens for OAuth Apps by moving `access_token` to the request body. For more information, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-app-endpoint/).  OAuth applications can use this API method to reset a valid OAuth token without end-user involvement. Applications must save the \"token\" property in the response because changes take effect immediately. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. Invalid tokens will return `404 NOT FOUND`.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - client_id (String.t): The client ID of your GitHub app.
  - access_token (String.t):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, ExOctocat.Model.Authorization.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec apps_reset_authorization(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, ExOctocat.Model.Authorization.t()} | {:error, Tesla.Env.t()}
  def apps_reset_authorization(connection, client_id, access_token, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/applications/#{client_id}/tokens/#{access_token}")
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.Authorization{}}
    ])
  end

  @doc """
  Reset a token
  OAuth applications can use this API method to reset a valid OAuth token without end-user involvement. Applications must save the \"token\" property in the response because changes take effect immediately. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. Invalid tokens will return `404 NOT FOUND`.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - client_id (String.t): The client ID of your GitHub app.
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject5):
  ## Returns

  {:ok, ExOctocat.Model.Authorization.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec apps_reset_token(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, ExOctocat.Model.ValidationError.t()}
          | {:ok, ExOctocat.Model.Authorization.t()}
          | {:error, Tesla.Env.t()}
  def apps_reset_token(connection, client_id, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:patch)
    |> url("/applications/#{client_id}/token")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.Authorization{}},
      {422, %ExOctocat.Model.ValidationError{}}
    ])
  end

  @doc """
  Revoke an authorization for an application
  **Deprecation Notice:** GitHub will discontinue OAuth endpoints that contain `access_token` in the path parameter. We have introduced new endpoints that allow you to securely manage tokens for OAuth Apps by moving `access_token` to the request body. For more information, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-app-endpoint/).  OAuth application owners can revoke a single token for an OAuth application. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - client_id (String.t): The client ID of your GitHub app.
  - access_token (String.t):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec apps_revoke_authorization_for_application(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, nil} | {:error, Tesla.Env.t()}
  def apps_revoke_authorization_for_application(connection, client_id, access_token, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/applications/#{client_id}/tokens/#{access_token}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false}
    ])
  end

  @doc """
  Revoke a grant for an application
  **Deprecation Notice:** GitHub will discontinue OAuth endpoints that contain `access_token` in the path parameter. We have introduced new endpoints that allow you to securely manage tokens for OAuth Apps by moving `access_token` to the request body. For more information, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-app-endpoint/).  OAuth application owners can revoke a grant for their OAuth application and a specific user. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. You must also provide a valid token as `:access_token` and the grant for the token's owner will be deleted.  Deleting an OAuth application's grant will also delete all OAuth tokens associated with the application for the user. Once deleted, the application will have no access to the user's account and will no longer be listed on [the Applications settings page under \"Authorized OAuth Apps\" on GitHub](https://github.com/settings/applications#authorized).

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - client_id (String.t): The client ID of your GitHub app.
  - access_token (String.t):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec apps_revoke_grant_for_application(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, nil} | {:error, Tesla.Env.t()}
  def apps_revoke_grant_for_application(connection, client_id, access_token, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/applications/#{client_id}/grants/#{access_token}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false}
    ])
  end

  @doc """
  Revoke an installation access token
  Revokes the installation token you're using to authenticate as an installation and access this endpoint.  Once an installation token is revoked, the token is invalidated and cannot be used. Other endpoints that require the revoked installation token must have a new installation token to work. You can create a new token using the \"[Create an installation access token for an app](https://docs.github.com/rest/reference/apps#create-an-installation-access-token-for-an-app)\" endpoint.  You must use an [installation access token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec apps_revoke_installation_access_token(Tesla.Env.client(), keyword()) ::
          {:ok, nil} | {:error, Tesla.Env.t()}
  def apps_revoke_installation_access_token(connection, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/installation/token")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false}
    ])
  end

  @doc """
  Create a scoped access token
  Use a non-scoped user-to-server OAuth access token to create a repository scoped and/or permission scoped user-to-server OAuth access token. You can specify which repositories the token can access and which permissions are granted to the token. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. Invalid tokens will return `404 NOT FOUND`.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - client_id (String.t): The client ID of your GitHub app.
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject6):
  ## Returns

  {:ok, ExOctocat.Model.Authorization.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec apps_scope_token(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, ExOctocat.Model.ValidationError.t()}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:ok, ExOctocat.Model.Authorization.t()}
          | {:error, Tesla.Env.t()}
  def apps_scope_token(connection, client_id, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:post)
    |> url("/applications/#{client_id}/token/scoped")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.Authorization{}},
      {401, %ExOctocat.Model.BasicError{}},
      {403, %ExOctocat.Model.BasicError{}},
      {404, %ExOctocat.Model.BasicError{}},
      {422, %ExOctocat.Model.ValidationError{}}
    ])
  end

  @doc """
  Suspend an app installation
  Suspends a GitHub App on a user, organization, or business account, which blocks the app from accessing the account's resources. When a GitHub App is suspended, the app's access to the GitHub API or webhook events is blocked for that account.  You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - installation_id (integer()): installation_id parameter
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec apps_suspend_installation(Tesla.Env.client(), integer(), keyword()) ::
          {:ok, nil} | {:ok, ExOctocat.Model.BasicError.t()} | {:error, Tesla.Env.t()}
  def apps_suspend_installation(connection, installation_id, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/app/installations/#{installation_id}/suspended")
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false},
      {404, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  Unsuspend an app installation
  Removes a GitHub App installation suspension.  You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - installation_id (integer()): installation_id parameter
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec apps_unsuspend_installation(Tesla.Env.client(), integer(), keyword()) ::
          {:ok, nil} | {:ok, ExOctocat.Model.BasicError.t()} | {:error, Tesla.Env.t()}
  def apps_unsuspend_installation(connection, installation_id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/app/installations/#{installation_id}/suspended")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false},
      {404, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  Update a webhook configuration for an app
  Updates the webhook configuration for a GitHub App. For more information about configuring a webhook for your app, see \"[Creating a GitHub App](/developers/apps/creating-a-github-app).\"  You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject):
  ## Returns

  {:ok, ExOctocat.Model.WebhookConfig.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec apps_update_webhook_config_for_app(Tesla.Env.client(), keyword()) ::
          {:ok, ExOctocat.Model.WebhookConfig.t()} | {:error, Tesla.Env.t()}
  def apps_update_webhook_config_for_app(connection, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:patch)
    |> url("/app/hook/config")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.WebhookConfig{}}
    ])
  end
end
