# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule ExOctocat.Api.Repos do
  @moduledoc """
  API calls for all endpoints tagged `Repos`.
  """

  alias ExOctocat.Connection
  import ExOctocat.RequestBuilder

  @doc """
  Accept a repository invitation

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - invitation_id (integer()): invitation_id parameter
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_accept_invitation(Tesla.Env.client(), integer(), keyword()) ::
          {:ok, nil} | {:ok, ExOctocat.Model.BasicError.t()} | {:error, Tesla.Env.t()}
  def repos_accept_invitation(connection, invitation_id, _opts \\ []) do
    %{}
    |> method(:patch)
    |> url("/user/repository_invitations/#{invitation_id}")
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false},
      {403, %ExOctocat.Model.BasicError{}},
      {409, %ExOctocat.Model.BasicError{}},
      {404, %ExOctocat.Model.BasicError{}},
      {304, false}
    ])
  end

  @doc """
  Add app access restrictions
  Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Grants the specified apps push access for this branch. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.  | Type    | Description                                                                                                                                                | | ------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- | | `array` | The GitHub Apps that have push access to this branch. Use the app's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - branch (String.t): The name of the branch.
  - opts (KeywordList): [optional] Optional parameters
    - :body (UNKNOWN_BASE_TYPE):
  ## Returns

  {:ok, [%Integration{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_add_app_access_restrictions(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, ExOctocat.Model.ValidationError.t()}
          | {:ok, list(ExOctocat.Model.Integration.t())}
          | {:error, Tesla.Env.t()}
  def repos_add_app_access_restrictions(connection, owner, repo, branch, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:post)
    |> url("/repos/#{owner}/#{repo}/branches/#{branch}/protection/restrictions/apps")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, [%ExOctocat.Model.Integration{}]},
      {422, %ExOctocat.Model.ValidationError{}}
    ])
  end

  @doc """
  Add a repository collaborator
  This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \"[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\" and \"[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\" for details.  For more information the permission levels, see \"[Repository permission levels for an organization](https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization)\".  Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs).\"  The invitee will receive a notification that they have been invited to the repository, which they must accept or decline. They may do this via the notifications page, the email they receive, or by using the [repository invitations API endpoints](https://docs.github.com/rest/reference/repos#invitations).  **Rate limits**  You are limited to sending 50 invitations to a repository per 24 hour period. Note there is no limit if you are inviting organization members to an organization repository.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - username (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject73):
  ## Returns

  {:ok, ExOctocat.Model.RepositoryInvitation.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_add_collaborator(Tesla.Env.client(), String.t(), String.t(), String.t(), keyword()) ::
          {:ok, nil}
          | {:ok, ExOctocat.Model.ValidationError.t()}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:ok, ExOctocat.Model.RepositoryInvitation.t()}
          | {:error, Tesla.Env.t()}
  def repos_add_collaborator(connection, owner, repo, username, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:put)
    |> url("/repos/#{owner}/#{repo}/collaborators/#{username}")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {201, %ExOctocat.Model.RepositoryInvitation{}},
      {204, false},
      {422, %ExOctocat.Model.ValidationError{}},
      {403, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  Add status check contexts
  Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - branch (String.t): The name of the branch.
  - opts (KeywordList): [optional] Optional parameters
    - :body (UNKNOWN_BASE_TYPE):
  ## Returns

  {:ok, [%String{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_add_status_check_contexts(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, list(String.t())}
          | {:ok, ExOctocat.Model.ValidationError.t()}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:error, Tesla.Env.t()}
  def repos_add_status_check_contexts(connection, owner, repo, branch, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:post)
    |> url(
      "/repos/#{owner}/#{repo}/branches/#{branch}/protection/required_status_checks/contexts"
    )
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, []},
      {422, %ExOctocat.Model.ValidationError{}},
      {403, %ExOctocat.Model.BasicError{}},
      {404, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  Add team access restrictions
  Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Grants the specified teams push access for this branch. You can also give push access to child teams.  | Type    | Description                                                                                                                                | | ------- | ------------------------------------------------------------------------------------------------------------------------------------------ | | `array` | The teams that can have push access. Use the team's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - branch (String.t): The name of the branch.
  - opts (KeywordList): [optional] Optional parameters
    - :body (UNKNOWN_BASE_TYPE):
  ## Returns

  {:ok, [%Team{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_add_team_access_restrictions(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, list(ExOctocat.Model.Team.t())}
          | {:ok, ExOctocat.Model.ValidationError.t()}
          | {:error, Tesla.Env.t()}
  def repos_add_team_access_restrictions(connection, owner, repo, branch, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:post)
    |> url("/repos/#{owner}/#{repo}/branches/#{branch}/protection/restrictions/teams")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, [%ExOctocat.Model.Team{}]},
      {422, %ExOctocat.Model.ValidationError{}}
    ])
  end

  @doc """
  Add user access restrictions
  Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Grants the specified people push access for this branch.  | Type    | Description                                                                                                                   | | ------- | ----------------------------------------------------------------------------------------------------------------------------- | | `array` | Usernames for people who can have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - branch (String.t): The name of the branch.
  - opts (KeywordList): [optional] Optional parameters
    - :body (UNKNOWN_BASE_TYPE):
  ## Returns

  {:ok, [%SimpleUser{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_add_user_access_restrictions(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, ExOctocat.Model.ValidationError.t()}
          | {:ok, list(ExOctocat.Model.SimpleUser.t())}
          | {:error, Tesla.Env.t()}
  def repos_add_user_access_restrictions(connection, owner, repo, branch, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:post)
    |> url("/repos/#{owner}/#{repo}/branches/#{branch}/protection/restrictions/users")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, [%ExOctocat.Model.SimpleUser{}]},
      {422, %ExOctocat.Model.ValidationError{}}
    ])
  end

  @doc """
  Check if a user is a repository collaborator
  For organization-owned repositories, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners.  Team members will include the members of child teams.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - username (String.t):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_check_collaborator(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, nil} | {:error, Tesla.Env.t()}
  def repos_check_collaborator(connection, owner, repo, username, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/collaborators/#{username}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false},
      {404, false}
    ])
  end

  @doc """
  Check if vulnerability alerts are enabled for a repository
  Shows whether dependency alerts are enabled or disabled for a repository. The authenticated user must have admin access to the repository. For more information, see \"[About security alerts for vulnerable dependencies](https://help.github.com/en/articles/about-security-alerts-for-vulnerable-dependencies)\".

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_check_vulnerability_alerts(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, nil} | {:error, Tesla.Env.t()}
  def repos_check_vulnerability_alerts(connection, owner, repo, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/vulnerability-alerts")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false},
      {404, false}
    ])
  end

  @doc """
  Compare two commits
  The `basehead` param is comprised of two parts: `base` and `head`. Both must be branch names in `repo`. To compare branches across other repositories in the same network as `repo`, use the format `<USERNAME>:branch`.  The response from the API is equivalent to running the `git log base..head` command; however, commits are returned in chronological order. Pass the appropriate [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.  The response also includes details on the files that were changed between the two commits. This includes the status of the change (for example, if a file was added, removed, modified, or renamed), and details of the change itself. For example, files with a `renamed` status have a `previous_filename` field showing the previous filename of the file, and files with a `modified` status have a `patch` field showing the changes made to the file.  **Working with large comparisons**  To process a response with a large number of commits, you can use (`per_page` or `page`) to paginate the results. When using paging, the list of changed files is only returned with page 1, but includes all changed files for the entire comparison. For more information on working with pagination, see \"[Traversing with pagination](/rest/guides/traversing-with-pagination).\"  When calling this API without any paging parameters (`per_page` or `page`), the returned list is limited to 250 commits and the last commit in the list is the most recent of the entire comparison. When a paging parameter is specified, the first commit in the returned list of each page is the earliest.  **Signature verification object**  The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:  | Name | Type | Description | | ---- | ---- | ----------- | | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. | | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. | | `signature` | `string` | The signature that was extracted from the commit. | | `payload` | `string` | The value that was signed. |  These are the possible values for `reason` in the `verification` object:  | Value | Description | | ----- | ----------- | | `expired_key` | The key that made the signature is expired. | | `not_signing_key` | The \"signing\" flag is not among the usage flags in the GPG key that made the signature. | | `gpgverify_error` | There was an error communicating with the signature verification service. | | `gpgverify_unavailable` | The signature verification service is currently unavailable. | | `unsigned` | The object does not include a signature. | | `unknown_signature_type` | A non-PGP signature was found in the commit. | | `no_user` | No user was associated with the `committer` email address in the commit. | | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. | | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. | | `unknown_key` | The key that made the signature has not been registered with any user's account. | | `malformed_signature` | There was an error parsing the signature. | | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. | | `valid` | None of the above errors applied, so the signature is considered to be verified. |

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - basehead (String.t): The base branch and head branch to compare. This parameter expects the format `{base}...{head}`.
  - opts (KeywordList): [optional] Optional parameters
    - :page (integer()): Page number of the results to fetch.
    - :per_page (integer()): Results per page (max 100)
  ## Returns

  {:ok, ExOctocat.Model.CommitComparison.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_compare_commits(Tesla.Env.client(), String.t(), String.t(), String.t(), keyword()) ::
          {:ok, ExOctocat.Model.CommitComparison.t()}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:error, Tesla.Env.t()}
  def repos_compare_commits(connection, owner, repo, basehead, opts \\ []) do
    optional_params = %{
      :page => :query,
      :per_page => :query
    }

    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/compare/#{basehead}")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.CommitComparison{}},
      {500, %ExOctocat.Model.BasicError{}},
      {404, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  Create an autolink reference for a repository
  Users with admin access to the repository can create an autolink.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject64):
  ## Returns

  {:ok, ExOctocat.Model.Autolink.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_create_autolink(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, ExOctocat.Model.ValidationError.t()}
          | {:ok, ExOctocat.Model.Autolink.t()}
          | {:error, Tesla.Env.t()}
  def repos_create_autolink(connection, owner, repo, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:post)
    |> url("/repos/#{owner}/#{repo}/autolinks")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {201, %ExOctocat.Model.Autolink{}},
      {422, %ExOctocat.Model.ValidationError{}}
    ])
  end

  @doc """
  Create a commit comment
  Create a comment for a commit using its `:commit_sha`.  This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \"[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\" and \"[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\" for details.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - commit_sha (String.t): commit_sha parameter
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject76):
  ## Returns

  {:ok, ExOctocat.Model.CommitComment.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_create_commit_comment(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, ExOctocat.Model.CommitComment.t()}
          | {:ok, ExOctocat.Model.ValidationError.t()}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:error, Tesla.Env.t()}
  def repos_create_commit_comment(connection, owner, repo, commit_sha, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:post)
    |> url("/repos/#{owner}/#{repo}/commits/#{commit_sha}/comments")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {201, %ExOctocat.Model.CommitComment{}},
      {403, %ExOctocat.Model.BasicError{}},
      {422, %ExOctocat.Model.ValidationError{}}
    ])
  end

  @doc """
  Create commit signature protection
  Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  When authenticated with admin or owner permissions to the repository, you can use this endpoint to require signed commits on a branch. You must enable branch protection to require signed commits.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - branch (String.t): The name of the branch.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, ExOctocat.Model.ProtectedBranchAdminEnforced.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_create_commit_signature_protection(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, ExOctocat.Model.ProtectedBranchAdminEnforced.t()}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:error, Tesla.Env.t()}
  def repos_create_commit_signature_protection(connection, owner, repo, branch, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/repos/#{owner}/#{repo}/branches/#{branch}/protection/required_signatures")
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.ProtectedBranchAdminEnforced{}},
      {404, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  Create a commit status
  Users with push access in a repository can create commit statuses for a given SHA.  Note: there is a limit of 1000 statuses per `sha` and `context` within a repository. Attempts to create more than 1000 statuses will result in a validation error.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - sha (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject135):
  ## Returns

  {:ok, ExOctocat.Model.Status.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_create_commit_status(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, ExOctocat.Model.Status.t()} | {:error, Tesla.Env.t()}
  def repos_create_commit_status(connection, owner, repo, sha, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:post)
    |> url("/repos/#{owner}/#{repo}/statuses/#{sha}")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {201, %ExOctocat.Model.Status{}}
    ])
  end

  @doc """
  Create a deploy key
  You can create a read-only deploy key.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject108):
  ## Returns

  {:ok, ExOctocat.Model.DeployKey.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_create_deploy_key(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, ExOctocat.Model.DeployKey.t()}
          | {:ok, ExOctocat.Model.ValidationError.t()}
          | {:error, Tesla.Env.t()}
  def repos_create_deploy_key(connection, owner, repo, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:post)
    |> url("/repos/#{owner}/#{repo}/keys")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {201, %ExOctocat.Model.DeployKey{}},
      {422, %ExOctocat.Model.ValidationError{}}
    ])
  end

  @doc """
  Create a deployment
  Deployments offer a few configurable parameters with certain defaults.  The `ref` parameter can be any named branch, tag, or SHA. At GitHub we often deploy branches and verify them before we merge a pull request.  The `environment` parameter allows deployments to be issued to different runtime environments. Teams often have multiple environments for verifying their applications, such as `production`, `staging`, and `qa`. This parameter makes it easier to track which environments have requested deployments. The default environment is `production`.  The `auto_merge` parameter is used to ensure that the requested ref is not behind the repository's default branch. If the ref _is_ behind the default branch for the repository, we will attempt to merge it for you. If the merge succeeds, the API will return a successful merge commit. If merge conflicts prevent the merge from succeeding, the API will return a failure response.  By default, [commit statuses](https://docs.github.com/rest/reference/repos#statuses) for every submitted context must be in a `success` state. The `required_contexts` parameter allows you to specify a subset of contexts that must be `success`, or to specify contexts that have not yet been submitted. You are not required to use commit statuses to deploy. If you do not require any contexts or create any commit statuses, the deployment will always succeed.  The `payload` parameter is available for any extra information that a deployment system might need. It is a JSON text field that will be passed on when a deployment event is dispatched.  The `task` parameter is used by the deployment system to allow different execution paths. In the web world this might be `deploy:migrations` to run schema changes on the system. In the compiled world this could be a flag to compile an application with debugging enabled.  Users with `repo` or `repo_deployment` scopes can create a deployment for a given ref.  #### Merged branch response You will see this response when GitHub automatically merges the base branch into the topic branch instead of creating a deployment. This auto-merge happens when: *   Auto-merge option is enabled in the repository *   Topic branch does not include the latest changes on the base branch, which is `master` in the response example *   There are no merge conflicts  If there are no new commits in the base branch, a new request to create a deployment should give a successful response.  #### Merge conflict response This error happens when the `auto_merge` option is enabled and when the default branch (in this case `master`), can't be merged into the branch that's being deployed (in this case `topic-branch`), due to merge conflicts.  #### Failed commit status checks This error happens when the `required_contexts` parameter indicates that one or more contexts need to have a `success` status for the commit to be deployed, but one or more of the required contexts do not have a state of `success`.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject80):
  ## Returns

  {:ok, ExOctocat.Model.Deployment.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_create_deployment(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, nil}
          | {:ok, ExOctocat.Model.InlineResponse202.t()}
          | {:ok, ExOctocat.Model.Deployment.t()}
          | {:ok, ExOctocat.Model.ValidationError.t()}
          | {:error, Tesla.Env.t()}
  def repos_create_deployment(connection, owner, repo, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:post)
    |> url("/repos/#{owner}/#{repo}/deployments")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {201, %ExOctocat.Model.Deployment{}},
      {202, %ExOctocat.Model.InlineResponse202{}},
      {409, false},
      {422, %ExOctocat.Model.ValidationError{}}
    ])
  end

  @doc """
  Create a deployment status
  Users with `push` access can create deployment statuses for a given deployment.  GitHub Apps require `read & write` access to \"Deployments\" and `read-only` access to \"Repo contents\" (for private repos). OAuth Apps require the `repo_deployment` scope.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - deployment_id (integer()): deployment_id parameter
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject81):
  ## Returns

  {:ok, ExOctocat.Model.DeploymentStatus.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_create_deployment_status(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          integer(),
          keyword()
        ) ::
          {:ok, ExOctocat.Model.DeploymentStatus.t()}
          | {:ok, ExOctocat.Model.ValidationError.t()}
          | {:error, Tesla.Env.t()}
  def repos_create_deployment_status(connection, owner, repo, deployment_id, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:post)
    |> url("/repos/#{owner}/#{repo}/deployments/#{deployment_id}/statuses")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {201, %ExOctocat.Model.DeploymentStatus{}},
      {422, %ExOctocat.Model.ValidationError{}}
    ])
  end

  @doc """
  Create a repository dispatch event
  You can use this endpoint to trigger a webhook event called `repository_dispatch` when you want activity that happens outside of GitHub to trigger a GitHub Actions workflow or GitHub App webhook. You must configure your GitHub Actions workflow or GitHub App to run when the `repository_dispatch` event occurs. For an example `repository_dispatch` webhook payload, see \"[RepositoryDispatchEvent](https://docs.github.com/webhooks/event-payloads/#repository_dispatch).\"  The `client_payload` parameter is available for any extra information that your workflow might need. This parameter is a JSON payload that will be passed on when the webhook event is dispatched. For example, the `client_payload` can include a message that a user would like to send using a GitHub Actions workflow. Or the `client_payload` can be used as a test to debug your workflow.  This endpoint requires write access to the repository by providing either:    - Personal access tokens with `repo` scope. For more information, see \"[Creating a personal access token for the command line](https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line)\" in the GitHub Help documentation.   - GitHub Apps with both `metadata:read` and `contents:read&write` permissions.  This input example shows how you can use the `client_payload` as a test to debug your workflow.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject82):
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_create_dispatch_event(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, nil} | {:ok, ExOctocat.Model.ValidationError.t()} | {:error, Tesla.Env.t()}
  def repos_create_dispatch_event(connection, owner, repo, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:post)
    |> url("/repos/#{owner}/#{repo}/dispatches")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false},
      {422, %ExOctocat.Model.ValidationError{}}
    ])
  end

  @doc """
  Create a repository for the authenticated user
  Creates a new repository for the authenticated user.  **OAuth scope requirements**  When using [OAuth](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:  *   `public_repo` scope or `repo` scope to create a public repository. Note: For GitHub AE, use `repo` scope to create an internal repository. *   `repo` scope to create a private repository.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject168):
  ## Returns

  {:ok, ExOctocat.Model.Repository.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_create_for_authenticated_user(Tesla.Env.client(), keyword()) ::
          {:ok, nil}
          | {:ok, ExOctocat.Model.Repository.t()}
          | {:ok, ExOctocat.Model.ValidationError.t()}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:error, Tesla.Env.t()}
  def repos_create_for_authenticated_user(connection, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:post)
    |> url("/user/repos")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {201, %ExOctocat.Model.Repository{}},
      {401, %ExOctocat.Model.BasicError{}},
      {304, false},
      {404, %ExOctocat.Model.BasicError{}},
      {403, %ExOctocat.Model.BasicError{}},
      {422, %ExOctocat.Model.ValidationError{}},
      {400, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  Create a fork
  Create a fork for the authenticated user.  **Note**: Forking a Repository happens asynchronously. You may have to wait a short period of time before you can access the git objects. If this takes longer than 5 minutes, be sure to contact [GitHub Support](https://support.github.com/contact?tags=rest-api).

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject84):
  ## Returns

  {:ok, ExOctocat.Model.FullRepository.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_create_fork(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, ExOctocat.Model.FullRepository.t()}
          | {:ok, ExOctocat.Model.ValidationError.t()}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:error, Tesla.Env.t()}
  def repos_create_fork(connection, owner, repo, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:post)
    |> url("/repos/#{owner}/#{repo}/forks")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {202, %ExOctocat.Model.FullRepository{}},
      {400, %ExOctocat.Model.BasicError{}},
      {422, %ExOctocat.Model.ValidationError{}},
      {403, %ExOctocat.Model.BasicError{}},
      {404, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  Create an organization repository
  Creates a new repository in the specified organization. The authenticated user must be a member of the organization.  **OAuth scope requirements**  When using [OAuth](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:  *   `public_repo` scope or `repo` scope to create a public repository. Note: For GitHub AE, use `repo` scope to create an internal repository. *   `repo` scope to create a private repository

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject39):
  ## Returns

  {:ok, ExOctocat.Model.Repository.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_create_in_org(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, ExOctocat.Model.Repository.t()}
          | {:ok, ExOctocat.Model.ValidationError.t()}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:error, Tesla.Env.t()}
  def repos_create_in_org(connection, org, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:post)
    |> url("/orgs/#{org}/repos")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {201, %ExOctocat.Model.Repository{}},
      {403, %ExOctocat.Model.BasicError{}},
      {422, %ExOctocat.Model.ValidationError{}}
    ])
  end

  @doc """
  Create or update an environment
  Create or update an environment with protection rules, such as required reviewers. For more information about environment protection rules, see \"[Environments](/actions/reference/environments#environment-protection-rules).\"  **Note:** Although you can use this operation to specify that only branches that match specified name patterns can deploy to this environment, you must use the UI to set the name patterns. For more information, see \"[Environments](/actions/reference/environments#deployment-branches).\"  **Note:** To create or update secrets for an environment, see \"[Secrets](/rest/reference/actions#secrets).\"  You must authenticate using an access token with the repo scope to use this endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - environment_name (String.t): The name of the environment
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject83):
  ## Returns

  {:ok, ExOctocat.Model.Environment.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_create_or_update_environment(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, ExOctocat.Model.Environment.t()}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:error, Tesla.Env.t()}
  def repos_create_or_update_environment(connection, owner, repo, environment_name, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:put)
    |> url("/repos/#{owner}/#{repo}/environments/#{environment_name}")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.Environment{}},
      {422, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  Create or update file contents
  Creates a new file or replaces an existing file in a repository.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - path (String.t): path parameter
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject78):
  ## Returns

  {:ok, ExOctocat.Model.FileCommit.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_create_or_update_file_contents(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, ExOctocat.Model.ValidationError.t()}
          | {:ok, ExOctocat.Model.FileCommit.t()}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:error, Tesla.Env.t()}
  def repos_create_or_update_file_contents(connection, owner, repo, path, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:put)
    |> url("/repos/#{owner}/#{repo}/contents/#{path}")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.FileCommit{}},
      {201, %ExOctocat.Model.FileCommit{}},
      {404, %ExOctocat.Model.BasicError{}},
      {422, %ExOctocat.Model.ValidationError{}},
      {409, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  Create a GitHub Pages site
  Configures a GitHub Pages site. For more information, see \"[About GitHub Pages](/github/working-with-github-pages/about-github-pages).\"

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject115):
  ## Returns

  {:ok, ExOctocat.Model.Page.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_create_pages_site(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, ExOctocat.Model.Page.t()}
          | {:ok, ExOctocat.Model.InlineResponse415.t()}
          | {:ok, ExOctocat.Model.ValidationError.t()}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:error, Tesla.Env.t()}
  def repos_create_pages_site(connection, owner, repo, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:post)
    |> url("/repos/#{owner}/#{repo}/pages")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {201, %ExOctocat.Model.Page{}},
      {422, %ExOctocat.Model.ValidationError{}},
      {415, %ExOctocat.Model.InlineResponse415{}},
      {409, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  Create a release
  Users with push access to the repository can create a release.  This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \"[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\" and \"[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\" for details.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject130):
  ## Returns

  {:ok, ExOctocat.Model.Release.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_create_release(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, ExOctocat.Model.ValidationError.t()}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:ok, ExOctocat.Model.Release.t()}
          | {:error, Tesla.Env.t()}
  def repos_create_release(connection, owner, repo, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:post)
    |> url("/repos/#{owner}/#{repo}/releases")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {201, %ExOctocat.Model.Release{}},
      {404, %ExOctocat.Model.BasicError{}},
      {422, %ExOctocat.Model.ValidationError{}}
    ])
  end

  @doc """
  Create a repository using a template
  Creates a new repository using a repository template. Use the `template_owner` and `template_repo` route parameters to specify the repository to use as the template. The authenticated user must own or be a member of an organization that owns the repository. To check if a repository is available to use as a template, get the repository's information using the [Get a repository](https://docs.github.com/rest/reference/repos#get-a-repository) endpoint and check that the `is_template` key is `true`.  **OAuth scope requirements**  When using [OAuth](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:  *   `public_repo` scope or `repo` scope to create a public repository. Note: For GitHub AE, use `repo` scope to create an internal repository. *   `repo` scope to create a private repository

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - template_owner (String.t):
  - template_repo (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject139):
  ## Returns

  {:ok, ExOctocat.Model.Repository.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_create_using_template(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, ExOctocat.Model.Repository.t()} | {:error, Tesla.Env.t()}
  def repos_create_using_template(connection, template_owner, template_repo, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:post)
    |> url("/repos/#{template_owner}/#{template_repo}/generate")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {201, %ExOctocat.Model.Repository{}}
    ])
  end

  @doc """
  Create a repository webhook
  Repositories can have multiple webhooks installed. Each webhook should have a unique `config`. Multiple webhooks can share the same `config` as long as those webhooks do not have any `events` that overlap.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject91):
  ## Returns

  {:ok, ExOctocat.Model.Hook.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_create_webhook(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, ExOctocat.Model.Hook.t()}
          | {:ok, ExOctocat.Model.ValidationError.t()}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:error, Tesla.Env.t()}
  def repos_create_webhook(connection, owner, repo, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:post)
    |> url("/repos/#{owner}/#{repo}/hooks")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {201, %ExOctocat.Model.Hook{}},
      {404, %ExOctocat.Model.BasicError{}},
      {422, %ExOctocat.Model.ValidationError{}},
      {403, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  Decline a repository invitation

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - invitation_id (integer()): invitation_id parameter
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_decline_invitation(Tesla.Env.client(), integer(), keyword()) ::
          {:ok, nil} | {:ok, ExOctocat.Model.BasicError.t()} | {:error, Tesla.Env.t()}
  def repos_decline_invitation(connection, invitation_id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/user/repository_invitations/#{invitation_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false},
      {409, %ExOctocat.Model.BasicError{}},
      {304, false},
      {404, %ExOctocat.Model.BasicError{}},
      {403, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  Delete a repository
  Deleting a repository requires admin access. If OAuth is used, the `delete_repo` scope is required.  If an organization owner has configured the organization to prevent members from deleting organization-owned repositories, you will get a `403 Forbidden` response.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_delete(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, nil}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:ok, ExOctocat.Model.InlineResponse422.t()}
          | {:error, Tesla.Env.t()}
  def repos_delete(connection, owner, repo, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/repos/#{owner}/#{repo}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false},
      {403, %ExOctocat.Model.InlineResponse422{}},
      {307, %ExOctocat.Model.BasicError{}},
      {404, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  Delete access restrictions
  Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Disables the ability to restrict who can push to this branch.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - branch (String.t): The name of the branch.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_delete_access_restrictions(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, nil} | {:error, Tesla.Env.t()}
  def repos_delete_access_restrictions(connection, owner, repo, branch, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/repos/#{owner}/#{repo}/branches/#{branch}/protection/restrictions")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false}
    ])
  end

  @doc """
  Delete admin branch protection
  Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Removing admin enforcement requires admin or owner permissions to the repository and branch protection to be enabled.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - branch (String.t): The name of the branch.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_delete_admin_branch_protection(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, nil} | {:ok, ExOctocat.Model.BasicError.t()} | {:error, Tesla.Env.t()}
  def repos_delete_admin_branch_protection(connection, owner, repo, branch, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/repos/#{owner}/#{repo}/branches/#{branch}/protection/enforce_admins")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false},
      {404, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  Delete an environment
  You must authenticate using an access token with the repo scope to use this endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - environment_name (String.t): The name of the environment
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_delete_an_environment(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, nil} | {:error, Tesla.Env.t()}
  def repos_delete_an_environment(connection, owner, repo, environment_name, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/repos/#{owner}/#{repo}/environments/#{environment_name}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false}
    ])
  end

  @doc """
  Delete an autolink reference from a repository
  This deletes a single autolink reference by ID that was configured for the given repository.  Information about autolinks are only available to repository administrators.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - autolink_id (integer()): autolink_id parameter
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_delete_autolink(Tesla.Env.client(), String.t(), String.t(), integer(), keyword()) ::
          {:ok, nil} | {:ok, ExOctocat.Model.BasicError.t()} | {:error, Tesla.Env.t()}
  def repos_delete_autolink(connection, owner, repo, autolink_id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/repos/#{owner}/#{repo}/autolinks/#{autolink_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false},
      {404, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  Delete branch protection
  Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - branch (String.t): The name of the branch.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_delete_branch_protection(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, nil} | {:ok, ExOctocat.Model.BasicError.t()} | {:error, Tesla.Env.t()}
  def repos_delete_branch_protection(connection, owner, repo, branch, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/repos/#{owner}/#{repo}/branches/#{branch}/protection")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false},
      {403, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  Delete a commit comment

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - comment_id (integer()): comment_id parameter
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_delete_commit_comment(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          integer(),
          keyword()
        ) :: {:ok, nil} | {:ok, ExOctocat.Model.BasicError.t()} | {:error, Tesla.Env.t()}
  def repos_delete_commit_comment(connection, owner, repo, comment_id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/repos/#{owner}/#{repo}/comments/#{comment_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false},
      {404, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  Delete commit signature protection
  Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  When authenticated with admin or owner permissions to the repository, you can use this endpoint to disable required signed commits on a branch. You must enable branch protection to require signed commits.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - branch (String.t): The name of the branch.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_delete_commit_signature_protection(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, nil} | {:ok, ExOctocat.Model.BasicError.t()} | {:error, Tesla.Env.t()}
  def repos_delete_commit_signature_protection(connection, owner, repo, branch, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/repos/#{owner}/#{repo}/branches/#{branch}/protection/required_signatures")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false},
      {404, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  Delete a deploy key
  Deploy keys are immutable. If you need to update a key, remove the key and create a new one instead.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - key_id (integer()): key_id parameter
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_delete_deploy_key(Tesla.Env.client(), String.t(), String.t(), integer(), keyword()) ::
          {:ok, nil} | {:error, Tesla.Env.t()}
  def repos_delete_deploy_key(connection, owner, repo, key_id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/repos/#{owner}/#{repo}/keys/#{key_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false}
    ])
  end

  @doc """
  Delete a deployment
  To ensure there can always be an active deployment, you can only delete an _inactive_ deployment. Anyone with `repo` or `repo_deployment` scopes can delete an inactive deployment.  To set a deployment as inactive, you must:  *   Create a new deployment that is active so that the system has a record of the current state, then delete the previously active deployment. *   Mark the active deployment as inactive by adding any non-successful deployment status.  For more information, see \"[Create a deployment](https://docs.github.com/rest/reference/repos/#create-a-deployment)\" and \"[Create a deployment status](https://docs.github.com/rest/reference/repos#create-a-deployment-status).\"

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - deployment_id (integer()): deployment_id parameter
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_delete_deployment(Tesla.Env.client(), String.t(), String.t(), integer(), keyword()) ::
          {:ok, nil}
          | {:ok, ExOctocat.Model.ValidationErrorSimple.t()}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:error, Tesla.Env.t()}
  def repos_delete_deployment(connection, owner, repo, deployment_id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/repos/#{owner}/#{repo}/deployments/#{deployment_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false},
      {404, %ExOctocat.Model.BasicError{}},
      {422, %ExOctocat.Model.ValidationErrorSimple{}}
    ])
  end

  @doc """
  Delete a file
  Deletes a file in a repository.  You can provide an additional `committer` parameter, which is an object containing information about the committer. Or, you can provide an `author` parameter, which is an object containing information about the author.  The `author` section is optional and is filled in with the `committer` information if omitted. If the `committer` information is omitted, the authenticated user's information is used.  You must provide values for both `name` and `email`, whether you choose to use `author` or `committer`. Otherwise, you'll receive a `422` status code.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - path (String.t): path parameter
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject79):
  ## Returns

  {:ok, ExOctocat.Model.FileCommit.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_delete_file(Tesla.Env.client(), String.t(), String.t(), String.t(), keyword()) ::
          {:ok, ExOctocat.Model.ValidationError.t()}
          | {:ok, ExOctocat.Model.FileCommit.t()}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:ok, ExOctocat.Model.InlineResponse503.t()}
          | {:error, Tesla.Env.t()}
  def repos_delete_file(connection, owner, repo, path, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:delete)
    |> url("/repos/#{owner}/#{repo}/contents/#{path}")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.FileCommit{}},
      {422, %ExOctocat.Model.ValidationError{}},
      {404, %ExOctocat.Model.BasicError{}},
      {409, %ExOctocat.Model.BasicError{}},
      {503, %ExOctocat.Model.InlineResponse503{}}
    ])
  end

  @doc """
  Delete a repository invitation

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - invitation_id (integer()): invitation_id parameter
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_delete_invitation(Tesla.Env.client(), String.t(), String.t(), integer(), keyword()) ::
          {:ok, nil} | {:error, Tesla.Env.t()}
  def repos_delete_invitation(connection, owner, repo, invitation_id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/repos/#{owner}/#{repo}/invitations/#{invitation_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false}
    ])
  end

  @doc """
  Delete a GitHub Pages site

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_delete_pages_site(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, nil}
          | {:ok, ExOctocat.Model.InlineResponse415.t()}
          | {:ok, ExOctocat.Model.ValidationError.t()}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:error, Tesla.Env.t()}
  def repos_delete_pages_site(connection, owner, repo, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/repos/#{owner}/#{repo}/pages")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false},
      {422, %ExOctocat.Model.ValidationError{}},
      {415, %ExOctocat.Model.InlineResponse415{}},
      {404, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  Delete pull request review protection
  Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - branch (String.t): The name of the branch.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_delete_pull_request_review_protection(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, nil} | {:ok, ExOctocat.Model.BasicError.t()} | {:error, Tesla.Env.t()}
  def repos_delete_pull_request_review_protection(connection, owner, repo, branch, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/repos/#{owner}/#{repo}/branches/#{branch}/protection/required_pull_request_reviews")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false},
      {404, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  Delete a release
  Users with push access to the repository can delete a release.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - release_id (integer()): release_id parameter
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_delete_release(Tesla.Env.client(), String.t(), String.t(), integer(), keyword()) ::
          {:ok, nil} | {:error, Tesla.Env.t()}
  def repos_delete_release(connection, owner, repo, release_id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/repos/#{owner}/#{repo}/releases/#{release_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false}
    ])
  end

  @doc """
  Delete a release asset

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - asset_id (integer()): asset_id parameter
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_delete_release_asset(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          integer(),
          keyword()
        ) :: {:ok, nil} | {:error, Tesla.Env.t()}
  def repos_delete_release_asset(connection, owner, repo, asset_id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/repos/#{owner}/#{repo}/releases/assets/#{asset_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false}
    ])
  end

  @doc """
  Delete a repository webhook

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - hook_id (integer()):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_delete_webhook(Tesla.Env.client(), String.t(), String.t(), integer(), keyword()) ::
          {:ok, nil} | {:ok, ExOctocat.Model.BasicError.t()} | {:error, Tesla.Env.t()}
  def repos_delete_webhook(connection, owner, repo, hook_id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/repos/#{owner}/#{repo}/hooks/#{hook_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false},
      {404, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  Disable automated security fixes
  Disables automated security fixes for a repository. The authenticated user must have admin access to the repository. For more information, see \"[Configuring automated security fixes](https://help.github.com/en/articles/configuring-automated-security-fixes)\".

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_disable_automated_security_fixes(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, nil} | {:error, Tesla.Env.t()}
  def repos_disable_automated_security_fixes(connection, owner, repo, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/repos/#{owner}/#{repo}/automated-security-fixes")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false}
    ])
  end

  @doc """
  Disable vulnerability alerts
  Disables dependency alerts and the dependency graph for a repository. The authenticated user must have admin access to the repository. For more information, see \"[About security alerts for vulnerable dependencies](https://help.github.com/en/articles/about-security-alerts-for-vulnerable-dependencies)\".

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_disable_vulnerability_alerts(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, nil} | {:error, Tesla.Env.t()}
  def repos_disable_vulnerability_alerts(connection, owner, repo, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/repos/#{owner}/#{repo}/vulnerability-alerts")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false}
    ])
  end

  @doc """
  Download a repository archive (tar)
  Gets a redirect URL to download a tar archive for a repository. If you omit `:ref`, the repository’s default branch (usually `master`) will be used. Please make sure your HTTP framework is configured to follow redirects or you will need to use the `Location` header to make a second `GET` request. **Note**: For private repositories, these links are temporary and expire after five minutes.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - ref (String.t):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_download_tarball_archive(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, nil} | {:error, Tesla.Env.t()}
  def repos_download_tarball_archive(connection, owner, repo, ref, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/tarball/#{ref}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {302, false}
    ])
  end

  @doc """
  Download a repository archive (zip)
  Gets a redirect URL to download a zip archive for a repository. If you omit `:ref`, the repository’s default branch (usually `master`) will be used. Please make sure your HTTP framework is configured to follow redirects or you will need to use the `Location` header to make a second `GET` request. **Note**: For private repositories, these links are temporary and expire after five minutes.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - ref (String.t):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_download_zipball_archive(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, nil} | {:error, Tesla.Env.t()}
  def repos_download_zipball_archive(connection, owner, repo, ref, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/zipball/#{ref}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {302, false}
    ])
  end

  @doc """
  Enable automated security fixes
  Enables automated security fixes for a repository. The authenticated user must have admin access to the repository. For more information, see \"[Configuring automated security fixes](https://help.github.com/en/articles/configuring-automated-security-fixes)\".

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_enable_automated_security_fixes(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, nil} | {:error, Tesla.Env.t()}
  def repos_enable_automated_security_fixes(connection, owner, repo, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/repos/#{owner}/#{repo}/automated-security-fixes")
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false}
    ])
  end

  @doc """
  Enable vulnerability alerts
  Enables dependency alerts and the dependency graph for a repository. The authenticated user must have admin access to the repository. For more information, see \"[About security alerts for vulnerable dependencies](https://help.github.com/en/articles/about-security-alerts-for-vulnerable-dependencies)\".

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_enable_vulnerability_alerts(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, nil} | {:error, Tesla.Env.t()}
  def repos_enable_vulnerability_alerts(connection, owner, repo, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/repos/#{owner}/#{repo}/vulnerability-alerts")
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false}
    ])
  end

  @doc """
  Get a repository
  When you pass the `scarlet-witch-preview` media type, requests to get a repository will also return the repository's code of conduct if it can be detected from the repository's code of conduct file.  The `parent` and `source` objects are present when the repository is a fork. `parent` is the repository this repository was forked from, `source` is the ultimate source for the network.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, ExOctocat.Model.FullRepository.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_get(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, ExOctocat.Model.FullRepository.t()}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:error, Tesla.Env.t()}
  def repos_get(connection, owner, repo, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.FullRepository{}},
      {403, %ExOctocat.Model.BasicError{}},
      {404, %ExOctocat.Model.BasicError{}},
      {301, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  Get access restrictions
  Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Lists who has access to this protected branch.  **Note**: Users, apps, and teams `restrictions` are only available for organization-owned repositories.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - branch (String.t): The name of the branch.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, ExOctocat.Model.BranchRestrictionPolicy.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_get_access_restrictions(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, ExOctocat.Model.BasicError.t()}
          | {:ok, ExOctocat.Model.BranchRestrictionPolicy.t()}
          | {:error, Tesla.Env.t()}
  def repos_get_access_restrictions(connection, owner, repo, branch, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/branches/#{branch}/protection/restrictions")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.BranchRestrictionPolicy{}},
      {404, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  Get admin branch protection
  Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - branch (String.t): The name of the branch.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, ExOctocat.Model.ProtectedBranchAdminEnforced.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_get_admin_branch_protection(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, ExOctocat.Model.ProtectedBranchAdminEnforced.t()} | {:error, Tesla.Env.t()}
  def repos_get_admin_branch_protection(connection, owner, repo, branch, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/branches/#{branch}/protection/enforce_admins")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.ProtectedBranchAdminEnforced{}}
    ])
  end

  @doc """
  Get all environments
  Get all environments for a repository.  Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, ExOctocat.Model.InlineResponse20020.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_get_all_environments(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, ExOctocat.Model.InlineResponse20020.t()} | {:error, Tesla.Env.t()}
  def repos_get_all_environments(connection, owner, repo, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/environments")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.InlineResponse20020{}}
    ])
  end

  @doc """
  Get all status check contexts
  Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - branch (String.t): The name of the branch.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, [%String{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_get_all_status_check_contexts(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, list(String.t())}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:error, Tesla.Env.t()}
  def repos_get_all_status_check_contexts(connection, owner, repo, branch, _opts \\ []) do
    %{}
    |> method(:get)
    |> url(
      "/repos/#{owner}/#{repo}/branches/#{branch}/protection/required_status_checks/contexts"
    )
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, []},
      {404, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  Get all repository topics

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :page (integer()): Page number of the results to fetch.
    - :per_page (integer()): Results per page (max 100)
  ## Returns

  {:ok, ExOctocat.Model.Topic.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_get_all_topics(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, ExOctocat.Model.Topic.t()}
          | {:ok, ExOctocat.Model.InlineResponse415.t()}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:error, Tesla.Env.t()}
  def repos_get_all_topics(connection, owner, repo, opts \\ []) do
    optional_params = %{
      :page => :query,
      :per_page => :query
    }

    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/topics")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.Topic{}},
      {415, %ExOctocat.Model.InlineResponse415{}},
      {404, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  Get apps with access to the protected branch
  Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Lists the GitHub Apps that have push access to this branch. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - branch (String.t): The name of the branch.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, [%Integration{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_get_apps_with_access_to_protected_branch(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, ExOctocat.Model.BasicError.t()}
          | {:ok, list(ExOctocat.Model.Integration.t())}
          | {:error, Tesla.Env.t()}
  def repos_get_apps_with_access_to_protected_branch(connection, owner, repo, branch, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/branches/#{branch}/protection/restrictions/apps")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, [%ExOctocat.Model.Integration{}]},
      {404, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  Get an autolink reference of a repository
  This returns a single autolink reference by ID that was configured for the given repository.  Information about autolinks are only available to repository administrators.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - autolink_id (integer()): autolink_id parameter
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, ExOctocat.Model.Autolink.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_get_autolink(Tesla.Env.client(), String.t(), String.t(), integer(), keyword()) ::
          {:ok, ExOctocat.Model.BasicError.t()}
          | {:ok, ExOctocat.Model.Autolink.t()}
          | {:error, Tesla.Env.t()}
  def repos_get_autolink(connection, owner, repo, autolink_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/autolinks/#{autolink_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.Autolink{}},
      {404, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  Get a branch

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - branch (String.t): The name of the branch.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, ExOctocat.Model.BranchWithProtection.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_get_branch(Tesla.Env.client(), String.t(), String.t(), String.t(), keyword()) ::
          {:ok, ExOctocat.Model.InlineResponse415.t()}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:ok, ExOctocat.Model.BranchWithProtection.t()}
          | {:error, Tesla.Env.t()}
  def repos_get_branch(connection, owner, repo, branch, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/branches/#{branch}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.BranchWithProtection{}},
      {301, %ExOctocat.Model.BasicError{}},
      {415, %ExOctocat.Model.InlineResponse415{}},
      {404, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  Get branch protection
  Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - branch (String.t): The name of the branch.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, ExOctocat.Model.BranchProtection.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_get_branch_protection(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, ExOctocat.Model.BasicError.t()}
          | {:ok, ExOctocat.Model.BranchProtection.t()}
          | {:error, Tesla.Env.t()}
  def repos_get_branch_protection(connection, owner, repo, branch, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/branches/#{branch}/protection")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.BranchProtection{}},
      {404, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  Get repository clones
  Get the total number of clones and breakdown per day or week for the last 14 days. Timestamps are aligned to UTC midnight of the beginning of the day or week. Week begins on Monday.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :per (String.t): Must be one of: `day`, `week`.
  ## Returns

  {:ok, ExOctocat.Model.CloneTraffic.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_get_clones(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, ExOctocat.Model.CloneTraffic.t()}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:error, Tesla.Env.t()}
  def repos_get_clones(connection, owner, repo, opts \\ []) do
    optional_params = %{
      :per => :query
    }

    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/traffic/clones")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.CloneTraffic{}},
      {403, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  Get the weekly commit activity
  Returns a weekly aggregate of the number of additions and deletions pushed to a repository.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, [%List{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_get_code_frequency_stats(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, nil} | {:ok, list(Integer.t())} | {:ok, Map.t()} | {:error, Tesla.Env.t()}
  def repos_get_code_frequency_stats(connection, owner, repo, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/stats/code_frequency")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, []},
      {202, false},
      {204, false}
    ])
  end

  @doc """
  Get repository permissions for a user
  Checks the repository permission of a collaborator. The possible repository permissions are `admin`, `write`, `read`, and `none`.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - username (String.t):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, ExOctocat.Model.RepositoryCollaboratorPermission.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_get_collaborator_permission_level(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, ExOctocat.Model.BasicError.t()}
          | {:ok, ExOctocat.Model.RepositoryCollaboratorPermission.t()}
          | {:error, Tesla.Env.t()}
  def repos_get_collaborator_permission_level(connection, owner, repo, username, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/collaborators/#{username}/permission")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.RepositoryCollaboratorPermission{}},
      {404, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  Get the combined status for a specific reference
  Users with pull access in a repository can access a combined view of commit statuses for a given ref. The ref can be a SHA, a branch name, or a tag name.  The most recent status for each context is returned, up to 100. This field [paginates](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination) if there are over 100 contexts.  Additionally, a combined `state` is returned. The `state` is one of:  *   **failure** if any of the contexts report as `error` or `failure` *   **pending** if there are no statuses or a context is `pending` *   **success** if the latest status for all contexts is `success`

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - ref (String.t): ref parameter
  - opts (KeywordList): [optional] Optional parameters
    - :per_page (integer()): Results per page (max 100)
    - :page (integer()): Page number of the results to fetch.
  ## Returns

  {:ok, ExOctocat.Model.CombinedCommitStatus.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_get_combined_status_for_ref(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, ExOctocat.Model.BasicError.t()}
          | {:ok, ExOctocat.Model.CombinedCommitStatus.t()}
          | {:error, Tesla.Env.t()}
  def repos_get_combined_status_for_ref(connection, owner, repo, ref, opts \\ []) do
    optional_params = %{
      :per_page => :query,
      :page => :query
    }

    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/commits/#{ref}/status")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.CombinedCommitStatus{}},
      {404, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  Get a commit
  Returns the contents of a single commit reference. You must have `read` access for the repository to use this endpoint.  **Note:** If there are more than 300 files in the commit diff, the response will include pagination link headers for the remaining files, up to a limit of 3000 files. Each page contains the static commit information, and the only changes are to the file listing.  You can pass the appropriate [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to  fetch `diff` and `patch` formats. Diffs with binary data will have no `patch` property.  To return only the SHA-1 hash of the commit reference, you can provide the `sha` custom [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) in the `Accept` header. You can use this endpoint to check if a remote reference's SHA-1 hash is the same as your local reference's SHA-1 hash by providing the local SHA-1 reference as the ETag.  **Signature verification object**  The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:  | Name | Type | Description | | ---- | ---- | ----------- | | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. | | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. | | `signature` | `string` | The signature that was extracted from the commit. | | `payload` | `string` | The value that was signed. |  These are the possible values for `reason` in the `verification` object:  | Value | Description | | ----- | ----------- | | `expired_key` | The key that made the signature is expired. | | `not_signing_key` | The \"signing\" flag is not among the usage flags in the GPG key that made the signature. | | `gpgverify_error` | There was an error communicating with the signature verification service. | | `gpgverify_unavailable` | The signature verification service is currently unavailable. | | `unsigned` | The object does not include a signature. | | `unknown_signature_type` | A non-PGP signature was found in the commit. | | `no_user` | No user was associated with the `committer` email address in the commit. | | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. | | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. | | `unknown_key` | The key that made the signature has not been registered with any user's account. | | `malformed_signature` | There was an error parsing the signature. | | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. | | `valid` | None of the above errors applied, so the signature is considered to be verified. |

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - ref (String.t): ref parameter
  - opts (KeywordList): [optional] Optional parameters
    - :page (integer()): Page number of the results to fetch.
    - :per_page (integer()): Results per page (max 100)
  ## Returns

  {:ok, ExOctocat.Model.Commit.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_get_commit(Tesla.Env.client(), String.t(), String.t(), String.t(), keyword()) ::
          {:ok, ExOctocat.Model.Commit.t()}
          | {:ok, ExOctocat.Model.ValidationError.t()}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:error, Tesla.Env.t()}
  def repos_get_commit(connection, owner, repo, ref, opts \\ []) do
    optional_params = %{
      :page => :query,
      :per_page => :query
    }

    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/commits/#{ref}")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.Commit{}},
      {422, %ExOctocat.Model.ValidationError{}},
      {404, %ExOctocat.Model.BasicError{}},
      {500, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  Get the last year of commit activity
  Returns the last year of commit activity grouped by week. The `days` array is a group of commits per day, starting on `Sunday`.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, [%CommitActivity{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_get_commit_activity_stats(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, nil}
          | {:ok, Map.t()}
          | {:ok, list(ExOctocat.Model.CommitActivity.t())}
          | {:error, Tesla.Env.t()}
  def repos_get_commit_activity_stats(connection, owner, repo, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/stats/commit_activity")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, [%ExOctocat.Model.CommitActivity{}]},
      {202, false},
      {204, false}
    ])
  end

  @doc """
  Get a commit comment

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - comment_id (integer()): comment_id parameter
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, ExOctocat.Model.CommitComment.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_get_commit_comment(Tesla.Env.client(), String.t(), String.t(), integer(), keyword()) ::
          {:ok, ExOctocat.Model.CommitComment.t()}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:error, Tesla.Env.t()}
  def repos_get_commit_comment(connection, owner, repo, comment_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/comments/#{comment_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.CommitComment{}},
      {404, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  Get commit signature protection
  Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  When authenticated with admin or owner permissions to the repository, you can use this endpoint to check whether a branch requires signed commits. An enabled status of `true` indicates you must sign commits on this branch. For more information, see [Signing commits with GPG](https://help.github.com/articles/signing-commits-with-gpg) in GitHub Help.  **Note**: You must enable branch protection to require signed commits.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - branch (String.t): The name of the branch.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, ExOctocat.Model.ProtectedBranchAdminEnforced.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_get_commit_signature_protection(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, ExOctocat.Model.ProtectedBranchAdminEnforced.t()}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:error, Tesla.Env.t()}
  def repos_get_commit_signature_protection(connection, owner, repo, branch, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/branches/#{branch}/protection/required_signatures")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.ProtectedBranchAdminEnforced{}},
      {404, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  Get community profile metrics
  This endpoint will return all community profile metrics, including an overall health score, repository description, the presence of documentation, detected code of conduct, detected license, and the presence of ISSUE\\_TEMPLATE, PULL\\_REQUEST\\_TEMPLATE, README, and CONTRIBUTING files.  The `health_percentage` score is defined as a percentage of how many of these four documents are present: README, CONTRIBUTING, LICENSE, and CODE_OF_CONDUCT. For example, if all four documents are present, then the `health_percentage` is `100`. If only one is present, then the `health_percentage` is `25`.  `content_reports_enabled` is only returned for organization-owned repositories.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, ExOctocat.Model.CommunityProfile.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_get_community_profile_metrics(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, ExOctocat.Model.CommunityProfile.t()} | {:error, Tesla.Env.t()}
  def repos_get_community_profile_metrics(connection, owner, repo, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/community/profile")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.CommunityProfile{}}
    ])
  end

  @doc """
  Get repository content
  Gets the contents of a file or directory in a repository. Specify the file path or directory in `:path`. If you omit `:path`, you will receive the contents of the repository's root directory. See the description below regarding what the API response includes for directories.   Files and symlinks support [a custom media type](https://docs.github.com/rest/reference/repos#custom-media-types) for retrieving the raw content or rendered HTML (when supported). All content types support [a custom media type](https://docs.github.com/rest/reference/repos#custom-media-types) to ensure the content is returned in a consistent object format.  **Note**: *   To get a repository's contents recursively, you can [recursively get the tree](https://docs.github.com/rest/reference/git#trees). *   This API has an upper limit of 1,000 files for a directory. If you need to retrieve more files, use the [Git Trees API](https://docs.github.com/rest/reference/git#get-a-tree). *   This API supports files up to 1 megabyte in size.  #### If the content is a directory The response will be an array of objects, one object for each item in the directory. When listing the contents of a directory, submodules have their \"type\" specified as \"file\". Logically, the value _should_ be \"submodule\". This behavior exists in API v3 [for backwards compatibility purposes](https://git.io/v1YCW). In the next major version of the API, the type will be returned as \"submodule\".  #### If the content is a symlink  If the requested `:path` points to a symlink, and the symlink's target is a normal file in the repository, then the API responds with the content of the file (in the format shown in the example. Otherwise, the API responds with an object  describing the symlink itself.  #### If the content is a submodule The `submodule_git_url` identifies the location of the submodule repository, and the `sha` identifies a specific commit within the submodule repository. Git uses the given URL when cloning the submodule repository, and checks out the submodule at that specific commit.  If the submodule repository is not hosted on github.com, the Git URLs (`git_url` and `_links[\"git\"]`) and the github.com URLs (`html_url` and `_links[\"html\"]`) will have null values.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - path (String.t): path parameter
  - opts (KeywordList): [optional] Optional parameters
    - :ref (String.t): The name of the commit/branch/tag. Default: the repository’s default branch (usually `master`)
  ## Returns

  {:ok, ExOctocat.Model.ContentTree.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_get_content(Tesla.Env.client(), String.t(), String.t(), String.t(), keyword()) ::
          {:ok, nil}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:ok, ExOctocat.Model.ContentTree.t()}
          | {:error, Tesla.Env.t()}
  def repos_get_content(connection, owner, repo, path, opts \\ []) do
    optional_params = %{
      :ref => :query
    }

    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/contents/#{path}")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.ContentTree{}},
      {404, %ExOctocat.Model.BasicError{}},
      {403, %ExOctocat.Model.BasicError{}},
      {302, false}
    ])
  end

  @doc """
  Get all contributor commit activity
   Returns the `total` number of commits authored by the contributor. In addition, the response includes a Weekly Hash (`weeks` array) with the following information:  *   `w` - Start of the week, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time). *   `a` - Number of additions *   `d` - Number of deletions *   `c` - Number of commits

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, [%ContributorActivity{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_get_contributors_stats(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, nil}
          | {:ok, Map.t()}
          | {:ok, list(ExOctocat.Model.ContributorActivity.t())}
          | {:error, Tesla.Env.t()}
  def repos_get_contributors_stats(connection, owner, repo, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/stats/contributors")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, [%ExOctocat.Model.ContributorActivity{}]},
      {202, false},
      {204, false}
    ])
  end

  @doc """
  Get a deploy key

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - key_id (integer()): key_id parameter
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, ExOctocat.Model.DeployKey.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_get_deploy_key(Tesla.Env.client(), String.t(), String.t(), integer(), keyword()) ::
          {:ok, ExOctocat.Model.DeployKey.t()}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:error, Tesla.Env.t()}
  def repos_get_deploy_key(connection, owner, repo, key_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/keys/#{key_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.DeployKey{}},
      {404, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  Get a deployment

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - deployment_id (integer()): deployment_id parameter
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, ExOctocat.Model.Deployment.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_get_deployment(Tesla.Env.client(), String.t(), String.t(), integer(), keyword()) ::
          {:ok, ExOctocat.Model.Deployment.t()}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:error, Tesla.Env.t()}
  def repos_get_deployment(connection, owner, repo, deployment_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/deployments/#{deployment_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.Deployment{}},
      {404, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  Get a deployment status
  Users with pull access can view a deployment status for a deployment:

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - deployment_id (integer()): deployment_id parameter
  - status_id (integer()):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, ExOctocat.Model.DeploymentStatus.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_get_deployment_status(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok, ExOctocat.Model.DeploymentStatus.t()}
          | {:ok, ExOctocat.Model.InlineResponse415.t()}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:error, Tesla.Env.t()}
  def repos_get_deployment_status(connection, owner, repo, deployment_id, status_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/deployments/#{deployment_id}/statuses/#{status_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.DeploymentStatus{}},
      {404, %ExOctocat.Model.BasicError{}},
      {415, %ExOctocat.Model.InlineResponse415{}}
    ])
  end

  @doc """
  Get an environment
  Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - environment_name (String.t): The name of the environment
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, ExOctocat.Model.Environment.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_get_environment(Tesla.Env.client(), String.t(), String.t(), String.t(), keyword()) ::
          {:ok, ExOctocat.Model.Environment.t()} | {:error, Tesla.Env.t()}
  def repos_get_environment(connection, owner, repo, environment_name, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/environments/#{environment_name}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.Environment{}}
    ])
  end

  @doc """
  Get latest Pages build

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, ExOctocat.Model.PageBuild.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_get_latest_pages_build(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, ExOctocat.Model.PageBuild.t()} | {:error, Tesla.Env.t()}
  def repos_get_latest_pages_build(connection, owner, repo, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/pages/builds/latest")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.PageBuild{}}
    ])
  end

  @doc """
  Get the latest release
  View the latest published full release for the repository.  The latest release is the most recent non-prerelease, non-draft release, sorted by the `created_at` attribute. The `created_at` attribute is the date of the commit used for the release, and not the date when the release was drafted or published.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, ExOctocat.Model.Release.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_get_latest_release(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, ExOctocat.Model.Release.t()} | {:error, Tesla.Env.t()}
  def repos_get_latest_release(connection, owner, repo, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/releases/latest")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.Release{}}
    ])
  end

  @doc """
  Get a GitHub Pages site

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, ExOctocat.Model.Page.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_get_pages(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, ExOctocat.Model.Page.t()}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:error, Tesla.Env.t()}
  def repos_get_pages(connection, owner, repo, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/pages")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.Page{}},
      {404, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  Get GitHub Pages build

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - build_id (integer()):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, ExOctocat.Model.PageBuild.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_get_pages_build(Tesla.Env.client(), String.t(), String.t(), integer(), keyword()) ::
          {:ok, ExOctocat.Model.PageBuild.t()} | {:error, Tesla.Env.t()}
  def repos_get_pages_build(connection, owner, repo, build_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/pages/builds/#{build_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.PageBuild{}}
    ])
  end

  @doc """
  Get a DNS health check for GitHub Pages
  Gets a health check of the DNS settings for the `CNAME` record configured for a repository's GitHub Pages.  The first request to this endpoint returns a `202 Accepted` status and starts an asynchronous background task to get the results for the domain. After the background task completes, subsequent requests to this endpoint return a `200 OK` status with the health check results in the response.  Users must have admin or owner permissions. GitHub Apps must have the `pages:write` and `administration:write` permission to use this endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, ExOctocat.Model.PagesHealthCheck.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_get_pages_health_check(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, nil}
          | {:ok, ExOctocat.Model.PagesHealthCheck.t()}
          | {:ok, Map.t()}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:error, Tesla.Env.t()}
  def repos_get_pages_health_check(connection, owner, repo, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/pages/health")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.PagesHealthCheck{}},
      {202, false},
      {400, false},
      {422, false},
      {404, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  Get the weekly commit count
  Returns the total commit counts for the `owner` and total commit counts in `all`. `all` is everyone combined, including the `owner` in the last 52 weeks. If you'd like to get the commit counts for non-owners, you can subtract `owner` from `all`.  The array order is oldest week (index 0) to most recent week.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, ExOctocat.Model.ParticipationStats.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_get_participation_stats(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, ExOctocat.Model.ParticipationStats.t()}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:error, Tesla.Env.t()}
  def repos_get_participation_stats(connection, owner, repo, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/stats/participation")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.ParticipationStats{}},
      {404, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  Get pull request review protection
  Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - branch (String.t): The name of the branch.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, ExOctocat.Model.ProtectedBranchPullRequestReview.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_get_pull_request_review_protection(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, ExOctocat.Model.ProtectedBranchPullRequestReview.t()}
          | {:error, Tesla.Env.t()}
  def repos_get_pull_request_review_protection(connection, owner, repo, branch, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/branches/#{branch}/protection/required_pull_request_reviews")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.ProtectedBranchPullRequestReview{}}
    ])
  end

  @doc """
  Get the hourly commit count for each day
  Each array contains the day number, hour number, and number of commits:  *   `0-6`: Sunday - Saturday *   `0-23`: Hour of day *   Number of commits  For example, `[2, 14, 25]` indicates that there were 25 total commits, during the 2:00pm hour on Tuesdays. All times are based on the time zone of individual commits.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, [%List{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_get_punch_card_stats(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, nil} | {:ok, list(Integer.t())} | {:error, Tesla.Env.t()}
  def repos_get_punch_card_stats(connection, owner, repo, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/stats/punch_card")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, []},
      {204, false}
    ])
  end

  @doc """
  Get a repository README
  Gets the preferred README for a repository.  READMEs support [custom media types](https://docs.github.com/rest/reference/repos#custom-media-types) for retrieving the raw content or rendered HTML.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :ref (String.t): The name of the commit/branch/tag. Default: the repository’s default branch (usually `master`)
  ## Returns

  {:ok, ExOctocat.Model.ContentFile.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_get_readme(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, ExOctocat.Model.ContentFile.t()}
          | {:ok, ExOctocat.Model.ValidationError.t()}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:error, Tesla.Env.t()}
  def repos_get_readme(connection, owner, repo, opts \\ []) do
    optional_params = %{
      :ref => :query
    }

    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/readme")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.ContentFile{}},
      {404, %ExOctocat.Model.BasicError{}},
      {422, %ExOctocat.Model.ValidationError{}}
    ])
  end

  @doc """
  Get a repository README for a directory
  Gets the README from a repository directory.  READMEs support [custom media types](https://docs.github.com/rest/reference/repos#custom-media-types) for retrieving the raw content or rendered HTML.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - dir (String.t): The alternate path to look for a README file
  - opts (KeywordList): [optional] Optional parameters
    - :ref (String.t): The name of the commit/branch/tag. Default: the repository’s default branch (usually `master`)
  ## Returns

  {:ok, ExOctocat.Model.ContentFile.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_get_readme_in_directory(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, ExOctocat.Model.ContentFile.t()}
          | {:ok, ExOctocat.Model.ValidationError.t()}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:error, Tesla.Env.t()}
  def repos_get_readme_in_directory(connection, owner, repo, dir, opts \\ []) do
    optional_params = %{
      :ref => :query
    }

    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/readme/#{dir}")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.ContentFile{}},
      {404, %ExOctocat.Model.BasicError{}},
      {422, %ExOctocat.Model.ValidationError{}}
    ])
  end

  @doc """
  Get a release
  **Note:** This returns an `upload_url` key corresponding to the endpoint for uploading release assets. This key is a [hypermedia resource](https://docs.github.com/rest/overview/resources-in-the-rest-api#hypermedia).

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - release_id (integer()): release_id parameter
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, ExOctocat.Model.Release.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_get_release(Tesla.Env.client(), String.t(), String.t(), integer(), keyword()) ::
          {:ok, ExOctocat.Model.BasicError.t()}
          | {:ok, ExOctocat.Model.Release.t()}
          | {:error, Tesla.Env.t()}
  def repos_get_release(connection, owner, repo, release_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/releases/#{release_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.Release{}},
      {404, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  Get a release asset
  To download the asset's binary content, set the `Accept` header of the request to [`application/octet-stream`](https://docs.github.com/rest/overview/media-types). The API will either redirect the client to the location, or stream it directly if possible. API clients should handle both a `200` or `302` response.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - asset_id (integer()): asset_id parameter
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, ExOctocat.Model.ReleaseAsset.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_get_release_asset(Tesla.Env.client(), String.t(), String.t(), integer(), keyword()) ::
          {:ok, nil}
          | {:ok, ExOctocat.Model.ReleaseAsset.t()}
          | {:ok, ExOctocat.Model.InlineResponse415.t()}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:error, Tesla.Env.t()}
  def repos_get_release_asset(connection, owner, repo, asset_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/releases/assets/#{asset_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.ReleaseAsset{}},
      {404, %ExOctocat.Model.BasicError{}},
      {415, %ExOctocat.Model.InlineResponse415{}},
      {302, false}
    ])
  end

  @doc """
  Get a release by tag name
  Get a published release with the specified tag.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - tag (String.t): tag parameter
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, ExOctocat.Model.Release.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_get_release_by_tag(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, ExOctocat.Model.BasicError.t()}
          | {:ok, ExOctocat.Model.Release.t()}
          | {:error, Tesla.Env.t()}
  def repos_get_release_by_tag(connection, owner, repo, tag, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/releases/tags/#{tag}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.Release{}},
      {404, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  Get status checks protection
  Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - branch (String.t): The name of the branch.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, ExOctocat.Model.StatusCheckPolicy.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_get_status_checks_protection(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, ExOctocat.Model.BasicError.t()}
          | {:ok, ExOctocat.Model.StatusCheckPolicy.t()}
          | {:error, Tesla.Env.t()}
  def repos_get_status_checks_protection(connection, owner, repo, branch, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/branches/#{branch}/protection/required_status_checks")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.StatusCheckPolicy{}},
      {404, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  Get teams with access to the protected branch
  Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Lists the teams who have push access to this branch. The list includes child teams.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - branch (String.t): The name of the branch.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, [%Team{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_get_teams_with_access_to_protected_branch(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, list(ExOctocat.Model.Team.t())}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:error, Tesla.Env.t()}
  def repos_get_teams_with_access_to_protected_branch(
        connection,
        owner,
        repo,
        branch,
        _opts \\ []
      ) do
    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/branches/#{branch}/protection/restrictions/teams")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, [%ExOctocat.Model.Team{}]},
      {404, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  Get top referral paths
  Get the top 10 popular contents over the last 14 days.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, [%ContentTraffic{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_get_top_paths(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, ExOctocat.Model.BasicError.t()}
          | {:ok, list(ExOctocat.Model.ContentTraffic.t())}
          | {:error, Tesla.Env.t()}
  def repos_get_top_paths(connection, owner, repo, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/traffic/popular/paths")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, [%ExOctocat.Model.ContentTraffic{}]},
      {403, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  Get top referral sources
  Get the top 10 referrers over the last 14 days.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, [%ReferrerTraffic{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_get_top_referrers(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, list(ExOctocat.Model.ReferrerTraffic.t())}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:error, Tesla.Env.t()}
  def repos_get_top_referrers(connection, owner, repo, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/traffic/popular/referrers")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, [%ExOctocat.Model.ReferrerTraffic{}]},
      {403, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  Get users with access to the protected branch
  Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Lists the people who have push access to this branch.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - branch (String.t): The name of the branch.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, [%SimpleUser{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_get_users_with_access_to_protected_branch(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, ExOctocat.Model.BasicError.t()}
          | {:ok, list(ExOctocat.Model.SimpleUser.t())}
          | {:error, Tesla.Env.t()}
  def repos_get_users_with_access_to_protected_branch(
        connection,
        owner,
        repo,
        branch,
        _opts \\ []
      ) do
    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/branches/#{branch}/protection/restrictions/users")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, [%ExOctocat.Model.SimpleUser{}]},
      {404, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  Get page views
  Get the total number of views and breakdown per day or week for the last 14 days. Timestamps are aligned to UTC midnight of the beginning of the day or week. Week begins on Monday.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :per (String.t): Must be one of: `day`, `week`.
  ## Returns

  {:ok, ExOctocat.Model.ViewTraffic.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_get_views(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, ExOctocat.Model.ViewTraffic.t()}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:error, Tesla.Env.t()}
  def repos_get_views(connection, owner, repo, opts \\ []) do
    optional_params = %{
      :per => :query
    }

    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/traffic/views")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.ViewTraffic{}},
      {403, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  Get a repository webhook
  Returns a webhook configured in a repository. To get only the webhook `config` properties, see \"[Get a webhook configuration for a repository](/rest/reference/repos#get-a-webhook-configuration-for-a-repository).\"

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - hook_id (integer()):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, ExOctocat.Model.Hook.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_get_webhook(Tesla.Env.client(), String.t(), String.t(), integer(), keyword()) ::
          {:ok, ExOctocat.Model.Hook.t()}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:error, Tesla.Env.t()}
  def repos_get_webhook(connection, owner, repo, hook_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/hooks/#{hook_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.Hook{}},
      {404, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  Get a webhook configuration for a repository
  Returns the webhook configuration for a repository. To get more information about the webhook, including the `active` state and `events`, use \"[Get a repository webhook](/rest/reference/orgs#get-a-repository-webhook).\"  Access tokens must have the `read:repo_hook` or `repo` scope, and GitHub Apps must have the `repository_hooks:read` permission.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - hook_id (integer()):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, ExOctocat.Model.WebhookConfig.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_get_webhook_config_for_repo(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          integer(),
          keyword()
        ) :: {:ok, ExOctocat.Model.WebhookConfig.t()} | {:error, Tesla.Env.t()}
  def repos_get_webhook_config_for_repo(connection, owner, repo, hook_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/hooks/#{hook_id}/config")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.WebhookConfig{}}
    ])
  end

  @doc """
  Get a delivery for a repository webhook
  Returns a delivery for a webhook configured in a repository.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - hook_id (integer()):
  - delivery_id (integer()):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, ExOctocat.Model.HookDelivery.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_get_webhook_delivery(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok, ExOctocat.Model.HookDelivery.t()}
          | {:ok, ExOctocat.Model.ValidationError.t()}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:error, Tesla.Env.t()}
  def repos_get_webhook_delivery(connection, owner, repo, hook_id, delivery_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/hooks/#{hook_id}/deliveries/#{delivery_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.HookDelivery{}},
      {400, %ExOctocat.Model.BasicError{}},
      {422, %ExOctocat.Model.ValidationError{}}
    ])
  end

  @doc """
  List all autolinks of a repository
  This returns a list of autolinks configured for the given repository.  Information about autolinks are only available to repository administrators.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :page (integer()): Page number of the results to fetch.
  ## Returns

  {:ok, [%Autolink{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_list_autolinks(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, list(ExOctocat.Model.Autolink.t())} | {:error, Tesla.Env.t()}
  def repos_list_autolinks(connection, owner, repo, opts \\ []) do
    optional_params = %{
      :page => :query
    }

    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/autolinks")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, [%ExOctocat.Model.Autolink{}]}
    ])
  end

  @doc """
  List branches

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :protected (boolean()): Setting to `true` returns only protected branches. When set to `false`, only unprotected branches are returned. Omitting this parameter returns all branches.
    - :per_page (integer()): Results per page (max 100)
    - :page (integer()): Page number of the results to fetch.
  ## Returns

  {:ok, [%ShortBranch{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_list_branches(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, list(ExOctocat.Model.ShortBranch.t())}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:error, Tesla.Env.t()}
  def repos_list_branches(connection, owner, repo, opts \\ []) do
    optional_params = %{
      :protected => :query,
      :per_page => :query,
      :page => :query
    }

    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/branches")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, [%ExOctocat.Model.ShortBranch{}]},
      {404, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  List branches for HEAD commit
  Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Returns all branches where the given commit SHA is the HEAD, or latest commit for the branch.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - commit_sha (String.t): commit_sha parameter
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, [%BranchShort{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_list_branches_for_head_commit(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, ExOctocat.Model.InlineResponse415.t()}
          | {:ok, ExOctocat.Model.ValidationError.t()}
          | {:ok, list(ExOctocat.Model.BranchShort.t())}
          | {:error, Tesla.Env.t()}
  def repos_list_branches_for_head_commit(connection, owner, repo, commit_sha, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/commits/#{commit_sha}/branches-where-head")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, [%ExOctocat.Model.BranchShort{}]},
      {415, %ExOctocat.Model.InlineResponse415{}},
      {422, %ExOctocat.Model.ValidationError{}}
    ])
  end

  @doc """
  List repository collaborators
  For organization-owned repositories, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners.  Team members will include the members of child teams.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :affiliation (String.t): Filter collaborators returned by their affiliation. Can be one of:   \\* `outside`: All outside collaborators of an organization-owned repository.   \\* `direct`: All collaborators with permissions to an organization-owned repository, regardless of organization membership status.   \\* `all`: All collaborators the authenticated user can see.
    - :per_page (integer()): Results per page (max 100)
    - :page (integer()): Page number of the results to fetch.
  ## Returns

  {:ok, [%Collaborator{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_list_collaborators(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, list(ExOctocat.Model.Collaborator.t())}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:error, Tesla.Env.t()}
  def repos_list_collaborators(connection, owner, repo, opts \\ []) do
    optional_params = %{
      :affiliation => :query,
      :per_page => :query,
      :page => :query
    }

    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/collaborators")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, [%ExOctocat.Model.Collaborator{}]},
      {404, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  List commit comments
  Use the `:commit_sha` to specify the commit that will have its comments listed.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - commit_sha (String.t): commit_sha parameter
  - opts (KeywordList): [optional] Optional parameters
    - :per_page (integer()): Results per page (max 100)
    - :page (integer()): Page number of the results to fetch.
  ## Returns

  {:ok, [%CommitComment{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_list_comments_for_commit(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, list(ExOctocat.Model.CommitComment.t())} | {:error, Tesla.Env.t()}
  def repos_list_comments_for_commit(connection, owner, repo, commit_sha, opts \\ []) do
    optional_params = %{
      :per_page => :query,
      :page => :query
    }

    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/commits/#{commit_sha}/comments")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, [%ExOctocat.Model.CommitComment{}]}
    ])
  end

  @doc """
  List commit comments for a repository
  Commit Comments use [these custom media types](https://docs.github.com/rest/reference/repos#custom-media-types). You can read more about the use of media types in the API [here](https://docs.github.com/rest/overview/media-types/).  Comments are ordered by ascending ID.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :per_page (integer()): Results per page (max 100)
    - :page (integer()): Page number of the results to fetch.
  ## Returns

  {:ok, [%CommitComment{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_list_commit_comments_for_repo(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, list(ExOctocat.Model.CommitComment.t())} | {:error, Tesla.Env.t()}
  def repos_list_commit_comments_for_repo(connection, owner, repo, opts \\ []) do
    optional_params = %{
      :per_page => :query,
      :page => :query
    }

    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/comments")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, [%ExOctocat.Model.CommitComment{}]}
    ])
  end

  @doc """
  List commit statuses for a reference
  Users with pull access in a repository can view commit statuses for a given ref. The ref can be a SHA, a branch name, or a tag name. Statuses are returned in reverse chronological order. The first status in the list will be the latest one.  This resource is also available via a legacy route: `GET /repos/:owner/:repo/statuses/:ref`.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - ref (String.t): ref parameter
  - opts (KeywordList): [optional] Optional parameters
    - :per_page (integer()): Results per page (max 100)
    - :page (integer()): Page number of the results to fetch.
  ## Returns

  {:ok, [%Status{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_list_commit_statuses_for_ref(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, list(ExOctocat.Model.Status.t())}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:error, Tesla.Env.t()}
  def repos_list_commit_statuses_for_ref(connection, owner, repo, ref, opts \\ []) do
    optional_params = %{
      :per_page => :query,
      :page => :query
    }

    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/commits/#{ref}/statuses")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, [%ExOctocat.Model.Status{}]},
      {301, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  List commits
  **Signature verification object**  The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:  | Name | Type | Description | | ---- | ---- | ----------- | | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. | | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. | | `signature` | `string` | The signature that was extracted from the commit. | | `payload` | `string` | The value that was signed. |  These are the possible values for `reason` in the `verification` object:  | Value | Description | | ----- | ----------- | | `expired_key` | The key that made the signature is expired. | | `not_signing_key` | The \"signing\" flag is not among the usage flags in the GPG key that made the signature. | | `gpgverify_error` | There was an error communicating with the signature verification service. | | `gpgverify_unavailable` | The signature verification service is currently unavailable. | | `unsigned` | The object does not include a signature. | | `unknown_signature_type` | A non-PGP signature was found in the commit. | | `no_user` | No user was associated with the `committer` email address in the commit. | | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. | | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. | | `unknown_key` | The key that made the signature has not been registered with any user's account. | | `malformed_signature` | There was an error parsing the signature. | | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. | | `valid` | None of the above errors applied, so the signature is considered to be verified. |

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :sha (String.t): SHA or branch to start listing commits from. Default: the repository’s default branch (usually `master`).
    - :path (String.t): Only commits containing this file path will be returned.
    - :author (String.t): GitHub login or email address by which to filter by commit author.
    - :since (DateTime.t): Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
    - :until (DateTime.t): Only commits before this date will be returned. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
    - :per_page (integer()): Results per page (max 100)
    - :page (integer()): Page number of the results to fetch.
  ## Returns

  {:ok, [%Commit{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_list_commits(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, list(ExOctocat.Model.Commit.t())}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:error, Tesla.Env.t()}
  def repos_list_commits(connection, owner, repo, opts \\ []) do
    optional_params = %{
      :sha => :query,
      :path => :query,
      :author => :query,
      :since => :query,
      :until => :query,
      :per_page => :query,
      :page => :query
    }

    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/commits")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, [%ExOctocat.Model.Commit{}]},
      {500, %ExOctocat.Model.BasicError{}},
      {400, %ExOctocat.Model.BasicError{}},
      {404, %ExOctocat.Model.BasicError{}},
      {409, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  List repository contributors
  Lists contributors to the specified repository and sorts them by the number of commits per contributor in descending order. This endpoint may return information that is a few hours old because the GitHub REST API v3 caches contributor data to improve performance.  GitHub identifies contributors by author email address. This endpoint groups contribution counts by GitHub user, which includes all associated email addresses. To improve performance, only the first 500 author email addresses in the repository link to GitHub users. The rest will appear as anonymous contributors without associated GitHub user information.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :anon (String.t): Set to `1` or `true` to include anonymous contributors in results.
    - :per_page (integer()): Results per page (max 100)
    - :page (integer()): Page number of the results to fetch.
  ## Returns

  {:ok, [%Contributor{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_list_contributors(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, nil}
          | {:ok, list(ExOctocat.Model.Contributor.t())}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:error, Tesla.Env.t()}
  def repos_list_contributors(connection, owner, repo, opts \\ []) do
    optional_params = %{
      :anon => :query,
      :per_page => :query,
      :page => :query
    }

    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/contributors")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, [%ExOctocat.Model.Contributor{}]},
      {204, false},
      {403, %ExOctocat.Model.BasicError{}},
      {404, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  List deploy keys

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :per_page (integer()): Results per page (max 100)
    - :page (integer()): Page number of the results to fetch.
  ## Returns

  {:ok, [%DeployKey{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_list_deploy_keys(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, list(ExOctocat.Model.DeployKey.t())} | {:error, Tesla.Env.t()}
  def repos_list_deploy_keys(connection, owner, repo, opts \\ []) do
    optional_params = %{
      :per_page => :query,
      :page => :query
    }

    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/keys")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, [%ExOctocat.Model.DeployKey{}]}
    ])
  end

  @doc """
  List deployment statuses
  Users with pull access can view deployment statuses for a deployment:

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - deployment_id (integer()): deployment_id parameter
  - opts (KeywordList): [optional] Optional parameters
    - :per_page (integer()): Results per page (max 100)
    - :page (integer()): Page number of the results to fetch.
  ## Returns

  {:ok, [%DeploymentStatus{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_list_deployment_statuses(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          integer(),
          keyword()
        ) ::
          {:ok, list(ExOctocat.Model.DeploymentStatus.t())}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:error, Tesla.Env.t()}
  def repos_list_deployment_statuses(connection, owner, repo, deployment_id, opts \\ []) do
    optional_params = %{
      :per_page => :query,
      :page => :query
    }

    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/deployments/#{deployment_id}/statuses")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, [%ExOctocat.Model.DeploymentStatus{}]},
      {404, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  List deployments
  Simple filtering of deployments is available via query parameters:

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :sha (String.t): The SHA recorded at creation time.
    - :ref (String.t): The name of the ref. This can be a branch, tag, or SHA.
    - :task (String.t): The name of the task for the deployment (e.g., `deploy` or `deploy:migrations`).
    - :environment (String.t): The name of the environment that was deployed to (e.g., `staging` or `production`).
    - :per_page (integer()): Results per page (max 100)
    - :page (integer()): Page number of the results to fetch.
  ## Returns

  {:ok, [%Deployment{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_list_deployments(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, list(ExOctocat.Model.Deployment.t())} | {:error, Tesla.Env.t()}
  def repos_list_deployments(connection, owner, repo, opts \\ []) do
    optional_params = %{
      :sha => :query,
      :ref => :query,
      :task => :query,
      :environment => :query,
      :per_page => :query,
      :page => :query
    }

    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/deployments")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, [%ExOctocat.Model.Deployment{}]}
    ])
  end

  @doc """
  List repositories for the authenticated user
  Lists repositories that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access.  The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :visibility (String.t): Can be one of `all`, `public`, or `private`. Note: For GitHub AE, can be one of `all`, `internal`, or `private`.
    - :affiliation (String.t): Comma-separated list of values. Can include:   \\* `owner`: Repositories that are owned by the authenticated user.   \\* `collaborator`: Repositories that the user has been added to as a collaborator.   \\* `organization_member`: Repositories that the user has access to through being a member of an organization. This includes every repository on every team that the user is on.
    - :type (String.t): Can be one of `all`, `owner`, `public`, `private`, `member`. Note: For GitHub AE, can be one of `all`, `owner`, `internal`, `private`, `member`. Default: `all`      Will cause a `422` error if used in the same request as **visibility** or **affiliation**. Will cause a `422` error if used in the same request as **visibility** or **affiliation**.
    - :sort (String.t): Can be one of `created`, `updated`, `pushed`, `full_name`.
    - :direction (String.t): Can be one of `asc` or `desc`. Default: `asc` when using `full_name`, otherwise `desc`
    - :per_page (integer()): Results per page (max 100)
    - :page (integer()): Page number of the results to fetch.
    - :since (DateTime.t): Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
    - :before (DateTime.t): Only show notifications updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
  ## Returns

  {:ok, [%Repository{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_list_for_authenticated_user(Tesla.Env.client(), keyword()) ::
          {:ok, nil}
          | {:ok, list(ExOctocat.Model.Repository.t())}
          | {:ok, ExOctocat.Model.ValidationError.t()}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:error, Tesla.Env.t()}
  def repos_list_for_authenticated_user(connection, opts \\ []) do
    optional_params = %{
      :visibility => :query,
      :affiliation => :query,
      :type => :query,
      :sort => :query,
      :direction => :query,
      :per_page => :query,
      :page => :query,
      :since => :query,
      :before => :query
    }

    %{}
    |> method(:get)
    |> url("/user/repos")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, [%ExOctocat.Model.Repository{}]},
      {422, %ExOctocat.Model.ValidationError{}},
      {304, false},
      {403, %ExOctocat.Model.BasicError{}},
      {401, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  List organization repositories
  Lists repositories for the specified organization.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :type (String.t): Specifies the types of repositories you want returned. Can be one of `all`, `public`, `private`, `forks`, `sources`, `member`, `internal`. Note: For GitHub AE, can be one of `all`, `private`, `forks`, `sources`, `member`, `internal`. Default: `all`. If your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, `type` can also be `internal`. However, the `internal` value is not yet supported when a GitHub App calls this API with an installation access token.
    - :sort (String.t): Can be one of `created`, `updated`, `pushed`, `full_name`.
    - :direction (String.t): Can be one of `asc` or `desc`. Default: when using `full_name`: `asc`, otherwise `desc`
    - :per_page (integer()): Results per page (max 100)
    - :page (integer()): Page number of the results to fetch.
  ## Returns

  {:ok, [%MinimalRepository{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_list_for_org(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, list(ExOctocat.Model.MinimalRepository.t())} | {:error, Tesla.Env.t()}
  def repos_list_for_org(connection, org, opts \\ []) do
    optional_params = %{
      :type => :query,
      :sort => :query,
      :direction => :query,
      :per_page => :query,
      :page => :query
    }

    %{}
    |> method(:get)
    |> url("/orgs/#{org}/repos")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, [%ExOctocat.Model.MinimalRepository{}]}
    ])
  end

  @doc """
  List repositories for a user
  Lists public repositories for the specified user. Note: For GitHub AE, this endpoint will list internal repositories for the specified user.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - username (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :type (String.t): Can be one of `all`, `owner`, `member`.
    - :sort (String.t): Can be one of `created`, `updated`, `pushed`, `full_name`.
    - :direction (String.t): Can be one of `asc` or `desc`. Default: `asc` when using `full_name`, otherwise `desc`
    - :per_page (integer()): Results per page (max 100)
    - :page (integer()): Page number of the results to fetch.
  ## Returns

  {:ok, [%MinimalRepository{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_list_for_user(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, list(ExOctocat.Model.MinimalRepository.t())} | {:error, Tesla.Env.t()}
  def repos_list_for_user(connection, username, opts \\ []) do
    optional_params = %{
      :type => :query,
      :sort => :query,
      :direction => :query,
      :per_page => :query,
      :page => :query
    }

    %{}
    |> method(:get)
    |> url("/users/#{username}/repos")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, [%ExOctocat.Model.MinimalRepository{}]}
    ])
  end

  @doc """
  List forks

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :sort (String.t): The sort order. Can be either `newest`, `oldest`, or `stargazers`.
    - :per_page (integer()): Results per page (max 100)
    - :page (integer()): Page number of the results to fetch.
  ## Returns

  {:ok, [%MinimalRepository{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_list_forks(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, ExOctocat.Model.BasicError.t()}
          | {:ok, list(ExOctocat.Model.MinimalRepository.t())}
          | {:error, Tesla.Env.t()}
  def repos_list_forks(connection, owner, repo, opts \\ []) do
    optional_params = %{
      :sort => :query,
      :per_page => :query,
      :page => :query
    }

    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/forks")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, [%ExOctocat.Model.MinimalRepository{}]},
      {400, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  List repository invitations
  When authenticating as a user with admin rights to a repository, this endpoint will list all currently open repository invitations.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :per_page (integer()): Results per page (max 100)
    - :page (integer()): Page number of the results to fetch.
  ## Returns

  {:ok, [%RepositoryInvitation{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_list_invitations(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, list(ExOctocat.Model.RepositoryInvitation.t())} | {:error, Tesla.Env.t()}
  def repos_list_invitations(connection, owner, repo, opts \\ []) do
    optional_params = %{
      :per_page => :query,
      :page => :query
    }

    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/invitations")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, [%ExOctocat.Model.RepositoryInvitation{}]}
    ])
  end

  @doc """
  List repository invitations for the authenticated user
  When authenticating as a user, this endpoint will list all currently open repository invitations for that user.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :per_page (integer()): Results per page (max 100)
    - :page (integer()): Page number of the results to fetch.
  ## Returns

  {:ok, [%RepositoryInvitation{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_list_invitations_for_authenticated_user(Tesla.Env.client(), keyword()) ::
          {:ok, nil}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:ok, list(ExOctocat.Model.RepositoryInvitation.t())}
          | {:error, Tesla.Env.t()}
  def repos_list_invitations_for_authenticated_user(connection, opts \\ []) do
    optional_params = %{
      :per_page => :query,
      :page => :query
    }

    %{}
    |> method(:get)
    |> url("/user/repository_invitations")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, [%ExOctocat.Model.RepositoryInvitation{}]},
      {304, false},
      {404, %ExOctocat.Model.BasicError{}},
      {403, %ExOctocat.Model.BasicError{}},
      {401, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  List repository languages
  Lists languages for the specified repository. The value shown for each language is the number of bytes of code written in that language.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %{}} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_list_languages(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, map()} | {:error, Tesla.Env.t()}
  def repos_list_languages(connection, owner, repo, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/languages")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %{}}
    ])
  end

  @doc """
  List GitHub Pages builds

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :per_page (integer()): Results per page (max 100)
    - :page (integer()): Page number of the results to fetch.
  ## Returns

  {:ok, [%PageBuild{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_list_pages_builds(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, list(ExOctocat.Model.PageBuild.t())} | {:error, Tesla.Env.t()}
  def repos_list_pages_builds(connection, owner, repo, opts \\ []) do
    optional_params = %{
      :per_page => :query,
      :page => :query
    }

    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/pages/builds")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, [%ExOctocat.Model.PageBuild{}]}
    ])
  end

  @doc """
  List public repositories
  Lists all public repositories in the order that they were created.  Note: - For GitHub Enterprise Server, this endpoint will only list repositories available to all users on the enterprise. - Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header) to get the URL for the next page of repositories.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :since (integer()): A repository ID. Only return repositories with an ID greater than this ID.
  ## Returns

  {:ok, [%MinimalRepository{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_list_public(Tesla.Env.client(), keyword()) ::
          {:ok, nil}
          | {:ok, ExOctocat.Model.ValidationError.t()}
          | {:ok, list(ExOctocat.Model.MinimalRepository.t())}
          | {:error, Tesla.Env.t()}
  def repos_list_public(connection, opts \\ []) do
    optional_params = %{
      :since => :query
    }

    %{}
    |> method(:get)
    |> url("/repositories")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, [%ExOctocat.Model.MinimalRepository{}]},
      {422, %ExOctocat.Model.ValidationError{}},
      {304, false}
    ])
  end

  @doc """
  List pull requests associated with a commit
  Lists the merged pull request that introduced the commit to the repository. If the commit is not present in the default branch, additionally returns open pull requests associated with the commit. The results may include open and closed pull requests. Additional preview headers may be required to see certain details for associated pull requests, such as whether a pull request is in a draft state. For more information about previews that might affect this endpoint, see the [List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests) endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - commit_sha (String.t): commit_sha parameter
  - opts (KeywordList): [optional] Optional parameters
    - :per_page (integer()): Results per page (max 100)
    - :page (integer()): Page number of the results to fetch.
  ## Returns

  {:ok, [%PullRequestSimple{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_list_pull_requests_associated_with_commit(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, ExOctocat.Model.InlineResponse415.t()}
          | {:ok, list(ExOctocat.Model.PullRequestSimple.t())}
          | {:error, Tesla.Env.t()}
  def repos_list_pull_requests_associated_with_commit(
        connection,
        owner,
        repo,
        commit_sha,
        opts \\ []
      ) do
    optional_params = %{
      :per_page => :query,
      :page => :query
    }

    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/commits/#{commit_sha}/pulls")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, [%ExOctocat.Model.PullRequestSimple{}]},
      {415, %ExOctocat.Model.InlineResponse415{}}
    ])
  end

  @doc """
  List release assets

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - release_id (integer()): release_id parameter
  - opts (KeywordList): [optional] Optional parameters
    - :per_page (integer()): Results per page (max 100)
    - :page (integer()): Page number of the results to fetch.
  ## Returns

  {:ok, [%ReleaseAsset{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_list_release_assets(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          integer(),
          keyword()
        ) :: {:ok, list(ExOctocat.Model.ReleaseAsset.t())} | {:error, Tesla.Env.t()}
  def repos_list_release_assets(connection, owner, repo, release_id, opts \\ []) do
    optional_params = %{
      :per_page => :query,
      :page => :query
    }

    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/releases/#{release_id}/assets")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, [%ExOctocat.Model.ReleaseAsset{}]}
    ])
  end

  @doc """
  List releases
  This returns a list of releases, which does not include regular Git tags that have not been associated with a release. To get a list of Git tags, use the [Repository Tags API](https://docs.github.com/rest/reference/repos#list-repository-tags).  Information about published releases are available to everyone. Only users with push access will receive listings for draft releases.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :per_page (integer()): Results per page (max 100)
    - :page (integer()): Page number of the results to fetch.
  ## Returns

  {:ok, [%Release{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_list_releases(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, list(ExOctocat.Model.Release.t())}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:error, Tesla.Env.t()}
  def repos_list_releases(connection, owner, repo, opts \\ []) do
    optional_params = %{
      :per_page => :query,
      :page => :query
    }

    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/releases")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, [%ExOctocat.Model.Release{}]},
      {404, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  List repository tags

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :per_page (integer()): Results per page (max 100)
    - :page (integer()): Page number of the results to fetch.
  ## Returns

  {:ok, [%Tag{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_list_tags(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, list(ExOctocat.Model.Tag.t())} | {:error, Tesla.Env.t()}
  def repos_list_tags(connection, owner, repo, opts \\ []) do
    optional_params = %{
      :per_page => :query,
      :page => :query
    }

    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/tags")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, [%ExOctocat.Model.Tag{}]}
    ])
  end

  @doc """
  List repository teams

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :per_page (integer()): Results per page (max 100)
    - :page (integer()): Page number of the results to fetch.
  ## Returns

  {:ok, [%Team{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_list_teams(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, list(ExOctocat.Model.Team.t())} | {:error, Tesla.Env.t()}
  def repos_list_teams(connection, owner, repo, opts \\ []) do
    optional_params = %{
      :per_page => :query,
      :page => :query
    }

    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/teams")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, [%ExOctocat.Model.Team{}]}
    ])
  end

  @doc """
  List deliveries for a repository webhook
  Returns a list of webhook deliveries for a webhook configured in a repository.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - hook_id (integer()):
  - opts (KeywordList): [optional] Optional parameters
    - :per_page (integer()): Results per page (max 100)
    - :cursor (String.t): Used for pagination: the starting delivery from which the page of deliveries is fetched. Refer to the `link` header for the next and previous page cursors.
  ## Returns

  {:ok, [%HookDeliveryItem{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_list_webhook_deliveries(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          integer(),
          keyword()
        ) ::
          {:ok, ExOctocat.Model.ValidationError.t()}
          | {:ok, list(ExOctocat.Model.HookDeliveryItem.t())}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:error, Tesla.Env.t()}
  def repos_list_webhook_deliveries(connection, owner, repo, hook_id, opts \\ []) do
    optional_params = %{
      :per_page => :query,
      :cursor => :query
    }

    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/hooks/#{hook_id}/deliveries")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, [%ExOctocat.Model.HookDeliveryItem{}]},
      {400, %ExOctocat.Model.BasicError{}},
      {422, %ExOctocat.Model.ValidationError{}}
    ])
  end

  @doc """
  List repository webhooks

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :per_page (integer()): Results per page (max 100)
    - :page (integer()): Page number of the results to fetch.
  ## Returns

  {:ok, [%Hook{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_list_webhooks(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, ExOctocat.Model.BasicError.t()}
          | {:ok, list(ExOctocat.Model.Hook.t())}
          | {:error, Tesla.Env.t()}
  def repos_list_webhooks(connection, owner, repo, opts \\ []) do
    optional_params = %{
      :per_page => :query,
      :page => :query
    }

    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/hooks")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, [%ExOctocat.Model.Hook{}]},
      {404, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  Merge a branch

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject111):
  ## Returns

  {:ok, ExOctocat.Model.Commit.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_merge(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, ExOctocat.Model.Commit.t()}
          | {:ok, nil}
          | {:ok, ExOctocat.Model.ValidationError.t()}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:error, Tesla.Env.t()}
  def repos_merge(connection, owner, repo, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:post)
    |> url("/repos/#{owner}/#{repo}/merges")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {201, %ExOctocat.Model.Commit{}},
      {204, false},
      {404, false},
      {409, false},
      {403, %ExOctocat.Model.BasicError{}},
      {422, %ExOctocat.Model.ValidationError{}}
    ])
  end

  @doc """
  Ping a repository webhook
  This will trigger a [ping event](https://docs.github.com/webhooks/#ping-event) to be sent to the hook.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - hook_id (integer()):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_ping_webhook(Tesla.Env.client(), String.t(), String.t(), integer(), keyword()) ::
          {:ok, nil} | {:ok, ExOctocat.Model.BasicError.t()} | {:error, Tesla.Env.t()}
  def repos_ping_webhook(connection, owner, repo, hook_id, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/repos/#{owner}/#{repo}/hooks/#{hook_id}/pings")
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false},
      {404, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  Redeliver a delivery for a repository webhook
  Redeliver a webhook delivery for a webhook configured in a repository.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - hook_id (integer()):
  - delivery_id (integer()):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, map()} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_redeliver_webhook_delivery(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok, Map.t()}
          | {:ok, ExOctocat.Model.ValidationError.t()}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:error, Tesla.Env.t()}
  def repos_redeliver_webhook_delivery(connection, owner, repo, hook_id, delivery_id, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/repos/#{owner}/#{repo}/hooks/#{hook_id}/deliveries/#{delivery_id}/attempts")
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {202, false},
      {400, %ExOctocat.Model.BasicError{}},
      {422, %ExOctocat.Model.ValidationError{}}
    ])
  end

  @doc """
  Remove app access restrictions
  Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Removes the ability of an app to push to this branch. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.  | Type    | Description                                                                                                                                                | | ------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- | | `array` | The GitHub Apps that have push access to this branch. Use the app's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - branch (String.t): The name of the branch.
  - opts (KeywordList): [optional] Optional parameters
    - :body (UNKNOWN_BASE_TYPE):
  ## Returns

  {:ok, [%Integration{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_remove_app_access_restrictions(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, ExOctocat.Model.ValidationError.t()}
          | {:ok, list(ExOctocat.Model.Integration.t())}
          | {:error, Tesla.Env.t()}
  def repos_remove_app_access_restrictions(connection, owner, repo, branch, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:delete)
    |> url("/repos/#{owner}/#{repo}/branches/#{branch}/protection/restrictions/apps")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, [%ExOctocat.Model.Integration{}]},
      {422, %ExOctocat.Model.ValidationError{}}
    ])
  end

  @doc """
  Remove a repository collaborator

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - username (String.t):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_remove_collaborator(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, nil} | {:error, Tesla.Env.t()}
  def repos_remove_collaborator(connection, owner, repo, username, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/repos/#{owner}/#{repo}/collaborators/#{username}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false}
    ])
  end

  @doc """
  Remove status check contexts
  Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - branch (String.t): The name of the branch.
  - opts (KeywordList): [optional] Optional parameters
    - :body (UNKNOWN_BASE_TYPE):
  ## Returns

  {:ok, [%String{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_remove_status_check_contexts(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, list(String.t())}
          | {:ok, ExOctocat.Model.ValidationError.t()}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:error, Tesla.Env.t()}
  def repos_remove_status_check_contexts(connection, owner, repo, branch, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:delete)
    |> url(
      "/repos/#{owner}/#{repo}/branches/#{branch}/protection/required_status_checks/contexts"
    )
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, []},
      {404, %ExOctocat.Model.BasicError{}},
      {422, %ExOctocat.Model.ValidationError{}}
    ])
  end

  @doc """
  Remove status check protection
  Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - branch (String.t): The name of the branch.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_remove_status_check_protection(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, nil} | {:error, Tesla.Env.t()}
  def repos_remove_status_check_protection(connection, owner, repo, branch, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/repos/#{owner}/#{repo}/branches/#{branch}/protection/required_status_checks")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false}
    ])
  end

  @doc """
  Remove team access restrictions
  Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Removes the ability of a team to push to this branch. You can also remove push access for child teams.  | Type    | Description                                                                                                                                         | | ------- | --------------------------------------------------------------------------------------------------------------------------------------------------- | | `array` | Teams that should no longer have push access. Use the team's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - branch (String.t): The name of the branch.
  - opts (KeywordList): [optional] Optional parameters
    - :body (UNKNOWN_BASE_TYPE):
  ## Returns

  {:ok, [%Team{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_remove_team_access_restrictions(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, list(ExOctocat.Model.Team.t())}
          | {:ok, ExOctocat.Model.ValidationError.t()}
          | {:error, Tesla.Env.t()}
  def repos_remove_team_access_restrictions(connection, owner, repo, branch, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:delete)
    |> url("/repos/#{owner}/#{repo}/branches/#{branch}/protection/restrictions/teams")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, [%ExOctocat.Model.Team{}]},
      {422, %ExOctocat.Model.ValidationError{}}
    ])
  end

  @doc """
  Remove user access restrictions
  Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Removes the ability of a user to push to this branch.  | Type    | Description                                                                                                                                   | | ------- | --------------------------------------------------------------------------------------------------------------------------------------------- | | `array` | Usernames of the people who should no longer have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - branch (String.t): The name of the branch.
  - opts (KeywordList): [optional] Optional parameters
    - :body (UNKNOWN_BASE_TYPE):
  ## Returns

  {:ok, [%SimpleUser{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_remove_user_access_restrictions(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, ExOctocat.Model.ValidationError.t()}
          | {:ok, list(ExOctocat.Model.SimpleUser.t())}
          | {:error, Tesla.Env.t()}
  def repos_remove_user_access_restrictions(connection, owner, repo, branch, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:delete)
    |> url("/repos/#{owner}/#{repo}/branches/#{branch}/protection/restrictions/users")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, [%ExOctocat.Model.SimpleUser{}]},
      {422, %ExOctocat.Model.ValidationError{}}
    ])
  end

  @doc """
  Rename a branch
  Renames a branch in a repository.  **Note:** Although the API responds immediately, the branch rename process might take some extra time to complete in the background. You won't be able to push to the old branch name while the rename process is in progress. For more information, see \"[Renaming a branch](https://docs.github.com/github/administering-a-repository/renaming-a-branch)\".  The permissions required to use this endpoint depends on whether you are renaming the default branch.  To rename a non-default branch:  * Users must have push access. * GitHub Apps must have the `contents:write` repository permission.  To rename the default branch:  * Users must have admin or owner permissions. * GitHub Apps must have the `administration:write` repository permission.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - branch (String.t): The name of the branch.
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject68):
  ## Returns

  {:ok, ExOctocat.Model.BranchWithProtection.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_rename_branch(Tesla.Env.client(), String.t(), String.t(), String.t(), keyword()) ::
          {:ok, ExOctocat.Model.ValidationError.t()}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:ok, ExOctocat.Model.BranchWithProtection.t()}
          | {:error, Tesla.Env.t()}
  def repos_rename_branch(connection, owner, repo, branch, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:post)
    |> url("/repos/#{owner}/#{repo}/branches/#{branch}/rename")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {201, %ExOctocat.Model.BranchWithProtection{}},
      {403, %ExOctocat.Model.BasicError{}},
      {404, %ExOctocat.Model.BasicError{}},
      {422, %ExOctocat.Model.ValidationError{}}
    ])
  end

  @doc """
  Replace all repository topics

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject137):
  ## Returns

  {:ok, ExOctocat.Model.Topic.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_replace_all_topics(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, ExOctocat.Model.Topic.t()}
          | {:ok, ExOctocat.Model.ValidationErrorSimple.t()}
          | {:ok, ExOctocat.Model.InlineResponse415.t()}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:error, Tesla.Env.t()}
  def repos_replace_all_topics(connection, owner, repo, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:put)
    |> url("/repos/#{owner}/#{repo}/topics")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.Topic{}},
      {415, %ExOctocat.Model.InlineResponse415{}},
      {404, %ExOctocat.Model.BasicError{}},
      {422, %ExOctocat.Model.ValidationErrorSimple{}}
    ])
  end

  @doc """
  Request a GitHub Pages build
  You can request that your site be built from the latest revision on the default branch. This has the same effect as pushing a commit to your default branch, but does not require an additional commit. Manually triggering page builds can be helpful when diagnosing build warnings and failures.  Build requests are limited to one concurrent build per repository and one concurrent build per requester. If you request a build while another is still in progress, the second request will be queued until the first completes.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, ExOctocat.Model.PageBuildStatus.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_request_pages_build(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, ExOctocat.Model.PageBuildStatus.t()} | {:error, Tesla.Env.t()}
  def repos_request_pages_build(connection, owner, repo, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/repos/#{owner}/#{repo}/pages/builds")
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {201, %ExOctocat.Model.PageBuildStatus{}}
    ])
  end

  @doc """
  Set admin branch protection
  Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Adding admin enforcement requires admin or owner permissions to the repository and branch protection to be enabled.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - branch (String.t): The name of the branch.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, ExOctocat.Model.ProtectedBranchAdminEnforced.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_set_admin_branch_protection(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, ExOctocat.Model.ProtectedBranchAdminEnforced.t()} | {:error, Tesla.Env.t()}
  def repos_set_admin_branch_protection(connection, owner, repo, branch, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/repos/#{owner}/#{repo}/branches/#{branch}/protection/enforce_admins")
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.ProtectedBranchAdminEnforced{}}
    ])
  end

  @doc """
  Set app access restrictions
  Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Replaces the list of apps that have push access to this branch. This removes all apps that previously had push access and grants push access to the new list of apps. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.  | Type    | Description                                                                                                                                                | | ------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- | | `array` | The GitHub Apps that have push access to this branch. Use the app's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - branch (String.t): The name of the branch.
  - opts (KeywordList): [optional] Optional parameters
    - :body (UNKNOWN_BASE_TYPE):
  ## Returns

  {:ok, [%Integration{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_set_app_access_restrictions(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, ExOctocat.Model.ValidationError.t()}
          | {:ok, list(ExOctocat.Model.Integration.t())}
          | {:error, Tesla.Env.t()}
  def repos_set_app_access_restrictions(connection, owner, repo, branch, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:put)
    |> url("/repos/#{owner}/#{repo}/branches/#{branch}/protection/restrictions/apps")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, [%ExOctocat.Model.Integration{}]},
      {422, %ExOctocat.Model.ValidationError{}}
    ])
  end

  @doc """
  Set status check contexts
  Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - branch (String.t): The name of the branch.
  - opts (KeywordList): [optional] Optional parameters
    - :body (UNKNOWN_BASE_TYPE):
  ## Returns

  {:ok, [%String{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_set_status_check_contexts(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, list(String.t())}
          | {:ok, ExOctocat.Model.ValidationError.t()}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:error, Tesla.Env.t()}
  def repos_set_status_check_contexts(connection, owner, repo, branch, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:put)
    |> url(
      "/repos/#{owner}/#{repo}/branches/#{branch}/protection/required_status_checks/contexts"
    )
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, []},
      {422, %ExOctocat.Model.ValidationError{}},
      {404, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  Set team access restrictions
  Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Replaces the list of teams that have push access to this branch. This removes all teams that previously had push access and grants push access to the new list of teams. Team restrictions include child teams.  | Type    | Description                                                                                                                                | | ------- | ------------------------------------------------------------------------------------------------------------------------------------------ | | `array` | The teams that can have push access. Use the team's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - branch (String.t): The name of the branch.
  - opts (KeywordList): [optional] Optional parameters
    - :body (UNKNOWN_BASE_TYPE):
  ## Returns

  {:ok, [%Team{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_set_team_access_restrictions(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, list(ExOctocat.Model.Team.t())}
          | {:ok, ExOctocat.Model.ValidationError.t()}
          | {:error, Tesla.Env.t()}
  def repos_set_team_access_restrictions(connection, owner, repo, branch, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:put)
    |> url("/repos/#{owner}/#{repo}/branches/#{branch}/protection/restrictions/teams")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, [%ExOctocat.Model.Team{}]},
      {422, %ExOctocat.Model.ValidationError{}}
    ])
  end

  @doc """
  Set user access restrictions
  Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Replaces the list of people that have push access to this branch. This removes all people that previously had push access and grants push access to the new list of people.  | Type    | Description                                                                                                                   | | ------- | ----------------------------------------------------------------------------------------------------------------------------- | | `array` | Usernames for people who can have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - branch (String.t): The name of the branch.
  - opts (KeywordList): [optional] Optional parameters
    - :body (UNKNOWN_BASE_TYPE):
  ## Returns

  {:ok, [%SimpleUser{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_set_user_access_restrictions(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, ExOctocat.Model.ValidationError.t()}
          | {:ok, list(ExOctocat.Model.SimpleUser.t())}
          | {:error, Tesla.Env.t()}
  def repos_set_user_access_restrictions(connection, owner, repo, branch, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:put)
    |> url("/repos/#{owner}/#{repo}/branches/#{branch}/protection/restrictions/users")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, [%ExOctocat.Model.SimpleUser{}]},
      {422, %ExOctocat.Model.ValidationError{}}
    ])
  end

  @doc """
  Test the push repository webhook
  This will trigger the hook with the latest push to the current repository if the hook is subscribed to `push` events. If the hook is not subscribed to `push` events, the server will respond with 204 but no test POST will be generated.  **Note**: Previously `/repos/:owner/:repo/hooks/:hook_id/test`

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - hook_id (integer()):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_test_push_webhook(Tesla.Env.client(), String.t(), String.t(), integer(), keyword()) ::
          {:ok, nil} | {:ok, ExOctocat.Model.BasicError.t()} | {:error, Tesla.Env.t()}
  def repos_test_push_webhook(connection, owner, repo, hook_id, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/repos/#{owner}/#{repo}/hooks/#{hook_id}/tests")
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false},
      {404, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  Transfer a repository
  A transfer request will need to be accepted by the new owner when transferring a personal repository to another user. The response will contain the original `owner`, and the transfer will continue asynchronously. For more details on the requirements to transfer personal and organization-owned repositories, see [about repository transfers](https://help.github.com/articles/about-repository-transfers/).

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject138):
  ## Returns

  {:ok, ExOctocat.Model.MinimalRepository.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_transfer(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, ExOctocat.Model.MinimalRepository.t()} | {:error, Tesla.Env.t()}
  def repos_transfer(connection, owner, repo, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:post)
    |> url("/repos/#{owner}/#{repo}/transfer")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {202, %ExOctocat.Model.MinimalRepository{}}
    ])
  end

  @doc """
  Update a repository
  **Note**: To edit a repository's topics, use the [Replace all repository topics](https://docs.github.com/rest/reference/repos#replace-all-repository-topics) endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject59):
  ## Returns

  {:ok, ExOctocat.Model.FullRepository.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_update(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, ExOctocat.Model.FullRepository.t()}
          | {:ok, ExOctocat.Model.ValidationError.t()}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:error, Tesla.Env.t()}
  def repos_update(connection, owner, repo, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:patch)
    |> url("/repos/#{owner}/#{repo}")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.FullRepository{}},
      {307, %ExOctocat.Model.BasicError{}},
      {403, %ExOctocat.Model.BasicError{}},
      {422, %ExOctocat.Model.ValidationError{}},
      {404, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  Update branch protection
  Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Protecting a branch requires admin or owner permissions to the repository.  **Note**: Passing new arrays of `users` and `teams` replaces their previous values.  **Note**: The list of users, apps, and teams in total is limited to 100 items.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - branch (String.t): The name of the branch.
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject65):
  ## Returns

  {:ok, ExOctocat.Model.ProtectedBranch.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_update_branch_protection(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, ExOctocat.Model.ValidationErrorSimple.t()}
          | {:ok, ExOctocat.Model.InlineResponse415.t()}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:ok, ExOctocat.Model.ProtectedBranch.t()}
          | {:error, Tesla.Env.t()}
  def repos_update_branch_protection(connection, owner, repo, branch, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:put)
    |> url("/repos/#{owner}/#{repo}/branches/#{branch}/protection")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.ProtectedBranch{}},
      {403, %ExOctocat.Model.BasicError{}},
      {415, %ExOctocat.Model.InlineResponse415{}},
      {422, %ExOctocat.Model.ValidationErrorSimple{}},
      {404, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  Update a commit comment

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - comment_id (integer()): comment_id parameter
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject74):
  ## Returns

  {:ok, ExOctocat.Model.CommitComment.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_update_commit_comment(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          integer(),
          keyword()
        ) ::
          {:ok, ExOctocat.Model.CommitComment.t()}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:error, Tesla.Env.t()}
  def repos_update_commit_comment(connection, owner, repo, comment_id, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:patch)
    |> url("/repos/#{owner}/#{repo}/comments/#{comment_id}")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.CommitComment{}},
      {404, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  Update information about a GitHub Pages site
  Updates information for a GitHub Pages site. For more information, see \"[About GitHub Pages](/github/working-with-github-pages/about-github-pages).

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :body (UNKNOWN_BASE_TYPE):
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_update_information_about_pages_site(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, ExOctocat.Model.ValidationError.t()}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:error, Tesla.Env.t()}
  def repos_update_information_about_pages_site(connection, owner, repo, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:put)
    |> url("/repos/#{owner}/#{repo}/pages")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false},
      {422, %ExOctocat.Model.ValidationError{}},
      {400, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  Update a repository invitation

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - invitation_id (integer()): invitation_id parameter
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject98):
  ## Returns

  {:ok, ExOctocat.Model.RepositoryInvitation.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_update_invitation(Tesla.Env.client(), String.t(), String.t(), integer(), keyword()) ::
          {:ok, ExOctocat.Model.RepositoryInvitation.t()} | {:error, Tesla.Env.t()}
  def repos_update_invitation(connection, owner, repo, invitation_id, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:patch)
    |> url("/repos/#{owner}/#{repo}/invitations/#{invitation_id}")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.RepositoryInvitation{}}
    ])
  end

  @doc """
  Update pull request review protection
  Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Updating pull request review enforcement requires admin or owner permissions to the repository and branch protection to be enabled.  **Note**: Passing new arrays of `users` and `teams` replaces their previous values.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - branch (String.t): The name of the branch.
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject66):
  ## Returns

  {:ok, ExOctocat.Model.ProtectedBranchPullRequestReview.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_update_pull_request_review_protection(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, ExOctocat.Model.ProtectedBranchPullRequestReview.t()}
          | {:ok, ExOctocat.Model.ValidationError.t()}
          | {:error, Tesla.Env.t()}
  def repos_update_pull_request_review_protection(connection, owner, repo, branch, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:patch)
    |> url("/repos/#{owner}/#{repo}/branches/#{branch}/protection/required_pull_request_reviews")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.ProtectedBranchPullRequestReview{}},
      {422, %ExOctocat.Model.ValidationError{}}
    ])
  end

  @doc """
  Update a release
  Users with push access to the repository can edit a release.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - release_id (integer()): release_id parameter
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject132):
  ## Returns

  {:ok, ExOctocat.Model.Release.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_update_release(Tesla.Env.client(), String.t(), String.t(), integer(), keyword()) ::
          {:ok, ExOctocat.Model.BasicError.t()}
          | {:ok, ExOctocat.Model.Release.t()}
          | {:error, Tesla.Env.t()}
  def repos_update_release(connection, owner, repo, release_id, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:patch)
    |> url("/repos/#{owner}/#{repo}/releases/#{release_id}")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.Release{}},
      {404, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  Update a release asset
  Users with push access to the repository can edit a release asset.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - asset_id (integer()): asset_id parameter
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject131):
  ## Returns

  {:ok, ExOctocat.Model.ReleaseAsset.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_update_release_asset(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          integer(),
          keyword()
        ) :: {:ok, ExOctocat.Model.ReleaseAsset.t()} | {:error, Tesla.Env.t()}
  def repos_update_release_asset(connection, owner, repo, asset_id, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:patch)
    |> url("/repos/#{owner}/#{repo}/releases/assets/#{asset_id}")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.ReleaseAsset{}}
    ])
  end

  @doc """
  Update status check protection
  Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Updating required status checks requires admin or owner permissions to the repository and branch protection to be enabled.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - branch (String.t): The name of the branch.
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject67):
  ## Returns

  {:ok, ExOctocat.Model.StatusCheckPolicy.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_update_status_check_protection(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, ExOctocat.Model.ValidationError.t()}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:ok, ExOctocat.Model.StatusCheckPolicy.t()}
          | {:error, Tesla.Env.t()}
  def repos_update_status_check_protection(connection, owner, repo, branch, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:patch)
    |> url("/repos/#{owner}/#{repo}/branches/#{branch}/protection/required_status_checks")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.StatusCheckPolicy{}},
      {404, %ExOctocat.Model.BasicError{}},
      {422, %ExOctocat.Model.ValidationError{}}
    ])
  end

  @doc """
  Update a repository webhook
  Updates a webhook configured in a repository. If you previously had a `secret` set, you must provide the same `secret` or set a new `secret` or the secret will be removed. If you are only updating individual webhook `config` properties, use \"[Update a webhook configuration for a repository](/rest/reference/repos#update-a-webhook-configuration-for-a-repository).\"

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - hook_id (integer()):
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject92):
  ## Returns

  {:ok, ExOctocat.Model.Hook.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_update_webhook(Tesla.Env.client(), String.t(), String.t(), integer(), keyword()) ::
          {:ok, ExOctocat.Model.Hook.t()}
          | {:ok, ExOctocat.Model.ValidationError.t()}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:error, Tesla.Env.t()}
  def repos_update_webhook(connection, owner, repo, hook_id, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:patch)
    |> url("/repos/#{owner}/#{repo}/hooks/#{hook_id}")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.Hook{}},
      {422, %ExOctocat.Model.ValidationError{}},
      {404, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  Update a webhook configuration for a repository
  Updates the webhook configuration for a repository. To update more information about the webhook, including the `active` state and `events`, use \"[Update a repository webhook](/rest/reference/orgs#update-a-repository-webhook).\"  Access tokens must have the `write:repo_hook` or `repo` scope, and GitHub Apps must have the `repository_hooks:write` permission.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - hook_id (integer()):
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject93):
  ## Returns

  {:ok, ExOctocat.Model.WebhookConfig.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_update_webhook_config_for_repo(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          integer(),
          keyword()
        ) :: {:ok, ExOctocat.Model.WebhookConfig.t()} | {:error, Tesla.Env.t()}
  def repos_update_webhook_config_for_repo(connection, owner, repo, hook_id, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:patch)
    |> url("/repos/#{owner}/#{repo}/hooks/#{hook_id}/config")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.WebhookConfig{}}
    ])
  end

  @doc """
  Upload a release asset
  This endpoint makes use of [a Hypermedia relation](https://docs.github.com/rest/overview/resources-in-the-rest-api#hypermedia) to determine which URL to access. The endpoint you call to upload release assets is specific to your release. Use the `upload_url` returned in the response of the [Create a release endpoint](https://docs.github.com/rest/reference/repos#create-a-release) to upload a release asset.  You need to use an HTTP client which supports [SNI](http://en.wikipedia.org/wiki/Server_Name_Indication) to make calls to this endpoint.  Most libraries will set the required `Content-Length` header automatically. Use the required `Content-Type` header to provide the media type of the asset. For a list of media types, see [Media Types](https://www.iana.org/assignments/media-types/media-types.xhtml). For example:   `application/zip`  GitHub expects the asset data in its raw binary form, rather than JSON. You will send the raw binary content of the asset as the request body. Everything else about the endpoint is the same as the rest of the API. For example, you'll still need to pass your authentication to be able to upload an asset.  When an upstream failure occurs, you will receive a `502 Bad Gateway` status. This may leave an empty asset with a state of `starter`. It can be safely deleted.  **Notes:** *   GitHub renames asset filenames that have special characters, non-alphanumeric characters, and leading or trailing periods. The \"[List assets for a release](https://docs.github.com/rest/reference/repos#list-assets-for-a-release)\" endpoint lists the renamed filenames. For more information and help, contact [GitHub Support](https://support.github.com/contact?tags=rest-api). *   If you upload an asset with the same filename as another uploaded asset, you'll receive an error and must delete the old file before you can re-upload the new asset.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - release_id (integer()): release_id parameter
  - name (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :label (String.t):
    - :body (String.t):
  ## Returns

  {:ok, ExOctocat.Model.ReleaseAsset.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec repos_upload_release_asset(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          integer(),
          String.t(),
          keyword()
        ) :: {:ok, ExOctocat.Model.ReleaseAsset.t()} | {:error, Tesla.Env.t()}
  def repos_upload_release_asset(connection, owner, repo, release_id, name, opts \\ []) do
    optional_params = %{
      :label => :query,
      :body => :body
    }

    %{}
    |> method(:post)
    |> url("/repos/#{owner}/#{repo}/releases/#{release_id}/assets")
    |> add_param(:query, :name, name)
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {201, %ExOctocat.Model.ReleaseAsset{}}
    ])
  end
end
