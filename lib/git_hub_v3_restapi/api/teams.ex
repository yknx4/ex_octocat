# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule ExOctocat.Api.Teams do
  @moduledoc """
  API calls for all endpoints tagged `Teams`.
  """

  alias ExOctocat.Connection
  import ExOctocat.RequestBuilder

  @doc """
  Add team member (Legacy)
  The \"Add team member\" endpoint (described below) is deprecated.  We recommend using the [Add or update team membership for a user](https://docs.github.com/rest/reference/teams#add-or-update-team-membership-for-a-user) endpoint instead. It allows you to invite new organization members to your teams.  Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  To add someone to a team, the authenticated user must be an organization owner or a team maintainer in the team they're changing. The person being added to the team must be a member of the team's organization.  **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see \"[Synchronizing teams between your identity provider and GitHub](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/).\"  Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs).\"

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - team_id (integer()):
  - username (String.t):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec teams_add_member_legacy(Tesla.Env.client(), integer(), String.t(), keyword()) ::
          {:ok, nil} | {:ok, ExOctocat.Model.BasicError.t()} | {:error, Tesla.Env.t()}
  def teams_add_member_legacy(connection, team_id, username, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/teams/#{team_id}/members/#{username}")
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false},
      {404, false},
      {422, false},
      {403, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  Add or update team membership for a user
  Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Adds an organization member to a team. An authenticated organization owner or team maintainer can add organization members to a team.  **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see \"[Synchronizing teams between your identity provider and GitHub](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/).\"  An organization owner can add someone who is not part of the team's organization to a team. When an organization owner adds someone to a team who is not an organization member, this endpoint will send an invitation to the person via email. This newly-created membership will be in the \"pending\" state until the person accepts the invitation, at which point the membership will transition to the \"active\" state and the user will be added as a member of the team.  If the user is already a member of the team, this endpoint will update the role of the team member's role. To update the membership of a team member, the authenticated user must be an organization owner or a team maintainer.  **Note:** You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/memberships/{username}`.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - team_slug (String.t): team_slug parameter
  - username (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject48):
  ## Returns

  {:ok, ExOctocat.Model.TeamMembership.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec teams_add_or_update_membership_for_user_in_org(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, ExOctocat.Model.TeamMembership.t()} | {:ok, nil} | {:error, Tesla.Env.t()}
  def teams_add_or_update_membership_for_user_in_org(
        connection,
        org,
        team_slug,
        username,
        opts \\ []
      ) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:put)
    |> url("/orgs/#{org}/teams/#{team_slug}/memberships/#{username}")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.TeamMembership{}},
      {403, false},
      {422, false}
    ])
  end

  @doc """
  Add or update team membership for a user (Legacy)
  **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Add or update team membership for a user](https://docs.github.com/rest/reference/teams#add-or-update-team-membership-for-a-user) endpoint.  Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  If the user is already a member of the team's organization, this endpoint will add the user to the team. To add a membership between an organization member and a team, the authenticated user must be an organization owner or a team maintainer.  **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see \"[Synchronizing teams between your identity provider and GitHub](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/).\"  If the user is unaffiliated with the team's organization, this endpoint will send an invitation to the user via email. This newly-created membership will be in the \"pending\" state until the user accepts the invitation, at which point the membership will transition to the \"active\" state and the user will be added as a member of the team. To add a membership between an unaffiliated user and a team, the authenticated user must be an organization owner.  If the user is already a member of the team, this endpoint will update the role of the team member's role. To update the membership of a team member, the authenticated user must be an organization owner or a team maintainer.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - team_id (integer()):
  - username (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject157):
  ## Returns

  {:ok, ExOctocat.Model.TeamMembership.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec teams_add_or_update_membership_for_user_legacy(
          Tesla.Env.client(),
          integer(),
          String.t(),
          keyword()
        ) ::
          {:ok, ExOctocat.Model.TeamMembership.t()}
          | {:ok, nil}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:error, Tesla.Env.t()}
  def teams_add_or_update_membership_for_user_legacy(connection, team_id, username, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:put)
    |> url("/teams/#{team_id}/memberships/#{username}")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.TeamMembership{}},
      {403, false},
      {422, false},
      {404, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  Add or update team project permissions
  Adds an organization project to a team. To add a project to a team or update the team's permission on a project, the authenticated user must have `admin` permissions for the project. The project and team must be part of the same organization.  **Note:** You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/projects/{project_id}`.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - team_slug (String.t): team_slug parameter
  - project_id (integer()):
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject49):
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec teams_add_or_update_project_permissions_in_org(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          integer(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, ExOctocat.Model.InlineResponse422.t()}
          | {:error, Tesla.Env.t()}
  def teams_add_or_update_project_permissions_in_org(
        connection,
        org,
        team_slug,
        project_id,
        opts \\ []
      ) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:put)
    |> url("/orgs/#{org}/teams/#{team_slug}/projects/#{project_id}")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false},
      {403, %ExOctocat.Model.InlineResponse422{}}
    ])
  end

  @doc """
  Add or update team project permissions (Legacy)
  **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Add or update team project permissions](https://docs.github.com/rest/reference/teams#add-or-update-team-project-permissions) endpoint.  Adds an organization project to a team. To add a project to a team or update the team's permission on a project, the authenticated user must have `admin` permissions for the project. The project and team must be part of the same organization.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - team_id (integer()):
  - project_id (integer()):
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject158):
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec teams_add_or_update_project_permissions_legacy(
          Tesla.Env.client(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, ExOctocat.Model.InlineResponse415.t()}
          | {:ok, ExOctocat.Model.ValidationError.t()}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:ok, ExOctocat.Model.InlineResponse422.t()}
          | {:error, Tesla.Env.t()}
  def teams_add_or_update_project_permissions_legacy(connection, team_id, project_id, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:put)
    |> url("/teams/#{team_id}/projects/#{project_id}")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false},
      {403, %ExOctocat.Model.InlineResponse422{}},
      {404, %ExOctocat.Model.BasicError{}},
      {415, %ExOctocat.Model.InlineResponse415{}},
      {422, %ExOctocat.Model.ValidationError{}}
    ])
  end

  @doc """
  Add or update team repository permissions
  To add a repository to a team or update the team's permission on a repository, the authenticated user must have admin access to the repository, and must be able to see the team. The repository must be owned by the organization, or a direct fork of a repository owned by the organization. You will get a `422 Unprocessable Entity` status if you attempt to add a repository to a team that is not owned by the organization. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs).\"  **Note:** You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.  For more information about the permission levels, see \"[Repository permission levels for an organization](https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization)\".

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - team_slug (String.t): team_slug parameter
  - owner (String.t):
  - repo (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject50):
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec teams_add_or_update_repo_permissions_in_org(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, nil} | {:error, Tesla.Env.t()}
  def teams_add_or_update_repo_permissions_in_org(
        connection,
        org,
        team_slug,
        owner,
        repo,
        opts \\ []
      ) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:put)
    |> url("/orgs/#{org}/teams/#{team_slug}/repos/#{owner}/#{repo}")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false}
    ])
  end

  @doc """
  Add or update team repository permissions (Legacy)
  **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new \"[Add or update team repository permissions](https://docs.github.com/rest/reference/teams#add-or-update-team-repository-permissions)\" endpoint.  To add a repository to a team or update the team's permission on a repository, the authenticated user must have admin access to the repository, and must be able to see the team. The repository must be owned by the organization, or a direct fork of a repository owned by the organization. You will get a `422 Unprocessable Entity` status if you attempt to add a repository to a team that is not owned by the organization.  Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs).\"

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - team_id (integer()):
  - owner (String.t):
  - repo (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject159):
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec teams_add_or_update_repo_permissions_legacy(
          Tesla.Env.client(),
          integer(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, ExOctocat.Model.ValidationError.t()}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:error, Tesla.Env.t()}
  def teams_add_or_update_repo_permissions_legacy(connection, team_id, owner, repo, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:put)
    |> url("/teams/#{team_id}/repos/#{owner}/#{repo}")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false},
      {403, %ExOctocat.Model.BasicError{}},
      {422, %ExOctocat.Model.ValidationError{}}
    ])
  end

  @doc """
  Check team permissions for a project
  Checks whether a team has `read`, `write`, or `admin` permissions for an organization project. The response includes projects inherited from a parent team.  **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/projects/{project_id}`.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - team_slug (String.t): team_slug parameter
  - project_id (integer()):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, ExOctocat.Model.TeamProject.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec teams_check_permissions_for_project_in_org(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          integer(),
          keyword()
        ) :: {:ok, nil} | {:ok, ExOctocat.Model.TeamProject.t()} | {:error, Tesla.Env.t()}
  def teams_check_permissions_for_project_in_org(
        connection,
        org,
        team_slug,
        project_id,
        _opts \\ []
      ) do
    %{}
    |> method(:get)
    |> url("/orgs/#{org}/teams/#{team_slug}/projects/#{project_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.TeamProject{}},
      {404, false}
    ])
  end

  @doc """
  Check team permissions for a project (Legacy)
  **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Check team permissions for a project](https://docs.github.com/rest/reference/teams#check-team-permissions-for-a-project) endpoint.  Checks whether a team has `read`, `write`, or `admin` permissions for an organization project. The response includes projects inherited from a parent team.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - team_id (integer()):
  - project_id (integer()):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, ExOctocat.Model.TeamProject.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec teams_check_permissions_for_project_legacy(
          Tesla.Env.client(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, ExOctocat.Model.InlineResponse415.t()}
          | {:ok, ExOctocat.Model.TeamProject.t()}
          | {:error, Tesla.Env.t()}
  def teams_check_permissions_for_project_legacy(connection, team_id, project_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/teams/#{team_id}/projects/#{project_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.TeamProject{}},
      {404, false},
      {415, %ExOctocat.Model.InlineResponse415{}}
    ])
  end

  @doc """
  Check team permissions for a repository
  Checks whether a team has `admin`, `push`, `maintain`, `triage`, or `pull` permission for a repository. Repositories inherited through a parent team will also be checked.  You can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the `application/vnd.github.v3.repository+json` accept header.  If a team doesn't have permission for the repository, you will receive a `404 Not Found` response status.  **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - team_slug (String.t): team_slug parameter
  - owner (String.t):
  - repo (String.t):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, ExOctocat.Model.TeamRepository.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec teams_check_permissions_for_repo_in_org(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil} | {:ok, ExOctocat.Model.TeamRepository.t()} | {:error, Tesla.Env.t()}
  def teams_check_permissions_for_repo_in_org(
        connection,
        org,
        team_slug,
        owner,
        repo,
        _opts \\ []
      ) do
    %{}
    |> method(:get)
    |> url("/orgs/#{org}/teams/#{team_slug}/repos/#{owner}/#{repo}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.TeamRepository{}},
      {204, false},
      {404, false}
    ])
  end

  @doc """
  Check team permissions for a repository (Legacy)
  **Note**: Repositories inherited through a parent team will also be checked.  **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Check team permissions for a repository](https://docs.github.com/rest/reference/teams#check-team-permissions-for-a-repository) endpoint.  You can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the `Accept` header:

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - team_id (integer()):
  - owner (String.t):
  - repo (String.t):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, ExOctocat.Model.TeamRepository.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec teams_check_permissions_for_repo_legacy(
          Tesla.Env.client(),
          integer(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil} | {:ok, ExOctocat.Model.TeamRepository.t()} | {:error, Tesla.Env.t()}
  def teams_check_permissions_for_repo_legacy(connection, team_id, owner, repo, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/teams/#{team_id}/repos/#{owner}/#{repo}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.TeamRepository{}},
      {204, false},
      {404, false}
    ])
  end

  @doc """
  Create a team
  To create a team, the authenticated user must be a member or owner of `{org}`. By default, organization members can create teams. Organization owners can limit team creation to organization owners. For more information, see \"[Setting team creation permissions](https://help.github.com/en/articles/setting-team-creation-permissions-in-your-organization).\"  When you create a new team, you automatically become a team maintainer without explicitly adding yourself to the optional array of `maintainers`. For more information, see \"[About teams](https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/about-teams)\".

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject40):
  ## Returns

  {:ok, ExOctocat.Model.TeamFull.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec teams_create(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, ExOctocat.Model.TeamFull.t()}
          | {:ok, ExOctocat.Model.ValidationError.t()}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:error, Tesla.Env.t()}
  def teams_create(connection, org, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:post)
    |> url("/orgs/#{org}/teams")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {201, %ExOctocat.Model.TeamFull{}},
      {422, %ExOctocat.Model.ValidationError{}},
      {403, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  Create a discussion comment
  Creates a new comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \"[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\" and \"[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\" for details.  **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments`.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - team_slug (String.t): team_slug parameter
  - discussion_number (integer()):
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject44):
  ## Returns

  {:ok, ExOctocat.Model.TeamDiscussionComment.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec teams_create_discussion_comment_in_org(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          integer(),
          keyword()
        ) :: {:ok, ExOctocat.Model.TeamDiscussionComment.t()} | {:error, Tesla.Env.t()}
  def teams_create_discussion_comment_in_org(
        connection,
        org,
        team_slug,
        discussion_number,
        opts \\ []
      ) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:post)
    |> url("/orgs/#{org}/teams/#{team_slug}/discussions/#{discussion_number}/comments")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {201, %ExOctocat.Model.TeamDiscussionComment{}}
    ])
  end

  @doc """
  Create a discussion comment (Legacy)
  **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Create a discussion comment](https://docs.github.com/rest/reference/teams#create-a-discussion-comment) endpoint.  Creates a new comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \"[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\" and \"[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\" for details.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - team_id (integer()):
  - discussion_number (integer()):
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject153):
  ## Returns

  {:ok, ExOctocat.Model.TeamDiscussionComment.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec teams_create_discussion_comment_legacy(
          Tesla.Env.client(),
          integer(),
          integer(),
          keyword()
        ) :: {:ok, ExOctocat.Model.TeamDiscussionComment.t()} | {:error, Tesla.Env.t()}
  def teams_create_discussion_comment_legacy(connection, team_id, discussion_number, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:post)
    |> url("/teams/#{team_id}/discussions/#{discussion_number}/comments")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {201, %ExOctocat.Model.TeamDiscussionComment{}}
    ])
  end

  @doc """
  Create a discussion
  Creates a new discussion post on a team's page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \"[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\" and \"[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\" for details.  **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/{org_id}/team/{team_id}/discussions`.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - team_slug (String.t): team_slug parameter
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject42):
  ## Returns

  {:ok, ExOctocat.Model.TeamDiscussion.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec teams_create_discussion_in_org(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, ExOctocat.Model.TeamDiscussion.t()} | {:error, Tesla.Env.t()}
  def teams_create_discussion_in_org(connection, org, team_slug, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:post)
    |> url("/orgs/#{org}/teams/#{team_slug}/discussions")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {201, %ExOctocat.Model.TeamDiscussion{}}
    ])
  end

  @doc """
  Create a discussion (Legacy)
  **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Create a discussion`](https://docs.github.com/rest/reference/teams#create-a-discussion) endpoint.  Creates a new discussion post on a team's page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \"[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\" and \"[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\" for details.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - team_id (integer()):
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject151):
  ## Returns

  {:ok, ExOctocat.Model.TeamDiscussion.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec teams_create_discussion_legacy(Tesla.Env.client(), integer(), keyword()) ::
          {:ok, ExOctocat.Model.TeamDiscussion.t()} | {:error, Tesla.Env.t()}
  def teams_create_discussion_legacy(connection, team_id, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:post)
    |> url("/teams/#{team_id}/discussions")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {201, %ExOctocat.Model.TeamDiscussion{}}
    ])
  end

  @doc """
  Create or update IdP group connections
  Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Creates, updates, or removes a connection between a team and an IdP group. When adding groups to a team, you must include all new and existing groups to avoid replacing existing groups with the new ones. Specifying an empty `groups` array will remove all connections for a team.  **Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}/team-sync/group-mappings`.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - team_slug (String.t): team_slug parameter
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject51):
  ## Returns

  {:ok, ExOctocat.Model.GroupMapping.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec teams_create_or_update_idp_group_connections_in_org(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, ExOctocat.Model.GroupMapping.t()} | {:error, Tesla.Env.t()}
  def teams_create_or_update_idp_group_connections_in_org(connection, org, team_slug, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:patch)
    |> url("/orgs/#{org}/teams/#{team_slug}/team-sync/group-mappings")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.GroupMapping{}}
    ])
  end

  @doc """
  Create or update IdP group connections (Legacy)
  **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Create or update IdP group connections`](https://docs.github.com/rest/reference/teams#create-or-update-idp-group-connections) endpoint.  Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Creates, updates, or removes a connection between a team and an IdP group. When adding groups to a team, you must include all new and existing groups to avoid replacing existing groups with the new ones. Specifying an empty `groups` array will remove all connections for a team.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - team_id (integer()):
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject160):
  ## Returns

  {:ok, ExOctocat.Model.GroupMapping.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec teams_create_or_update_idp_group_connections_legacy(
          Tesla.Env.client(),
          integer(),
          keyword()
        ) ::
          {:ok, ExOctocat.Model.GroupMapping.t()}
          | {:ok, ExOctocat.Model.ValidationError.t()}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:error, Tesla.Env.t()}
  def teams_create_or_update_idp_group_connections_legacy(connection, team_id, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:patch)
    |> url("/teams/#{team_id}/team-sync/group-mappings")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.GroupMapping{}},
      {422, %ExOctocat.Model.ValidationError{}},
      {403, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  Delete a discussion comment
  Deletes a comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - team_slug (String.t): team_slug parameter
  - discussion_number (integer()):
  - comment_number (integer()):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec teams_delete_discussion_comment_in_org(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          integer(),
          integer(),
          keyword()
        ) :: {:ok, nil} | {:error, Tesla.Env.t()}
  def teams_delete_discussion_comment_in_org(
        connection,
        org,
        team_slug,
        discussion_number,
        comment_number,
        _opts \\ []
      ) do
    %{}
    |> method(:delete)
    |> url(
      "/orgs/#{org}/teams/#{team_slug}/discussions/#{discussion_number}/comments/#{comment_number}"
    )
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false}
    ])
  end

  @doc """
  Delete a discussion comment (Legacy)
  **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Delete a discussion comment](https://docs.github.com/rest/reference/teams#delete-a-discussion-comment) endpoint.  Deletes a comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - team_id (integer()):
  - discussion_number (integer()):
  - comment_number (integer()):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec teams_delete_discussion_comment_legacy(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          keyword()
        ) :: {:ok, nil} | {:error, Tesla.Env.t()}
  def teams_delete_discussion_comment_legacy(
        connection,
        team_id,
        discussion_number,
        comment_number,
        _opts \\ []
      ) do
    %{}
    |> method(:delete)
    |> url("/teams/#{team_id}/discussions/#{discussion_number}/comments/#{comment_number}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false}
    ])
  end

  @doc """
  Delete a discussion
  Delete a discussion from a team's page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - team_slug (String.t): team_slug parameter
  - discussion_number (integer()):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec teams_delete_discussion_in_org(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          integer(),
          keyword()
        ) :: {:ok, nil} | {:error, Tesla.Env.t()}
  def teams_delete_discussion_in_org(connection, org, team_slug, discussion_number, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/orgs/#{org}/teams/#{team_slug}/discussions/#{discussion_number}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false}
    ])
  end

  @doc """
  Delete a discussion (Legacy)
  **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Delete a discussion`](https://docs.github.com/rest/reference/teams#delete-a-discussion) endpoint.  Delete a discussion from a team's page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - team_id (integer()):
  - discussion_number (integer()):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec teams_delete_discussion_legacy(Tesla.Env.client(), integer(), integer(), keyword()) ::
          {:ok, nil} | {:error, Tesla.Env.t()}
  def teams_delete_discussion_legacy(connection, team_id, discussion_number, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/teams/#{team_id}/discussions/#{discussion_number}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false}
    ])
  end

  @doc """
  Delete a team
  To delete a team, the authenticated user must be an organization owner or team maintainer.  If you are an organization owner, deleting a parent team will delete all of its child teams as well.  **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}`.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - team_slug (String.t): team_slug parameter
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec teams_delete_in_org(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, nil} | {:error, Tesla.Env.t()}
  def teams_delete_in_org(connection, org, team_slug, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/orgs/#{org}/teams/#{team_slug}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false}
    ])
  end

  @doc """
  Delete a team (Legacy)
  **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Delete a team](https://docs.github.com/rest/reference/teams#delete-a-team) endpoint.  To delete a team, the authenticated user must be an organization owner or team maintainer.  If you are an organization owner, deleting a parent team will delete all of its child teams as well.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - team_id (integer()):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec teams_delete_legacy(Tesla.Env.client(), integer(), keyword()) ::
          {:ok, nil}
          | {:ok, ExOctocat.Model.ValidationError.t()}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:error, Tesla.Env.t()}
  def teams_delete_legacy(connection, team_id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/teams/#{team_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false},
      {404, %ExOctocat.Model.BasicError{}},
      {422, %ExOctocat.Model.ValidationError{}}
    ])
  end

  @doc """
  Get a team by name
  Gets a team using the team's `slug`. GitHub generates the `slug` from the team `name`.  **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}`.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - team_slug (String.t): team_slug parameter
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, ExOctocat.Model.TeamFull.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec teams_get_by_name(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, ExOctocat.Model.TeamFull.t()}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:error, Tesla.Env.t()}
  def teams_get_by_name(connection, org, team_slug, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/orgs/#{org}/teams/#{team_slug}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.TeamFull{}},
      {404, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  Get a discussion comment
  Get a specific comment on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - team_slug (String.t): team_slug parameter
  - discussion_number (integer()):
  - comment_number (integer()):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, ExOctocat.Model.TeamDiscussionComment.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec teams_get_discussion_comment_in_org(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          integer(),
          integer(),
          keyword()
        ) :: {:ok, ExOctocat.Model.TeamDiscussionComment.t()} | {:error, Tesla.Env.t()}
  def teams_get_discussion_comment_in_org(
        connection,
        org,
        team_slug,
        discussion_number,
        comment_number,
        _opts \\ []
      ) do
    %{}
    |> method(:get)
    |> url(
      "/orgs/#{org}/teams/#{team_slug}/discussions/#{discussion_number}/comments/#{comment_number}"
    )
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.TeamDiscussionComment{}}
    ])
  end

  @doc """
  Get a discussion comment (Legacy)
  **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get a discussion comment](https://docs.github.com/rest/reference/teams#get-a-discussion-comment) endpoint.  Get a specific comment on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - team_id (integer()):
  - discussion_number (integer()):
  - comment_number (integer()):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, ExOctocat.Model.TeamDiscussionComment.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec teams_get_discussion_comment_legacy(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          keyword()
        ) :: {:ok, ExOctocat.Model.TeamDiscussionComment.t()} | {:error, Tesla.Env.t()}
  def teams_get_discussion_comment_legacy(
        connection,
        team_id,
        discussion_number,
        comment_number,
        _opts \\ []
      ) do
    %{}
    |> method(:get)
    |> url("/teams/#{team_id}/discussions/#{discussion_number}/comments/#{comment_number}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.TeamDiscussionComment{}}
    ])
  end

  @doc """
  Get a discussion
  Get a specific discussion on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - team_slug (String.t): team_slug parameter
  - discussion_number (integer()):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, ExOctocat.Model.TeamDiscussion.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec teams_get_discussion_in_org(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          integer(),
          keyword()
        ) :: {:ok, ExOctocat.Model.TeamDiscussion.t()} | {:error, Tesla.Env.t()}
  def teams_get_discussion_in_org(connection, org, team_slug, discussion_number, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/orgs/#{org}/teams/#{team_slug}/discussions/#{discussion_number}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.TeamDiscussion{}}
    ])
  end

  @doc """
  Get a discussion (Legacy)
  **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get a discussion](https://docs.github.com/rest/reference/teams#get-a-discussion) endpoint.  Get a specific discussion on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - team_id (integer()):
  - discussion_number (integer()):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, ExOctocat.Model.TeamDiscussion.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec teams_get_discussion_legacy(Tesla.Env.client(), integer(), integer(), keyword()) ::
          {:ok, ExOctocat.Model.TeamDiscussion.t()} | {:error, Tesla.Env.t()}
  def teams_get_discussion_legacy(connection, team_id, discussion_number, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/teams/#{team_id}/discussions/#{discussion_number}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.TeamDiscussion{}}
    ])
  end

  @doc """
  Get a team (Legacy)
  **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the [Get a team by name](https://docs.github.com/rest/reference/teams#get-a-team-by-name) endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - team_id (integer()):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, ExOctocat.Model.TeamFull.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec teams_get_legacy(Tesla.Env.client(), integer(), keyword()) ::
          {:ok, ExOctocat.Model.TeamFull.t()}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:error, Tesla.Env.t()}
  def teams_get_legacy(connection, team_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/teams/#{team_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.TeamFull{}},
      {404, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  Get team member (Legacy)
  The \"Get team member\" endpoint (described below) is deprecated.  We recommend using the [Get team membership for a user](https://docs.github.com/rest/reference/teams#get-team-membership-for-a-user) endpoint instead. It allows you to get both active and pending memberships.  To list members in a team, the team must be visible to the authenticated user.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - team_id (integer()):
  - username (String.t):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec teams_get_member_legacy(Tesla.Env.client(), integer(), String.t(), keyword()) ::
          {:ok, nil} | {:error, Tesla.Env.t()}
  def teams_get_member_legacy(connection, team_id, username, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/teams/#{team_id}/members/#{username}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false},
      {404, false}
    ])
  end

  @doc """
  Get team membership for a user
  Team members will include the members of child teams.  To get a user's membership with a team, the team must be visible to the authenticated user.  **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/memberships/{username}`.  **Note:** The response contains the `state` of the membership and the member's `role`.  The `role` for organization owners is set to `maintainer`. For more information about `maintainer` roles, see see [Create a team](https://docs.github.com/rest/reference/teams#create-a-team).

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - team_slug (String.t): team_slug parameter
  - username (String.t):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, ExOctocat.Model.TeamMembership.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec teams_get_membership_for_user_in_org(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, ExOctocat.Model.TeamMembership.t()} | {:ok, nil} | {:error, Tesla.Env.t()}
  def teams_get_membership_for_user_in_org(connection, org, team_slug, username, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/orgs/#{org}/teams/#{team_slug}/memberships/#{username}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.TeamMembership{}},
      {404, false}
    ])
  end

  @doc """
  Get team membership for a user (Legacy)
  **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get team membership for a user](https://docs.github.com/rest/reference/teams#get-team-membership-for-a-user) endpoint.  Team members will include the members of child teams.  To get a user's membership with a team, the team must be visible to the authenticated user.  **Note:** The response contains the `state` of the membership and the member's `role`.  The `role` for organization owners is set to `maintainer`. For more information about `maintainer` roles, see [Create a team](https://docs.github.com/rest/reference/teams#create-a-team).

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - team_id (integer()):
  - username (String.t):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, ExOctocat.Model.TeamMembership.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec teams_get_membership_for_user_legacy(Tesla.Env.client(), integer(), String.t(), keyword()) ::
          {:ok, ExOctocat.Model.TeamMembership.t()}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:error, Tesla.Env.t()}
  def teams_get_membership_for_user_legacy(connection, team_id, username, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/teams/#{team_id}/memberships/#{username}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.TeamMembership{}},
      {404, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  List teams
  Lists all teams in an organization that are visible to the authenticated user.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :per_page (integer()): Results per page (max 100)
    - :page (integer()): Page number of the results to fetch.
  ## Returns

  {:ok, [%Team{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec teams_list(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, list(ExOctocat.Model.Team.t())}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:error, Tesla.Env.t()}
  def teams_list(connection, org, opts \\ []) do
    optional_params = %{
      :per_page => :query,
      :page => :query
    }

    %{}
    |> method(:get)
    |> url("/orgs/#{org}/teams")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, [%ExOctocat.Model.Team{}]},
      {403, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  List child teams
  Lists the child teams of the team specified by `{team_slug}`.  **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/teams`.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - team_slug (String.t): team_slug parameter
  - opts (KeywordList): [optional] Optional parameters
    - :per_page (integer()): Results per page (max 100)
    - :page (integer()): Page number of the results to fetch.
  ## Returns

  {:ok, [%Team{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec teams_list_child_in_org(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, list(ExOctocat.Model.Team.t())} | {:error, Tesla.Env.t()}
  def teams_list_child_in_org(connection, org, team_slug, opts \\ []) do
    optional_params = %{
      :per_page => :query,
      :page => :query
    }

    %{}
    |> method(:get)
    |> url("/orgs/#{org}/teams/#{team_slug}/teams")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, [%ExOctocat.Model.Team{}]}
    ])
  end

  @doc """
  List child teams (Legacy)
  **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List child teams`](https://docs.github.com/rest/reference/teams#list-child-teams) endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - team_id (integer()):
  - opts (KeywordList): [optional] Optional parameters
    - :per_page (integer()): Results per page (max 100)
    - :page (integer()): Page number of the results to fetch.
  ## Returns

  {:ok, [%Team{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec teams_list_child_legacy(Tesla.Env.client(), integer(), keyword()) ::
          {:ok, list(ExOctocat.Model.Team.t())}
          | {:ok, ExOctocat.Model.ValidationError.t()}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:error, Tesla.Env.t()}
  def teams_list_child_legacy(connection, team_id, opts \\ []) do
    optional_params = %{
      :per_page => :query,
      :page => :query
    }

    %{}
    |> method(:get)
    |> url("/teams/#{team_id}/teams")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, [%ExOctocat.Model.Team{}]},
      {404, %ExOctocat.Model.BasicError{}},
      {403, %ExOctocat.Model.BasicError{}},
      {422, %ExOctocat.Model.ValidationError{}}
    ])
  end

  @doc """
  List discussion comments
  List all comments on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments`.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - team_slug (String.t): team_slug parameter
  - discussion_number (integer()):
  - opts (KeywordList): [optional] Optional parameters
    - :direction (String.t): One of `asc` (ascending) or `desc` (descending).
    - :per_page (integer()): Results per page (max 100)
    - :page (integer()): Page number of the results to fetch.
  ## Returns

  {:ok, [%TeamDiscussionComment{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec teams_list_discussion_comments_in_org(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          integer(),
          keyword()
        ) ::
          {:ok, list(ExOctocat.Model.TeamDiscussionComment.t())} | {:error, Tesla.Env.t()}
  def teams_list_discussion_comments_in_org(
        connection,
        org,
        team_slug,
        discussion_number,
        opts \\ []
      ) do
    optional_params = %{
      :direction => :query,
      :per_page => :query,
      :page => :query
    }

    %{}
    |> method(:get)
    |> url("/orgs/#{org}/teams/#{team_slug}/discussions/#{discussion_number}/comments")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, [%ExOctocat.Model.TeamDiscussionComment{}]}
    ])
  end

  @doc """
  List discussion comments (Legacy)
  **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [List discussion comments](https://docs.github.com/rest/reference/teams#list-discussion-comments) endpoint.  List all comments on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - team_id (integer()):
  - discussion_number (integer()):
  - opts (KeywordList): [optional] Optional parameters
    - :direction (String.t): One of `asc` (ascending) or `desc` (descending).
    - :per_page (integer()): Results per page (max 100)
    - :page (integer()): Page number of the results to fetch.
  ## Returns

  {:ok, [%TeamDiscussionComment{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec teams_list_discussion_comments_legacy(Tesla.Env.client(), integer(), integer(), keyword()) ::
          {:ok, list(ExOctocat.Model.TeamDiscussionComment.t())} | {:error, Tesla.Env.t()}
  def teams_list_discussion_comments_legacy(connection, team_id, discussion_number, opts \\ []) do
    optional_params = %{
      :direction => :query,
      :per_page => :query,
      :page => :query
    }

    %{}
    |> method(:get)
    |> url("/teams/#{team_id}/discussions/#{discussion_number}/comments")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, [%ExOctocat.Model.TeamDiscussionComment{}]}
    ])
  end

  @doc """
  List discussions
  List all discussions on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions`.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - team_slug (String.t): team_slug parameter
  - opts (KeywordList): [optional] Optional parameters
    - :direction (String.t): One of `asc` (ascending) or `desc` (descending).
    - :per_page (integer()): Results per page (max 100)
    - :page (integer()): Page number of the results to fetch.
    - :pinned (String.t): Pinned discussions only filter
  ## Returns

  {:ok, [%TeamDiscussion{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec teams_list_discussions_in_org(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, list(ExOctocat.Model.TeamDiscussion.t())} | {:error, Tesla.Env.t()}
  def teams_list_discussions_in_org(connection, org, team_slug, opts \\ []) do
    optional_params = %{
      :direction => :query,
      :per_page => :query,
      :page => :query,
      :pinned => :query
    }

    %{}
    |> method(:get)
    |> url("/orgs/#{org}/teams/#{team_slug}/discussions")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, [%ExOctocat.Model.TeamDiscussion{}]}
    ])
  end

  @doc """
  List discussions (Legacy)
  **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List discussions`](https://docs.github.com/rest/reference/teams#list-discussions) endpoint.  List all discussions on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - team_id (integer()):
  - opts (KeywordList): [optional] Optional parameters
    - :direction (String.t): One of `asc` (ascending) or `desc` (descending).
    - :per_page (integer()): Results per page (max 100)
    - :page (integer()): Page number of the results to fetch.
  ## Returns

  {:ok, [%TeamDiscussion{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec teams_list_discussions_legacy(Tesla.Env.client(), integer(), keyword()) ::
          {:ok, list(ExOctocat.Model.TeamDiscussion.t())} | {:error, Tesla.Env.t()}
  def teams_list_discussions_legacy(connection, team_id, opts \\ []) do
    optional_params = %{
      :direction => :query,
      :per_page => :query,
      :page => :query
    }

    %{}
    |> method(:get)
    |> url("/teams/#{team_id}/discussions")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, [%ExOctocat.Model.TeamDiscussion{}]}
    ])
  end

  @doc """
  List teams for the authenticated user
  List all of the teams across all of the organizations to which the authenticated user belongs. This method requires `user`, `repo`, or `read:org` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/) when authenticating via [OAuth](https://docs.github.com/apps/building-oauth-apps/).

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :per_page (integer()): Results per page (max 100)
    - :page (integer()): Page number of the results to fetch.
  ## Returns

  {:ok, [%TeamFull{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec teams_list_for_authenticated_user(Tesla.Env.client(), keyword()) ::
          {:ok, nil}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:ok, list(ExOctocat.Model.TeamFull.t())}
          | {:error, Tesla.Env.t()}
  def teams_list_for_authenticated_user(connection, opts \\ []) do
    optional_params = %{
      :per_page => :query,
      :page => :query
    }

    %{}
    |> method(:get)
    |> url("/user/teams")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, [%ExOctocat.Model.TeamFull{}]},
      {304, false},
      {404, %ExOctocat.Model.BasicError{}},
      {403, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  List IdP groups for a team (Legacy)
  **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List IdP groups for a team`](https://docs.github.com/rest/reference/teams#list-idp-groups-for-a-team) endpoint.  Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  List IdP groups connected to a team on GitHub.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - team_id (integer()):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, ExOctocat.Model.GroupMapping.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec teams_list_idp_groups_for_legacy(Tesla.Env.client(), integer(), keyword()) ::
          {:ok, ExOctocat.Model.GroupMapping.t()}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:error, Tesla.Env.t()}
  def teams_list_idp_groups_for_legacy(connection, team_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/teams/#{team_id}/team-sync/group-mappings")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.GroupMapping{}},
      {403, %ExOctocat.Model.BasicError{}},
      {404, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  List IdP groups for an organization
  Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  List IdP groups available in an organization. You can limit your page results using the `per_page` parameter. GitHub generates a url-encoded `page` token using a cursor value for where the next page begins. For more information on cursor pagination, see \"[Offset and Cursor Pagination explained](https://dev.to/jackmarchant/offset-and-cursor-pagination-explained-b89).\"  The `per_page` parameter provides pagination for a list of IdP groups the authenticated user can access in an organization. For example, if the user `octocat` wants to see two groups per page in `octo-org` via cURL, it would look like this:

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :per_page (integer()): Results per page (max 100)
    - :page (String.t): Page token
  ## Returns

  {:ok, ExOctocat.Model.GroupMapping.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec teams_list_idp_groups_for_org(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, ExOctocat.Model.GroupMapping.t()} | {:error, Tesla.Env.t()}
  def teams_list_idp_groups_for_org(connection, org, opts \\ []) do
    optional_params = %{
      :per_page => :query,
      :page => :query
    }

    %{}
    |> method(:get)
    |> url("/orgs/#{org}/team-sync/groups")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.GroupMapping{}}
    ])
  end

  @doc """
  List IdP groups for a team
  Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  List IdP groups connected to a team on GitHub.  **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/team-sync/group-mappings`.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - team_slug (String.t): team_slug parameter
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, ExOctocat.Model.GroupMapping.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec teams_list_idp_groups_in_org(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, ExOctocat.Model.GroupMapping.t()} | {:error, Tesla.Env.t()}
  def teams_list_idp_groups_in_org(connection, org, team_slug, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/orgs/#{org}/teams/#{team_slug}/team-sync/group-mappings")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.GroupMapping{}}
    ])
  end

  @doc """
  List team members
  Team members will include the members of child teams.  To list members in a team, the team must be visible to the authenticated user.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - team_slug (String.t): team_slug parameter
  - opts (KeywordList): [optional] Optional parameters
    - :role (String.t): Filters members returned by their role in the team. Can be one of:   \\* `member` - normal members of the team.   \\* `maintainer` - team maintainers.   \\* `all` - all members of the team.
    - :per_page (integer()): Results per page (max 100)
    - :page (integer()): Page number of the results to fetch.
  ## Returns

  {:ok, [%SimpleUser{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec teams_list_members_in_org(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, list(ExOctocat.Model.SimpleUser.t())} | {:error, Tesla.Env.t()}
  def teams_list_members_in_org(connection, org, team_slug, opts \\ []) do
    optional_params = %{
      :role => :query,
      :per_page => :query,
      :page => :query
    }

    %{}
    |> method(:get)
    |> url("/orgs/#{org}/teams/#{team_slug}/members")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, [%ExOctocat.Model.SimpleUser{}]}
    ])
  end

  @doc """
  List team members (Legacy)
  **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List team members`](https://docs.github.com/rest/reference/teams#list-team-members) endpoint.  Team members will include the members of child teams.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - team_id (integer()):
  - opts (KeywordList): [optional] Optional parameters
    - :role (String.t): Filters members returned by their role in the team. Can be one of:   \\* `member` - normal members of the team.   \\* `maintainer` - team maintainers.   \\* `all` - all members of the team.
    - :per_page (integer()): Results per page (max 100)
    - :page (integer()): Page number of the results to fetch.
  ## Returns

  {:ok, [%SimpleUser{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec teams_list_members_legacy(Tesla.Env.client(), integer(), keyword()) ::
          {:ok, ExOctocat.Model.BasicError.t()}
          | {:ok, list(ExOctocat.Model.SimpleUser.t())}
          | {:error, Tesla.Env.t()}
  def teams_list_members_legacy(connection, team_id, opts \\ []) do
    optional_params = %{
      :role => :query,
      :per_page => :query,
      :page => :query
    }

    %{}
    |> method(:get)
    |> url("/teams/#{team_id}/members")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, [%ExOctocat.Model.SimpleUser{}]},
      {404, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  List pending team invitations
  The return hash contains a `role` field which refers to the Organization Invitation role and will be one of the following values: `direct_member`, `admin`, `billing_manager`, `hiring_manager`, or `reinstate`. If the invitee is not a GitHub member, the `login` field in the return hash will be `null`.  **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/invitations`.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - team_slug (String.t): team_slug parameter
  - opts (KeywordList): [optional] Optional parameters
    - :per_page (integer()): Results per page (max 100)
    - :page (integer()): Page number of the results to fetch.
  ## Returns

  {:ok, [%OrganizationInvitation{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec teams_list_pending_invitations_in_org(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, list(ExOctocat.Model.OrganizationInvitation.t())} | {:error, Tesla.Env.t()}
  def teams_list_pending_invitations_in_org(connection, org, team_slug, opts \\ []) do
    optional_params = %{
      :per_page => :query,
      :page => :query
    }

    %{}
    |> method(:get)
    |> url("/orgs/#{org}/teams/#{team_slug}/invitations")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, [%ExOctocat.Model.OrganizationInvitation{}]}
    ])
  end

  @doc """
  List pending team invitations (Legacy)
  **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List pending team invitations`](https://docs.github.com/rest/reference/teams#list-pending-team-invitations) endpoint.  The return hash contains a `role` field which refers to the Organization Invitation role and will be one of the following values: `direct_member`, `admin`, `billing_manager`, `hiring_manager`, or `reinstate`. If the invitee is not a GitHub member, the `login` field in the return hash will be `null`.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - team_id (integer()):
  - opts (KeywordList): [optional] Optional parameters
    - :per_page (integer()): Results per page (max 100)
    - :page (integer()): Page number of the results to fetch.
  ## Returns

  {:ok, [%OrganizationInvitation{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec teams_list_pending_invitations_legacy(Tesla.Env.client(), integer(), keyword()) ::
          {:ok, list(ExOctocat.Model.OrganizationInvitation.t())} | {:error, Tesla.Env.t()}
  def teams_list_pending_invitations_legacy(connection, team_id, opts \\ []) do
    optional_params = %{
      :per_page => :query,
      :page => :query
    }

    %{}
    |> method(:get)
    |> url("/teams/#{team_id}/invitations")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, [%ExOctocat.Model.OrganizationInvitation{}]}
    ])
  end

  @doc """
  List team projects
  Lists the organization projects for a team.  **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/projects`.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - team_slug (String.t): team_slug parameter
  - opts (KeywordList): [optional] Optional parameters
    - :per_page (integer()): Results per page (max 100)
    - :page (integer()): Page number of the results to fetch.
  ## Returns

  {:ok, [%TeamProject{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec teams_list_projects_in_org(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, list(ExOctocat.Model.TeamProject.t())} | {:error, Tesla.Env.t()}
  def teams_list_projects_in_org(connection, org, team_slug, opts \\ []) do
    optional_params = %{
      :per_page => :query,
      :page => :query
    }

    %{}
    |> method(:get)
    |> url("/orgs/#{org}/teams/#{team_slug}/projects")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, [%ExOctocat.Model.TeamProject{}]}
    ])
  end

  @doc """
  List team projects (Legacy)
  **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List team projects`](https://docs.github.com/rest/reference/teams#list-team-projects) endpoint.  Lists the organization projects for a team.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - team_id (integer()):
  - opts (KeywordList): [optional] Optional parameters
    - :per_page (integer()): Results per page (max 100)
    - :page (integer()): Page number of the results to fetch.
  ## Returns

  {:ok, [%TeamProject{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec teams_list_projects_legacy(Tesla.Env.client(), integer(), keyword()) ::
          {:ok, list(ExOctocat.Model.TeamProject.t())}
          | {:ok, ExOctocat.Model.InlineResponse415.t()}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:error, Tesla.Env.t()}
  def teams_list_projects_legacy(connection, team_id, opts \\ []) do
    optional_params = %{
      :per_page => :query,
      :page => :query
    }

    %{}
    |> method(:get)
    |> url("/teams/#{team_id}/projects")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, [%ExOctocat.Model.TeamProject{}]},
      {404, %ExOctocat.Model.BasicError{}},
      {415, %ExOctocat.Model.InlineResponse415{}}
    ])
  end

  @doc """
  List team repositories
  Lists a team's repositories visible to the authenticated user.  **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/repos`.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - team_slug (String.t): team_slug parameter
  - opts (KeywordList): [optional] Optional parameters
    - :per_page (integer()): Results per page (max 100)
    - :page (integer()): Page number of the results to fetch.
  ## Returns

  {:ok, [%MinimalRepository{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec teams_list_repos_in_org(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, list(ExOctocat.Model.MinimalRepository.t())} | {:error, Tesla.Env.t()}
  def teams_list_repos_in_org(connection, org, team_slug, opts \\ []) do
    optional_params = %{
      :per_page => :query,
      :page => :query
    }

    %{}
    |> method(:get)
    |> url("/orgs/#{org}/teams/#{team_slug}/repos")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, [%ExOctocat.Model.MinimalRepository{}]}
    ])
  end

  @doc """
  List team repositories (Legacy)
  **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [List team repositories](https://docs.github.com/rest/reference/teams#list-team-repositories) endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - team_id (integer()):
  - opts (KeywordList): [optional] Optional parameters
    - :per_page (integer()): Results per page (max 100)
    - :page (integer()): Page number of the results to fetch.
  ## Returns

  {:ok, [%MinimalRepository{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec teams_list_repos_legacy(Tesla.Env.client(), integer(), keyword()) ::
          {:ok, ExOctocat.Model.BasicError.t()}
          | {:ok, list(ExOctocat.Model.MinimalRepository.t())}
          | {:error, Tesla.Env.t()}
  def teams_list_repos_legacy(connection, team_id, opts \\ []) do
    optional_params = %{
      :per_page => :query,
      :page => :query
    }

    %{}
    |> method(:get)
    |> url("/teams/#{team_id}/repos")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, [%ExOctocat.Model.MinimalRepository{}]},
      {404, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  Remove team member (Legacy)
  The \"Remove team member\" endpoint (described below) is deprecated.  We recommend using the [Remove team membership for a user](https://docs.github.com/rest/reference/teams#remove-team-membership-for-a-user) endpoint instead. It allows you to remove both active and pending memberships.  Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  To remove a team member, the authenticated user must have 'admin' permissions to the team or be an owner of the org that the team is associated with. Removing a team member does not delete the user, it just removes them from the team.  **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see \"[Synchronizing teams between your identity provider and GitHub](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/).\"

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - team_id (integer()):
  - username (String.t):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec teams_remove_member_legacy(Tesla.Env.client(), integer(), String.t(), keyword()) ::
          {:ok, nil} | {:error, Tesla.Env.t()}
  def teams_remove_member_legacy(connection, team_id, username, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/teams/#{team_id}/members/#{username}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false},
      {404, false}
    ])
  end

  @doc """
  Remove team membership for a user
  Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  To remove a membership between a user and a team, the authenticated user must have 'admin' permissions to the team or be an owner of the organization that the team is associated with. Removing team membership does not delete the user, it just removes their membership from the team.  **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see \"[Synchronizing teams between your identity provider and GitHub](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/).\"  **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/memberships/{username}`.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - team_slug (String.t): team_slug parameter
  - username (String.t):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec teams_remove_membership_for_user_in_org(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, nil} | {:error, Tesla.Env.t()}
  def teams_remove_membership_for_user_in_org(connection, org, team_slug, username, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/orgs/#{org}/teams/#{team_slug}/memberships/#{username}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false},
      {403, false}
    ])
  end

  @doc """
  Remove team membership for a user (Legacy)
  **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove team membership for a user](https://docs.github.com/rest/reference/teams#remove-team-membership-for-a-user) endpoint.  Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  To remove a membership between a user and a team, the authenticated user must have 'admin' permissions to the team or be an owner of the organization that the team is associated with. Removing team membership does not delete the user, it just removes their membership from the team.  **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see \"[Synchronizing teams between your identity provider and GitHub](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/).\"

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - team_id (integer()):
  - username (String.t):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec teams_remove_membership_for_user_legacy(
          Tesla.Env.client(),
          integer(),
          String.t(),
          keyword()
        ) :: {:ok, nil} | {:error, Tesla.Env.t()}
  def teams_remove_membership_for_user_legacy(connection, team_id, username, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/teams/#{team_id}/memberships/#{username}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false},
      {403, false}
    ])
  end

  @doc """
  Remove a project from a team
  Removes an organization project from a team. An organization owner or a team maintainer can remove any project from the team. To remove a project from a team as an organization member, the authenticated user must have `read` access to both the team and project, or `admin` access to the team or project. This endpoint removes the project from the team, but does not delete the project.  **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/projects/{project_id}`.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - team_slug (String.t): team_slug parameter
  - project_id (integer()):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec teams_remove_project_in_org(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          integer(),
          keyword()
        ) :: {:ok, nil} | {:error, Tesla.Env.t()}
  def teams_remove_project_in_org(connection, org, team_slug, project_id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/orgs/#{org}/teams/#{team_slug}/projects/#{project_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false}
    ])
  end

  @doc """
  Remove a project from a team (Legacy)
  **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove a project from a team](https://docs.github.com/rest/reference/teams#remove-a-project-from-a-team) endpoint.  Removes an organization project from a team. An organization owner or a team maintainer can remove any project from the team. To remove a project from a team as an organization member, the authenticated user must have `read` access to both the team and project, or `admin` access to the team or project. **Note:** This endpoint removes the project from the team, but does not delete it.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - team_id (integer()):
  - project_id (integer()):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec teams_remove_project_legacy(Tesla.Env.client(), integer(), integer(), keyword()) ::
          {:ok, nil}
          | {:ok, ExOctocat.Model.InlineResponse415.t()}
          | {:ok, ExOctocat.Model.ValidationError.t()}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:error, Tesla.Env.t()}
  def teams_remove_project_legacy(connection, team_id, project_id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/teams/#{team_id}/projects/#{project_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false},
      {404, %ExOctocat.Model.BasicError{}},
      {415, %ExOctocat.Model.InlineResponse415{}},
      {422, %ExOctocat.Model.ValidationError{}}
    ])
  end

  @doc """
  Remove a repository from a team
  If the authenticated user is an organization owner or a team maintainer, they can remove any repositories from the team. To remove a repository from a team as an organization member, the authenticated user must have admin access to the repository and must be able to see the team. This does not delete the repository, it just removes it from the team.  **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - team_slug (String.t): team_slug parameter
  - owner (String.t):
  - repo (String.t):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec teams_remove_repo_in_org(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, nil} | {:error, Tesla.Env.t()}
  def teams_remove_repo_in_org(connection, org, team_slug, owner, repo, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/orgs/#{org}/teams/#{team_slug}/repos/#{owner}/#{repo}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false}
    ])
  end

  @doc """
  Remove a repository from a team (Legacy)
  **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove a repository from a team](https://docs.github.com/rest/reference/teams#remove-a-repository-from-a-team) endpoint.  If the authenticated user is an organization owner or a team maintainer, they can remove any repositories from the team. To remove a repository from a team as an organization member, the authenticated user must have admin access to the repository and must be able to see the team. NOTE: This does not delete the repository, it just removes it from the team.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - team_id (integer()):
  - owner (String.t):
  - repo (String.t):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec teams_remove_repo_legacy(Tesla.Env.client(), integer(), String.t(), String.t(), keyword()) ::
          {:ok, nil} | {:error, Tesla.Env.t()}
  def teams_remove_repo_legacy(connection, team_id, owner, repo, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/teams/#{team_id}/repos/#{owner}/#{repo}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false}
    ])
  end

  @doc """
  Update a discussion comment
  Edits the body text of a discussion comment. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  **Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - team_slug (String.t): team_slug parameter
  - discussion_number (integer()):
  - comment_number (integer()):
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject45):
  ## Returns

  {:ok, ExOctocat.Model.TeamDiscussionComment.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec teams_update_discussion_comment_in_org(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          integer(),
          integer(),
          keyword()
        ) :: {:ok, ExOctocat.Model.TeamDiscussionComment.t()} | {:error, Tesla.Env.t()}
  def teams_update_discussion_comment_in_org(
        connection,
        org,
        team_slug,
        discussion_number,
        comment_number,
        opts \\ []
      ) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:patch)
    |> url(
      "/orgs/#{org}/teams/#{team_slug}/discussions/#{discussion_number}/comments/#{comment_number}"
    )
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.TeamDiscussionComment{}}
    ])
  end

  @doc """
  Update a discussion comment (Legacy)
  **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a discussion comment](https://docs.github.com/rest/reference/teams#update-a-discussion-comment) endpoint.  Edits the body text of a discussion comment. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - team_id (integer()):
  - discussion_number (integer()):
  - comment_number (integer()):
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject154):
  ## Returns

  {:ok, ExOctocat.Model.TeamDiscussionComment.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec teams_update_discussion_comment_legacy(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          keyword()
        ) :: {:ok, ExOctocat.Model.TeamDiscussionComment.t()} | {:error, Tesla.Env.t()}
  def teams_update_discussion_comment_legacy(
        connection,
        team_id,
        discussion_number,
        comment_number,
        opts \\ []
      ) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:patch)
    |> url("/teams/#{team_id}/discussions/#{discussion_number}/comments/#{comment_number}")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.TeamDiscussionComment{}}
    ])
  end

  @doc """
  Update a discussion
  Edits the title and body text of a discussion post. Only the parameters you provide are updated. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  **Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - team_slug (String.t): team_slug parameter
  - discussion_number (integer()):
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject43):
  ## Returns

  {:ok, ExOctocat.Model.TeamDiscussion.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec teams_update_discussion_in_org(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          integer(),
          keyword()
        ) :: {:ok, ExOctocat.Model.TeamDiscussion.t()} | {:error, Tesla.Env.t()}
  def teams_update_discussion_in_org(connection, org, team_slug, discussion_number, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:patch)
    |> url("/orgs/#{org}/teams/#{team_slug}/discussions/#{discussion_number}")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.TeamDiscussion{}}
    ])
  end

  @doc """
  Update a discussion (Legacy)
  **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a discussion](https://docs.github.com/rest/reference/teams#update-a-discussion) endpoint.  Edits the title and body text of a discussion post. Only the parameters you provide are updated. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - team_id (integer()):
  - discussion_number (integer()):
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject152):
  ## Returns

  {:ok, ExOctocat.Model.TeamDiscussion.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec teams_update_discussion_legacy(Tesla.Env.client(), integer(), integer(), keyword()) ::
          {:ok, ExOctocat.Model.TeamDiscussion.t()} | {:error, Tesla.Env.t()}
  def teams_update_discussion_legacy(connection, team_id, discussion_number, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:patch)
    |> url("/teams/#{team_id}/discussions/#{discussion_number}")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.TeamDiscussion{}}
    ])
  end

  @doc """
  Update a team
  To edit a team, the authenticated user must either be an organization owner or a team maintainer.  **Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}`.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - team_slug (String.t): team_slug parameter
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject41):
  ## Returns

  {:ok, ExOctocat.Model.TeamFull.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec teams_update_in_org(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, ExOctocat.Model.TeamFull.t()} | {:error, Tesla.Env.t()}
  def teams_update_in_org(connection, org, team_slug, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:patch)
    |> url("/orgs/#{org}/teams/#{team_slug}")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {201, %ExOctocat.Model.TeamFull{}}
    ])
  end

  @doc """
  Update a team (Legacy)
  **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a team](https://docs.github.com/rest/reference/teams#update-a-team) endpoint.  To edit a team, the authenticated user must either be an organization owner or a team maintainer.  **Note:** With nested teams, the `privacy` for parent teams cannot be `secret`.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - team_id (integer()):
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject150):
  ## Returns

  {:ok, ExOctocat.Model.TeamFull.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec teams_update_legacy(Tesla.Env.client(), integer(), keyword()) ::
          {:ok, ExOctocat.Model.TeamFull.t()}
          | {:ok, ExOctocat.Model.ValidationError.t()}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:error, Tesla.Env.t()}
  def teams_update_legacy(connection, team_id, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:patch)
    |> url("/teams/#{team_id}")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.TeamFull{}},
      {201, %ExOctocat.Model.TeamFull{}},
      {404, %ExOctocat.Model.BasicError{}},
      {422, %ExOctocat.Model.ValidationError{}},
      {403, %ExOctocat.Model.BasicError{}}
    ])
  end
end
