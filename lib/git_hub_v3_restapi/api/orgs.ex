# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule ExOctocat.Api.Orgs do
  @moduledoc """
  API calls for all endpoints tagged `Orgs`.
  """

  alias ExOctocat.Connection
  import ExOctocat.RequestBuilder

  @doc """
  Block a user from an organization

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - username (String.t):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec orgs_block_user(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, nil} | {:ok, ExOctocat.Model.ValidationError.t()} | {:error, Tesla.Env.t()}
  def orgs_block_user(connection, org, username, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/orgs/#{org}/blocks/#{username}")
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false},
      {422, %ExOctocat.Model.ValidationError{}}
    ])
  end

  @doc """
  Cancel an organization invitation
  Cancel an organization invitation. In order to cancel an organization invitation, the authenticated user must be an organization owner.  This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications).

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - invitation_id (integer()): invitation_id parameter
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec orgs_cancel_invitation(Tesla.Env.client(), String.t(), integer(), keyword()) ::
          {:ok, nil}
          | {:ok, ExOctocat.Model.ValidationError.t()}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:error, Tesla.Env.t()}
  def orgs_cancel_invitation(connection, org, invitation_id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/orgs/#{org}/invitations/#{invitation_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false},
      {422, %ExOctocat.Model.ValidationError{}},
      {404, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  Check if a user is blocked by an organization

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - username (String.t):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec orgs_check_blocked_user(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, nil} | {:ok, ExOctocat.Model.BasicError.t()} | {:error, Tesla.Env.t()}
  def orgs_check_blocked_user(connection, org, username, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/orgs/#{org}/blocks/#{username}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false},
      {404, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  Check organization membership for a user
  Check if a user is, publicly or privately, a member of the organization.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - username (String.t):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec orgs_check_membership_for_user(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, nil} | {:error, Tesla.Env.t()}
  def orgs_check_membership_for_user(connection, org, username, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/orgs/#{org}/members/#{username}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false},
      {302, false},
      {404, false}
    ])
  end

  @doc """
  Check public organization membership for a user

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - username (String.t):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec orgs_check_public_membership_for_user(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, nil} | {:error, Tesla.Env.t()}
  def orgs_check_public_membership_for_user(connection, org, username, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/orgs/#{org}/public_members/#{username}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false},
      {404, false}
    ])
  end

  @doc """
  Convert an organization member to outside collaborator
  When an organization member is converted to an outside collaborator, they'll only have access to the repositories that their current team membership allows. The user will no longer be a member of the organization. For more information, see \"[Converting an organization member to an outside collaborator](https://help.github.com/articles/converting-an-organization-member-to-an-outside-collaborator/)\".

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - username (String.t):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, map()} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec orgs_convert_member_to_outside_collaborator(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, Map.t()}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:error, Tesla.Env.t()}
  def orgs_convert_member_to_outside_collaborator(connection, org, username, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/orgs/#{org}/outside_collaborators/#{username}")
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {202, false},
      {204, false},
      {403, false},
      {404, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  Create an organization invitation
  Invite people to an organization by using their GitHub user ID or their email address. In order to create invitations in an organization, the authenticated user must be an organization owner.  This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \"[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\" and \"[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\" for details.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject35):
  ## Returns

  {:ok, ExOctocat.Model.OrganizationInvitation.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec orgs_create_invitation(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, ExOctocat.Model.ValidationError.t()}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:ok, ExOctocat.Model.OrganizationInvitation.t()}
          | {:error, Tesla.Env.t()}
  def orgs_create_invitation(connection, org, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:post)
    |> url("/orgs/#{org}/invitations")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {201, %ExOctocat.Model.OrganizationInvitation{}},
      {422, %ExOctocat.Model.ValidationError{}},
      {404, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  Create an organization webhook
  Here's how you can create a hook that posts payloads in JSON format:

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject32):
  ## Returns

  {:ok, ExOctocat.Model.OrgHook.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec orgs_create_webhook(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, ExOctocat.Model.OrgHook.t()}
          | {:ok, ExOctocat.Model.ValidationError.t()}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:error, Tesla.Env.t()}
  def orgs_create_webhook(connection, org, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:post)
    |> url("/orgs/#{org}/hooks")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {201, %ExOctocat.Model.OrgHook{}},
      {422, %ExOctocat.Model.ValidationError{}},
      {404, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  Delete an organization webhook

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - hook_id (integer()):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec orgs_delete_webhook(Tesla.Env.client(), String.t(), integer(), keyword()) ::
          {:ok, nil} | {:ok, ExOctocat.Model.BasicError.t()} | {:error, Tesla.Env.t()}
  def orgs_delete_webhook(connection, org, hook_id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/orgs/#{org}/hooks/#{hook_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false},
      {404, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  Get an organization
  To see many of the organization response values, you need to be an authenticated organization owner with the `admin:org` scope. When the value of `two_factor_requirement_enabled` is `true`, the organization requires all members, billing managers, and outside collaborators to enable [two-factor authentication](https://help.github.com/articles/securing-your-account-with-two-factor-authentication-2fa/).  GitHub Apps with the `Organization plan` permission can use this endpoint to retrieve information about an organization's GitHub plan. See \"[Authenticating with GitHub Apps](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/)\" for details. For an example response, see 'Response with GitHub plan information' below.\"

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, ExOctocat.Model.OrganizationFull.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec orgs_get(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, ExOctocat.Model.BasicError.t()}
          | {:ok, ExOctocat.Model.OrganizationFull.t()}
          | {:error, Tesla.Env.t()}
  def orgs_get(connection, org, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/orgs/#{org}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.OrganizationFull{}},
      {404, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  Get the audit log for an organization
  Gets the audit log for an organization. For more information, see \"[Reviewing the audit log for your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/reviewing-the-audit-log-for-your-organization).\"  To use this endpoint, you must be an organization owner, and you must use an access token with the `admin:org` scope. GitHub Apps must have the `organization_administration` read permission to use this endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :phrase (String.t): A search phrase. For more information, see [Searching the audit log](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/reviewing-the-audit-log-for-your-organization#searching-the-audit-log).
    - :include (String.t): The event types to include:  - `web` - returns web (non-Git) events - `git` - returns Git events - `all` - returns both web and Git events  The default is `web`.
    - :after (String.t): A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events after this cursor.
    - :before (String.t): A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events before this cursor.
    - :order (String.t): The order of audit log events. To list newest events first, specify `desc`. To list oldest events first, specify `asc`.  The default is `desc`.
    - :per_page (integer()): Results per page (max 100)
    - :page (integer()): Page number of the results to fetch.
  ## Returns

  {:ok, [%AuditLogEvent{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec orgs_get_audit_log(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, list(ExOctocat.Model.AuditLogEvent.t())} | {:error, Tesla.Env.t()}
  def orgs_get_audit_log(connection, org, opts \\ []) do
    optional_params = %{
      :phrase => :query,
      :include => :query,
      :after => :query,
      :before => :query,
      :order => :query,
      :per_page => :query,
      :page => :query
    }

    %{}
    |> method(:get)
    |> url("/orgs/#{org}/audit-log")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, [%ExOctocat.Model.AuditLogEvent{}]}
    ])
  end

  @doc """
  Get an organization membership for the authenticated user

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, ExOctocat.Model.OrgMembership.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec orgs_get_membership_for_authenticated_user(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, ExOctocat.Model.BasicError.t()}
          | {:ok, ExOctocat.Model.OrgMembership.t()}
          | {:error, Tesla.Env.t()}
  def orgs_get_membership_for_authenticated_user(connection, org, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/user/memberships/orgs/#{org}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.OrgMembership{}},
      {403, %ExOctocat.Model.BasicError{}},
      {404, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  Get organization membership for a user
  In order to get a user's membership with an organization, the authenticated user must be an organization member. The `state` parameter in the response can be used to identify the user's membership status.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - username (String.t):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, ExOctocat.Model.OrgMembership.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec orgs_get_membership_for_user(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, ExOctocat.Model.BasicError.t()}
          | {:ok, ExOctocat.Model.OrgMembership.t()}
          | {:error, Tesla.Env.t()}
  def orgs_get_membership_for_user(connection, org, username, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/orgs/#{org}/memberships/#{username}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.OrgMembership{}},
      {404, %ExOctocat.Model.BasicError{}},
      {403, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  Get an organization webhook
  Returns a webhook configured in an organization. To get only the webhook `config` properties, see \"[Get a webhook configuration for an organization](/rest/reference/orgs#get-a-webhook-configuration-for-an-organization).\"

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - hook_id (integer()):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, ExOctocat.Model.OrgHook.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec orgs_get_webhook(Tesla.Env.client(), String.t(), integer(), keyword()) ::
          {:ok, ExOctocat.Model.OrgHook.t()}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:error, Tesla.Env.t()}
  def orgs_get_webhook(connection, org, hook_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/orgs/#{org}/hooks/#{hook_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.OrgHook{}},
      {404, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  Get a webhook configuration for an organization
  Returns the webhook configuration for an organization. To get more information about the webhook, including the `active` state and `events`, use \"[Get an organization webhook ](/rest/reference/orgs#get-an-organization-webhook).\"  Access tokens must have the `admin:org_hook` scope, and GitHub Apps must have the `organization_hooks:read` permission.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - hook_id (integer()):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, ExOctocat.Model.WebhookConfig.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec orgs_get_webhook_config_for_org(Tesla.Env.client(), String.t(), integer(), keyword()) ::
          {:ok, ExOctocat.Model.WebhookConfig.t()} | {:error, Tesla.Env.t()}
  def orgs_get_webhook_config_for_org(connection, org, hook_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/orgs/#{org}/hooks/#{hook_id}/config")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.WebhookConfig{}}
    ])
  end

  @doc """
  Get a webhook delivery for an organization webhook
  Returns a delivery for a webhook configured in an organization.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - hook_id (integer()):
  - delivery_id (integer()):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, ExOctocat.Model.HookDelivery.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec orgs_get_webhook_delivery(Tesla.Env.client(), String.t(), integer(), integer(), keyword()) ::
          {:ok, ExOctocat.Model.HookDelivery.t()}
          | {:ok, ExOctocat.Model.ValidationError.t()}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:error, Tesla.Env.t()}
  def orgs_get_webhook_delivery(connection, org, hook_id, delivery_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/orgs/#{org}/hooks/#{hook_id}/deliveries/#{delivery_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.HookDelivery{}},
      {400, %ExOctocat.Model.BasicError{}},
      {422, %ExOctocat.Model.ValidationError{}}
    ])
  end

  @doc """
  List organizations
  Lists all organizations, in the order that they were created on GitHub.  **Note:** Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header) to get the URL for the next page of organizations.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :since (integer()): An organization ID. Only return organizations with an ID greater than this ID.
    - :per_page (integer()): Results per page (max 100)
  ## Returns

  {:ok, [%OrganizationSimple{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec orgs_list(Tesla.Env.client(), keyword()) ::
          {:ok, nil}
          | {:ok, list(ExOctocat.Model.OrganizationSimple.t())}
          | {:error, Tesla.Env.t()}
  def orgs_list(connection, opts \\ []) do
    optional_params = %{
      :since => :query,
      :per_page => :query
    }

    %{}
    |> method(:get)
    |> url("/organizations")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, [%ExOctocat.Model.OrganizationSimple{}]},
      {304, false}
    ])
  end

  @doc """
  List app installations for an organization
  Lists all GitHub Apps in an organization. The installation count includes all GitHub Apps installed on repositories in the organization. You must be an organization owner with `admin:read` scope to use this endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :per_page (integer()): Results per page (max 100)
    - :page (integer()): Page number of the results to fetch.
  ## Returns

  {:ok, ExOctocat.Model.InlineResponse20012.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec orgs_list_app_installations(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, ExOctocat.Model.InlineResponse20012.t()} | {:error, Tesla.Env.t()}
  def orgs_list_app_installations(connection, org, opts \\ []) do
    optional_params = %{
      :per_page => :query,
      :page => :query
    }

    %{}
    |> method(:get)
    |> url("/orgs/#{org}/installations")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.InlineResponse20012{}}
    ])
  end

  @doc """
  List users blocked by an organization
  List the users blocked by an organization.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, [%SimpleUser{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec orgs_list_blocked_users(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, ExOctocat.Model.InlineResponse415.t()}
          | {:ok, list(ExOctocat.Model.SimpleUser.t())}
          | {:error, Tesla.Env.t()}
  def orgs_list_blocked_users(connection, org, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/orgs/#{org}/blocks")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, [%ExOctocat.Model.SimpleUser{}]},
      {415, %ExOctocat.Model.InlineResponse415{}}
    ])
  end

  @doc """
  List failed organization invitations
  The return hash contains `failed_at` and `failed_reason` fields which represent the time at which the invitation failed and the reason for the failure.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :per_page (integer()): Results per page (max 100)
    - :page (integer()): Page number of the results to fetch.
  ## Returns

  {:ok, [%OrganizationInvitation{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec orgs_list_failed_invitations(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, ExOctocat.Model.BasicError.t()}
          | {:ok, list(ExOctocat.Model.OrganizationInvitation.t())}
          | {:error, Tesla.Env.t()}
  def orgs_list_failed_invitations(connection, org, opts \\ []) do
    optional_params = %{
      :per_page => :query,
      :page => :query
    }

    %{}
    |> method(:get)
    |> url("/orgs/#{org}/failed_invitations")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, [%ExOctocat.Model.OrganizationInvitation{}]},
      {404, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  List organizations for the authenticated user
  List organizations for the authenticated user.  **OAuth scope requirements**  This only lists organizations that your authorization allows you to operate on in some way (e.g., you can list teams with `read:org` scope, you can publicize your organization membership with `user` scope, etc.). Therefore, this API requires at least `user` or `read:org` scope. OAuth requests with insufficient scope receive a `403 Forbidden` response.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :per_page (integer()): Results per page (max 100)
    - :page (integer()): Page number of the results to fetch.
  ## Returns

  {:ok, [%OrganizationSimple{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec orgs_list_for_authenticated_user(Tesla.Env.client(), keyword()) ::
          {:ok, nil}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:ok, list(ExOctocat.Model.OrganizationSimple.t())}
          | {:error, Tesla.Env.t()}
  def orgs_list_for_authenticated_user(connection, opts \\ []) do
    optional_params = %{
      :per_page => :query,
      :page => :query
    }

    %{}
    |> method(:get)
    |> url("/user/orgs")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, [%ExOctocat.Model.OrganizationSimple{}]},
      {304, false},
      {403, %ExOctocat.Model.BasicError{}},
      {401, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  List organizations for a user
  List [public organization memberships](https://help.github.com/articles/publicizing-or-concealing-organization-membership) for the specified user.  This method only lists _public_ memberships, regardless of authentication. If you need to fetch all of the organization memberships (public and private) for the authenticated user, use the [List organizations for the authenticated user](https://docs.github.com/rest/reference/orgs#list-organizations-for-the-authenticated-user) API instead.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - username (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :per_page (integer()): Results per page (max 100)
    - :page (integer()): Page number of the results to fetch.
  ## Returns

  {:ok, [%OrganizationSimple{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec orgs_list_for_user(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, list(ExOctocat.Model.OrganizationSimple.t())} | {:error, Tesla.Env.t()}
  def orgs_list_for_user(connection, username, opts \\ []) do
    optional_params = %{
      :per_page => :query,
      :page => :query
    }

    %{}
    |> method(:get)
    |> url("/users/#{username}/orgs")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, [%ExOctocat.Model.OrganizationSimple{}]}
    ])
  end

  @doc """
  List organization invitation teams
  List all teams associated with an invitation. In order to see invitations in an organization, the authenticated user must be an organization owner.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - invitation_id (integer()): invitation_id parameter
  - opts (KeywordList): [optional] Optional parameters
    - :per_page (integer()): Results per page (max 100)
    - :page (integer()): Page number of the results to fetch.
  ## Returns

  {:ok, [%Team{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec orgs_list_invitation_teams(Tesla.Env.client(), String.t(), integer(), keyword()) ::
          {:ok, list(ExOctocat.Model.Team.t())}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:error, Tesla.Env.t()}
  def orgs_list_invitation_teams(connection, org, invitation_id, opts \\ []) do
    optional_params = %{
      :per_page => :query,
      :page => :query
    }

    %{}
    |> method(:get)
    |> url("/orgs/#{org}/invitations/#{invitation_id}/teams")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, [%ExOctocat.Model.Team{}]},
      {404, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  List organization members
  List all users who are members of an organization. If the authenticated user is also a member of this organization then both concealed and public members will be returned.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :filter (String.t): Filter members returned in the list. Can be one of:   \\* `2fa_disabled` - Members without [two-factor authentication](https://github.com/blog/1614-two-factor-authentication) enabled. Available for organization owners.   \\* `all` - All members the authenticated user can see.
    - :role (String.t): Filter members returned by their role. Can be one of:   \\* `all` - All members of the organization, regardless of role.   \\* `admin` - Organization owners.   \\* `member` - Non-owner organization members.
    - :per_page (integer()): Results per page (max 100)
    - :page (integer()): Page number of the results to fetch.
  ## Returns

  {:ok, [%SimpleUser{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec orgs_list_members(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, nil}
          | {:ok, ExOctocat.Model.ValidationError.t()}
          | {:ok, list(ExOctocat.Model.SimpleUser.t())}
          | {:error, Tesla.Env.t()}
  def orgs_list_members(connection, org, opts \\ []) do
    optional_params = %{
      :filter => :query,
      :role => :query,
      :per_page => :query,
      :page => :query
    }

    %{}
    |> method(:get)
    |> url("/orgs/#{org}/members")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, [%ExOctocat.Model.SimpleUser{}]},
      {302, false},
      {422, %ExOctocat.Model.ValidationError{}}
    ])
  end

  @doc """
  List organization memberships for the authenticated user

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :state (String.t): Indicates the state of the memberships to return. Can be either `active` or `pending`. If not specified, the API returns both active and pending memberships.
    - :per_page (integer()): Results per page (max 100)
    - :page (integer()): Page number of the results to fetch.
  ## Returns

  {:ok, [%OrgMembership{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec orgs_list_memberships_for_authenticated_user(Tesla.Env.client(), keyword()) ::
          {:ok, nil}
          | {:ok, ExOctocat.Model.ValidationError.t()}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:ok, list(ExOctocat.Model.OrgMembership.t())}
          | {:error, Tesla.Env.t()}
  def orgs_list_memberships_for_authenticated_user(connection, opts \\ []) do
    optional_params = %{
      :state => :query,
      :per_page => :query,
      :page => :query
    }

    %{}
    |> method(:get)
    |> url("/user/memberships/orgs")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, [%ExOctocat.Model.OrgMembership{}]},
      {304, false},
      {403, %ExOctocat.Model.BasicError{}},
      {401, %ExOctocat.Model.BasicError{}},
      {422, %ExOctocat.Model.ValidationError{}}
    ])
  end

  @doc """
  List outside collaborators for an organization
  List all users who are outside collaborators of an organization.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :filter (String.t): Filter the list of outside collaborators. Can be one of:   \\* `2fa_disabled`: Outside collaborators without [two-factor authentication](https://github.com/blog/1614-two-factor-authentication) enabled.   \\* `all`: All outside collaborators.
    - :per_page (integer()): Results per page (max 100)
    - :page (integer()): Page number of the results to fetch.
  ## Returns

  {:ok, [%SimpleUser{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec orgs_list_outside_collaborators(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, list(ExOctocat.Model.SimpleUser.t())} | {:error, Tesla.Env.t()}
  def orgs_list_outside_collaborators(connection, org, opts \\ []) do
    optional_params = %{
      :filter => :query,
      :per_page => :query,
      :page => :query
    }

    %{}
    |> method(:get)
    |> url("/orgs/#{org}/outside_collaborators")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, [%ExOctocat.Model.SimpleUser{}]}
    ])
  end

  @doc """
  List pending organization invitations
  The return hash contains a `role` field which refers to the Organization Invitation role and will be one of the following values: `direct_member`, `admin`, `billing_manager`, `hiring_manager`, or `reinstate`. If the invitee is not a GitHub member, the `login` field in the return hash will be `null`.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :per_page (integer()): Results per page (max 100)
    - :page (integer()): Page number of the results to fetch.
  ## Returns

  {:ok, [%OrganizationInvitation{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec orgs_list_pending_invitations(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, ExOctocat.Model.BasicError.t()}
          | {:ok, list(ExOctocat.Model.OrganizationInvitation.t())}
          | {:error, Tesla.Env.t()}
  def orgs_list_pending_invitations(connection, org, opts \\ []) do
    optional_params = %{
      :per_page => :query,
      :page => :query
    }

    %{}
    |> method(:get)
    |> url("/orgs/#{org}/invitations")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, [%ExOctocat.Model.OrganizationInvitation{}]},
      {404, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  List public organization members
  Members of an organization can choose to have their membership publicized or not.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :per_page (integer()): Results per page (max 100)
    - :page (integer()): Page number of the results to fetch.
  ## Returns

  {:ok, [%SimpleUser{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec orgs_list_public_members(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, list(ExOctocat.Model.SimpleUser.t())} | {:error, Tesla.Env.t()}
  def orgs_list_public_members(connection, org, opts \\ []) do
    optional_params = %{
      :per_page => :query,
      :page => :query
    }

    %{}
    |> method(:get)
    |> url("/orgs/#{org}/public_members")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, [%ExOctocat.Model.SimpleUser{}]}
    ])
  end

  @doc """
  List SAML SSO authorizations for an organization
  Listing and deleting credential authorizations is available to organizations with GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products).  An authenticated organization owner with the `read:org` scope can list all credential authorizations for an organization that uses SAML single sign-on (SSO). The credentials are either personal access tokens or SSH keys that organization members have authorized for the organization. For more information, see [About authentication with SAML single sign-on](https://help.github.com/en/articles/about-authentication-with-saml-single-sign-on).

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, [%CredentialAuthorization{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec orgs_list_saml_sso_authorizations(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, list(ExOctocat.Model.CredentialAuthorization.t())} | {:error, Tesla.Env.t()}
  def orgs_list_saml_sso_authorizations(connection, org, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/orgs/#{org}/credential-authorizations")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, [%ExOctocat.Model.CredentialAuthorization{}]}
    ])
  end

  @doc """
  List deliveries for an organization webhook
  Returns a list of webhook deliveries for a webhook configured in an organization.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - hook_id (integer()):
  - opts (KeywordList): [optional] Optional parameters
    - :per_page (integer()): Results per page (max 100)
    - :cursor (String.t): Used for pagination: the starting delivery from which the page of deliveries is fetched. Refer to the `link` header for the next and previous page cursors.
  ## Returns

  {:ok, [%HookDeliveryItem{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec orgs_list_webhook_deliveries(Tesla.Env.client(), String.t(), integer(), keyword()) ::
          {:ok, ExOctocat.Model.ValidationError.t()}
          | {:ok, list(ExOctocat.Model.HookDeliveryItem.t())}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:error, Tesla.Env.t()}
  def orgs_list_webhook_deliveries(connection, org, hook_id, opts \\ []) do
    optional_params = %{
      :per_page => :query,
      :cursor => :query
    }

    %{}
    |> method(:get)
    |> url("/orgs/#{org}/hooks/#{hook_id}/deliveries")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, [%ExOctocat.Model.HookDeliveryItem{}]},
      {400, %ExOctocat.Model.BasicError{}},
      {422, %ExOctocat.Model.ValidationError{}}
    ])
  end

  @doc """
  List organization webhooks

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :per_page (integer()): Results per page (max 100)
    - :page (integer()): Page number of the results to fetch.
  ## Returns

  {:ok, [%OrgHook{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec orgs_list_webhooks(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, ExOctocat.Model.BasicError.t()}
          | {:ok, list(ExOctocat.Model.OrgHook.t())}
          | {:error, Tesla.Env.t()}
  def orgs_list_webhooks(connection, org, opts \\ []) do
    optional_params = %{
      :per_page => :query,
      :page => :query
    }

    %{}
    |> method(:get)
    |> url("/orgs/#{org}/hooks")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, [%ExOctocat.Model.OrgHook{}]},
      {404, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  Ping an organization webhook
  This will trigger a [ping event](https://docs.github.com/webhooks/#ping-event) to be sent to the hook.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - hook_id (integer()):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec orgs_ping_webhook(Tesla.Env.client(), String.t(), integer(), keyword()) ::
          {:ok, nil} | {:ok, ExOctocat.Model.BasicError.t()} | {:error, Tesla.Env.t()}
  def orgs_ping_webhook(connection, org, hook_id, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/orgs/#{org}/hooks/#{hook_id}/pings")
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false},
      {404, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  Redeliver a delivery for an organization webhook
  Redeliver a delivery for a webhook configured in an organization.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - hook_id (integer()):
  - delivery_id (integer()):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, map()} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec orgs_redeliver_webhook_delivery(
          Tesla.Env.client(),
          String.t(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok, Map.t()}
          | {:ok, ExOctocat.Model.ValidationError.t()}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:error, Tesla.Env.t()}
  def orgs_redeliver_webhook_delivery(connection, org, hook_id, delivery_id, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/orgs/#{org}/hooks/#{hook_id}/deliveries/#{delivery_id}/attempts")
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {202, false},
      {400, %ExOctocat.Model.BasicError{}},
      {422, %ExOctocat.Model.ValidationError{}}
    ])
  end

  @doc """
  Remove an organization member
  Removing a user from this list will remove them from all teams and they will no longer have any access to the organization's repositories.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - username (String.t):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec orgs_remove_member(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, nil} | {:ok, ExOctocat.Model.BasicError.t()} | {:error, Tesla.Env.t()}
  def orgs_remove_member(connection, org, username, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/orgs/#{org}/members/#{username}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false},
      {403, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  Remove organization membership for a user
  In order to remove a user's membership with an organization, the authenticated user must be an organization owner.  If the specified user is an active member of the organization, this will remove them from the organization. If the specified user has been invited to the organization, this will cancel their invitation. The specified user will receive an email notification in both cases.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - username (String.t):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec orgs_remove_membership_for_user(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, nil} | {:ok, ExOctocat.Model.BasicError.t()} | {:error, Tesla.Env.t()}
  def orgs_remove_membership_for_user(connection, org, username, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/orgs/#{org}/memberships/#{username}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false},
      {403, %ExOctocat.Model.BasicError{}},
      {404, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  Remove outside collaborator from an organization
  Removing a user from this list will remove them from all the organization's repositories.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - username (String.t):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec orgs_remove_outside_collaborator(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, nil}
          | {:ok, ExOctocat.Model.InlineResponse422.t()}
          | {:error, Tesla.Env.t()}
  def orgs_remove_outside_collaborator(connection, org, username, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/orgs/#{org}/outside_collaborators/#{username}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false},
      {422, %ExOctocat.Model.InlineResponse422{}}
    ])
  end

  @doc """
  Remove public organization membership for the authenticated user

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - username (String.t):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec orgs_remove_public_membership_for_authenticated_user(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, nil} | {:error, Tesla.Env.t()}
  def orgs_remove_public_membership_for_authenticated_user(connection, org, username, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/orgs/#{org}/public_members/#{username}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false}
    ])
  end

  @doc """
  Remove a SAML SSO authorization for an organization
  Listing and deleting credential authorizations is available to organizations with GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products).  An authenticated organization owner with the `admin:org` scope can remove a credential authorization for an organization that uses SAML SSO. Once you remove someone's credential authorization, they will need to create a new personal access token or SSH key and authorize it for the organization they want to access.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - credential_id (integer()):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec orgs_remove_saml_sso_authorization(Tesla.Env.client(), String.t(), integer(), keyword()) ::
          {:ok, nil} | {:ok, ExOctocat.Model.BasicError.t()} | {:error, Tesla.Env.t()}
  def orgs_remove_saml_sso_authorization(connection, org, credential_id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/orgs/#{org}/credential-authorizations/#{credential_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false},
      {404, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  Set organization membership for a user
  Only authenticated organization owners can add a member to the organization or update the member's role.  *   If the authenticated user is _adding_ a member to the organization, the invited user will receive an email inviting them to the organization. The user's [membership status](https://docs.github.com/rest/reference/orgs#get-organization-membership-for-a-user) will be `pending` until they accept the invitation.      *   Authenticated users can _update_ a user's membership by passing the `role` parameter. If the authenticated user changes a member's role to `admin`, the affected user will receive an email notifying them that they've been made an organization owner. If the authenticated user changes an owner's role to `member`, no email will be sent.  **Rate limits**  To prevent abuse, the authenticated user is limited to 50 organization invitations per 24 hour period. If the organization is more than one month old or on a paid plan, the limit is 500 invitations per 24 hour period.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - username (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject36):
  ## Returns

  {:ok, ExOctocat.Model.OrgMembership.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec orgs_set_membership_for_user(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, ExOctocat.Model.ValidationError.t()}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:ok, ExOctocat.Model.OrgMembership.t()}
          | {:error, Tesla.Env.t()}
  def orgs_set_membership_for_user(connection, org, username, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:put)
    |> url("/orgs/#{org}/memberships/#{username}")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.OrgMembership{}},
      {422, %ExOctocat.Model.ValidationError{}},
      {403, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  Set public organization membership for the authenticated user
  The user can publicize their own membership. (A user cannot publicize the membership for another user.)  Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs).\"

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - username (String.t):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec orgs_set_public_membership_for_authenticated_user(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, nil} | {:ok, ExOctocat.Model.BasicError.t()} | {:error, Tesla.Env.t()}
  def orgs_set_public_membership_for_authenticated_user(connection, org, username, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/orgs/#{org}/public_members/#{username}")
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false},
      {403, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  Unblock a user from an organization

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - username (String.t):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec orgs_unblock_user(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, nil} | {:error, Tesla.Env.t()}
  def orgs_unblock_user(connection, org, username, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/orgs/#{org}/blocks/#{username}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false}
    ])
  end

  @doc """
  Update an organization
  **Parameter Deprecation Notice:** GitHub will replace and discontinue `members_allowed_repository_creation_type` in favor of more granular permissions. The new input parameters are `members_can_create_public_repositories`, `members_can_create_private_repositories` for all organizations and `members_can_create_internal_repositories` for organizations associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. For more information, see the [blog post](https://developer.github.com/changes/2019-12-03-internal-visibility-changes).  Enables an authenticated organization owner with the `admin:org` scope to update the organization's profile and member privileges.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject23):
  ## Returns

  {:ok, ExOctocat.Model.OrganizationFull.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec orgs_update(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, ExOctocat.Model.InlineResponse415.t()}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:ok, ExOctocat.Model.OrganizationFull.t()}
          | {:ok, ExOctocat.Model.ValidationError.t()}
          | {:error, Tesla.Env.t()}
  def orgs_update(connection, org, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:patch)
    |> url("/orgs/#{org}")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.OrganizationFull{}},
      {422, %ExOctocat.Model.ValidationError{}},
      {409, %ExOctocat.Model.BasicError{}},
      {415, %ExOctocat.Model.InlineResponse415{}}
    ])
  end

  @doc """
  Update an organization membership for the authenticated user

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject165):
  ## Returns

  {:ok, ExOctocat.Model.OrgMembership.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec orgs_update_membership_for_authenticated_user(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, ExOctocat.Model.ValidationError.t()}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:ok, ExOctocat.Model.OrgMembership.t()}
          | {:error, Tesla.Env.t()}
  def orgs_update_membership_for_authenticated_user(connection, org, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:patch)
    |> url("/user/memberships/orgs/#{org}")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.OrgMembership{}},
      {403, %ExOctocat.Model.BasicError{}},
      {404, %ExOctocat.Model.BasicError{}},
      {422, %ExOctocat.Model.ValidationError{}}
    ])
  end

  @doc """
  Update an organization webhook
  Updates a webhook configured in an organization. When you update a webhook, the `secret` will be overwritten. If you previously had a `secret` set, you must provide the same `secret` or set a new `secret` or the secret will be removed. If you are only updating individual webhook `config` properties, use \"[Update a webhook configuration for an organization](/rest/reference/orgs#update-a-webhook-configuration-for-an-organization).\"

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - hook_id (integer()):
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject33):
  ## Returns

  {:ok, ExOctocat.Model.OrgHook.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec orgs_update_webhook(Tesla.Env.client(), String.t(), integer(), keyword()) ::
          {:ok, ExOctocat.Model.OrgHook.t()}
          | {:ok, ExOctocat.Model.ValidationError.t()}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:error, Tesla.Env.t()}
  def orgs_update_webhook(connection, org, hook_id, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:patch)
    |> url("/orgs/#{org}/hooks/#{hook_id}")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.OrgHook{}},
      {422, %ExOctocat.Model.ValidationError{}},
      {404, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  Update a webhook configuration for an organization
  Updates the webhook configuration for an organization. To update more information about the webhook, including the `active` state and `events`, use \"[Update an organization webhook ](/rest/reference/orgs#update-an-organization-webhook).\"  Access tokens must have the `admin:org_hook` scope, and GitHub Apps must have the `organization_hooks:write` permission.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - hook_id (integer()):
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject34):
  ## Returns

  {:ok, ExOctocat.Model.WebhookConfig.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec orgs_update_webhook_config_for_org(Tesla.Env.client(), String.t(), integer(), keyword()) ::
          {:ok, ExOctocat.Model.WebhookConfig.t()} | {:error, Tesla.Env.t()}
  def orgs_update_webhook_config_for_org(connection, org, hook_id, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:patch)
    |> url("/orgs/#{org}/hooks/#{hook_id}/config")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.WebhookConfig{}}
    ])
  end
end
