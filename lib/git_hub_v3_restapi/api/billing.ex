# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule ExOctocat.Api.Billing do
  @moduledoc """
  API calls for all endpoints tagged `Billing`.
  """

  alias ExOctocat.Connection
  import ExOctocat.RequestBuilder

  @doc """
  Get GitHub Actions billing for an enterprise
  Gets the summary of the free and paid GitHub Actions minutes used.  Paid minutes only apply to workflows in private repositories that use GitHub-hosted runners. Minutes used is listed for each GitHub-hosted runner operating system. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see \"[Managing billing for GitHub Actions](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)\".  The authenticated user must be an enterprise admin.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - enterprise (String.t): The slug version of the enterprise name. You can also substitute this value with the enterprise id.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, ExOctocat.Model.ActionsBillingUsage.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec billing_get_github_actions_billing_ghe(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, ExOctocat.Model.ActionsBillingUsage.t()} | {:error, Tesla.Env.t()}
  def billing_get_github_actions_billing_ghe(connection, enterprise, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/enterprises/#{enterprise}/settings/billing/actions")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.ActionsBillingUsage{}}
    ])
  end

  @doc """
  Get GitHub Actions billing for an organization
  Gets the summary of the free and paid GitHub Actions minutes used.  Paid minutes only apply to workflows in private repositories that use GitHub-hosted runners. Minutes used is listed for each GitHub-hosted runner operating system. Any job re-runs are also included in the usage. The usage returned includes any minute multipliers for macOS and Windows runners, and is rounded up to the nearest whole minute. For more information, see \"[Managing billing for GitHub Actions](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)\".  Access tokens must have the `repo` or `admin:org` scope.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, ExOctocat.Model.ActionsBillingUsage.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec billing_get_github_actions_billing_org(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, ExOctocat.Model.ActionsBillingUsage.t()} | {:error, Tesla.Env.t()}
  def billing_get_github_actions_billing_org(connection, org, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/orgs/#{org}/settings/billing/actions")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.ActionsBillingUsage{}}
    ])
  end

  @doc """
  Get GitHub Actions billing for a user
  Gets the summary of the free and paid GitHub Actions minutes used.  Paid minutes only apply to workflows in private repositories that use GitHub-hosted runners. Minutes used is listed for each GitHub-hosted runner operating system. Any job re-runs are also included in the usage. The usage returned includes any minute multipliers for macOS and Windows runners, and is rounded up to the nearest whole minute. For more information, see \"[Managing billing for GitHub Actions](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)\".  Access tokens must have the `user` scope.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - username (String.t):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, ExOctocat.Model.ActionsBillingUsage.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec billing_get_github_actions_billing_user(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, ExOctocat.Model.ActionsBillingUsage.t()} | {:error, Tesla.Env.t()}
  def billing_get_github_actions_billing_user(connection, username, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/users/#{username}/settings/billing/actions")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.ActionsBillingUsage{}}
    ])
  end

  @doc """
  Get GitHub Packages billing for an enterprise
  Gets the free and paid storage used for GitHub Packages in gigabytes.  Paid minutes only apply to packages stored for private repositories. For more information, see \"[Managing billing for GitHub Packages](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages).\"  The authenticated user must be an enterprise admin.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - enterprise (String.t): The slug version of the enterprise name. You can also substitute this value with the enterprise id.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, ExOctocat.Model.PackagesBillingUsage.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec billing_get_github_packages_billing_ghe(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, ExOctocat.Model.PackagesBillingUsage.t()} | {:error, Tesla.Env.t()}
  def billing_get_github_packages_billing_ghe(connection, enterprise, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/enterprises/#{enterprise}/settings/billing/packages")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.PackagesBillingUsage{}}
    ])
  end

  @doc """
  Get GitHub Packages billing for an organization
  Gets the free and paid storage used for GitHub Packages in gigabytes.  Paid minutes only apply to packages stored for private repositories. For more information, see \"[Managing billing for GitHub Packages](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages).\"  Access tokens must have the `repo` or `admin:org` scope.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, ExOctocat.Model.PackagesBillingUsage.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec billing_get_github_packages_billing_org(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, ExOctocat.Model.PackagesBillingUsage.t()} | {:error, Tesla.Env.t()}
  def billing_get_github_packages_billing_org(connection, org, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/orgs/#{org}/settings/billing/packages")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.PackagesBillingUsage{}}
    ])
  end

  @doc """
  Get GitHub Packages billing for a user
  Gets the free and paid storage used for GitHub Packages in gigabytes.  Paid minutes only apply to packages stored for private repositories. For more information, see \"[Managing billing for GitHub Packages](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages).\"  Access tokens must have the `user` scope.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - username (String.t):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, ExOctocat.Model.PackagesBillingUsage.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec billing_get_github_packages_billing_user(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, ExOctocat.Model.PackagesBillingUsage.t()} | {:error, Tesla.Env.t()}
  def billing_get_github_packages_billing_user(connection, username, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/users/#{username}/settings/billing/packages")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.PackagesBillingUsage{}}
    ])
  end

  @doc """
  Get shared storage billing for an enterprise
  Gets the estimated paid and estimated total storage used for GitHub Actions and Github Packages.  Paid minutes only apply to packages stored for private repositories. For more information, see \"[Managing billing for GitHub Packages](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages).\"  The authenticated user must be an enterprise admin.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - enterprise (String.t): The slug version of the enterprise name. You can also substitute this value with the enterprise id.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, ExOctocat.Model.CombinedBillingUsage.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec billing_get_shared_storage_billing_ghe(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, ExOctocat.Model.CombinedBillingUsage.t()} | {:error, Tesla.Env.t()}
  def billing_get_shared_storage_billing_ghe(connection, enterprise, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/enterprises/#{enterprise}/settings/billing/shared-storage")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.CombinedBillingUsage{}}
    ])
  end

  @doc """
  Get shared storage billing for an organization
  Gets the estimated paid and estimated total storage used for GitHub Actions and Github Packages.  Paid minutes only apply to packages stored for private repositories. For more information, see \"[Managing billing for GitHub Packages](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages).\"  Access tokens must have the `repo` or `admin:org` scope.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, ExOctocat.Model.CombinedBillingUsage.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec billing_get_shared_storage_billing_org(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, ExOctocat.Model.CombinedBillingUsage.t()} | {:error, Tesla.Env.t()}
  def billing_get_shared_storage_billing_org(connection, org, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/orgs/#{org}/settings/billing/shared-storage")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.CombinedBillingUsage{}}
    ])
  end

  @doc """
  Get shared storage billing for a user
  Gets the estimated paid and estimated total storage used for GitHub Actions and Github Packages.  Paid minutes only apply to packages stored for private repositories. For more information, see \"[Managing billing for GitHub Packages](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages).\"  Access tokens must have the `user` scope.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - username (String.t):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, ExOctocat.Model.CombinedBillingUsage.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec billing_get_shared_storage_billing_user(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, ExOctocat.Model.CombinedBillingUsage.t()} | {:error, Tesla.Env.t()}
  def billing_get_shared_storage_billing_user(connection, username, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/users/#{username}/settings/billing/shared-storage")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.CombinedBillingUsage{}}
    ])
  end
end
