# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule ExOctocat.Api.Interactions do
  @moduledoc """
  API calls for all endpoints tagged `Interactions`.
  """

  alias ExOctocat.Connection
  import ExOctocat.RequestBuilder

  @doc """
  Get interaction restrictions for your public repositories
  Shows which type of GitHub user can interact with your public repositories and when the restriction expires.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, InteractionLimitResponse} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec interactions_get_restrictions_for_authenticated_user(Tesla.Env.client(), keyword()) ::
          {:ok, nil}
          | {:ok, ExOctocat.Model.InteractionLimitResponse.t()}
          | {:error, Tesla.Env.t()}
  def interactions_get_restrictions_for_authenticated_user(connection, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/user/interaction-limits")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.InteractionLimitResponse{}},
      {204, false}
    ])
  end

  @doc """
  Get interaction restrictions for an organization
  Shows which type of GitHub user can interact with this organization and when the restriction expires. If there is no restrictions, you will see an empty response.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, InteractionLimitResponse} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec interactions_get_restrictions_for_org(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, ExOctocat.Model.InteractionLimitResponse.t()}
          | {:error, Tesla.Env.t()}
  def interactions_get_restrictions_for_org(connection, org, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/orgs/#{org}/interaction-limits")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.InteractionLimitResponse{}}
    ])
  end

  @doc """
  Get interaction restrictions for a repository
  Shows which type of GitHub user can interact with this repository and when the restriction expires. If there are no restrictions, you will see an empty response.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, InteractionLimitResponse} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec interactions_get_restrictions_for_repo(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, ExOctocat.Model.InteractionLimitResponse.t()}
          | {:error, Tesla.Env.t()}
  def interactions_get_restrictions_for_repo(connection, owner, repo, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/interaction-limits")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.InteractionLimitResponse{}}
    ])
  end

  @doc """
  Remove interaction restrictions from your public repositories
  Removes any interaction restrictions from your public repositories.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec interactions_remove_restrictions_for_authenticated_user(Tesla.Env.client(), keyword()) ::
          {:ok, nil} | {:error, Tesla.Env.t()}
  def interactions_remove_restrictions_for_authenticated_user(connection, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/user/interaction-limits")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false}
    ])
  end

  @doc """
  Remove interaction restrictions for an organization
  Removes all interaction restrictions from public repositories in the given organization. You must be an organization owner to remove restrictions.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec interactions_remove_restrictions_for_org(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, nil} | {:error, Tesla.Env.t()}
  def interactions_remove_restrictions_for_org(connection, org, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/orgs/#{org}/interaction-limits")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false}
    ])
  end

  @doc """
  Remove interaction restrictions for a repository
  Removes all interaction restrictions from the given repository. You must have owner or admin access to remove restrictions. If the interaction limit is set for the user or organization that owns this repository, you will receive a `409 Conflict` response and will not be able to use this endpoint to change the interaction limit for a single repository.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec interactions_remove_restrictions_for_repo(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, nil} | {:error, Tesla.Env.t()}
  def interactions_remove_restrictions_for_repo(connection, owner, repo, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/repos/#{owner}/#{repo}/interaction-limits")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false},
      {409, false}
    ])
  end

  @doc """
  Set interaction restrictions for your public repositories
  Temporarily restricts which type of GitHub user can interact with your public repositories. Setting the interaction limit at the user level will overwrite any interaction limits that are set for individual repositories owned by the user.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :body (InteractionLimit):
  ## Returns

  {:ok, ExOctocat.Model.InteractionLimitResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec interactions_set_restrictions_for_authenticated_user(Tesla.Env.client(), keyword()) ::
          {:ok, ExOctocat.Model.InteractionLimitResponse.t()}
          | {:ok, ExOctocat.Model.ValidationError.t()}
          | {:error, Tesla.Env.t()}
  def interactions_set_restrictions_for_authenticated_user(connection, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:put)
    |> url("/user/interaction-limits")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.InteractionLimitResponse{}},
      {422, %ExOctocat.Model.ValidationError{}}
    ])
  end

  @doc """
  Set interaction restrictions for an organization
  Temporarily restricts interactions to a certain type of GitHub user in any public repository in the given organization. You must be an organization owner to set these restrictions. Setting the interaction limit at the organization level will overwrite any interaction limits that are set for individual repositories owned by the organization.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - org (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :body (InteractionLimit):
  ## Returns

  {:ok, ExOctocat.Model.InteractionLimitResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec interactions_set_restrictions_for_org(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, ExOctocat.Model.InteractionLimitResponse.t()}
          | {:ok, ExOctocat.Model.ValidationError.t()}
          | {:error, Tesla.Env.t()}
  def interactions_set_restrictions_for_org(connection, org, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:put)
    |> url("/orgs/#{org}/interaction-limits")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.InteractionLimitResponse{}},
      {422, %ExOctocat.Model.ValidationError{}}
    ])
  end

  @doc """
  Set interaction restrictions for a repository
  Temporarily restricts interactions to a certain type of GitHub user within the given repository. You must have owner or admin access to set these restrictions. If an interaction limit is set for the user or organization that owns this repository, you will receive a `409 Conflict` response and will not be able to use this endpoint to change the interaction limit for a single repository.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :body (InteractionLimit):
  ## Returns

  {:ok, ExOctocat.Model.InteractionLimitResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec interactions_set_restrictions_for_repo(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, ExOctocat.Model.InteractionLimitResponse.t()}
          | {:error, Tesla.Env.t()}
  def interactions_set_restrictions_for_repo(connection, owner, repo, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:put)
    |> url("/repos/#{owner}/#{repo}/interaction-limits")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.InteractionLimitResponse{}},
      {409, false}
    ])
  end
end
