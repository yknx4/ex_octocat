# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule ExOctocat.Api.Checks do
  @moduledoc """
  API calls for all endpoints tagged `Checks`.
  """

  alias ExOctocat.Connection
  import ExOctocat.RequestBuilder

  @doc """
  Create a check run
  **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.  Creates a new check run for a specific commit in a repository. Your GitHub App must have the `checks:write` permission to create check runs.  In a check suite, GitHub limits the number of check runs with the same name to 1000. Once these check runs exceed 1000, GitHub will start to automatically delete older check runs.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :body (UNKNOWN_BASE_TYPE):
  ## Returns

  {:ok, ExOctocat.Model.CheckRun.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec checks_create(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, ExOctocat.Model.CheckRun.t()} | {:error, Tesla.Env.t()}
  def checks_create(connection, owner, repo, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:post)
    |> url("/repos/#{owner}/#{repo}/check-runs")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {201, %ExOctocat.Model.CheckRun{}}
    ])
  end

  @doc """
  Create a check suite
  **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.  By default, check suites are automatically created when you create a [check run](https://docs.github.com/rest/reference/checks#check-runs). You only need to use this endpoint for manually creating check suites when you've disabled automatic creation using \"[Update repository preferences for check suites](https://docs.github.com/rest/reference/checks#update-repository-preferences-for-check-suites)\". Your GitHub App must have the `checks:write` permission to create check suites.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject69):
  ## Returns

  {:ok, ExOctocat.Model.CheckSuite.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec checks_create_suite(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, ExOctocat.Model.CheckSuite.t()} | {:error, Tesla.Env.t()}
  def checks_create_suite(connection, owner, repo, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:post)
    |> url("/repos/#{owner}/#{repo}/check-suites")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.CheckSuite{}},
      {201, %ExOctocat.Model.CheckSuite{}}
    ])
  end

  @doc """
  Get a check run
  **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.  Gets a single check run using its `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the `repo` scope to get check runs in a private repository.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - check_run_id (integer()): check_run_id parameter
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, ExOctocat.Model.CheckRun.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec checks_get(Tesla.Env.client(), String.t(), String.t(), integer(), keyword()) ::
          {:ok, ExOctocat.Model.CheckRun.t()} | {:error, Tesla.Env.t()}
  def checks_get(connection, owner, repo, check_run_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/check-runs/#{check_run_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.CheckRun{}}
    ])
  end

  @doc """
  Get a check suite
  **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.  Gets a single check suite using its `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check suites. OAuth Apps and authenticated users must have the `repo` scope to get check suites in a private repository.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - check_suite_id (integer()): check_suite_id parameter
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, ExOctocat.Model.CheckSuite.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec checks_get_suite(Tesla.Env.client(), String.t(), String.t(), integer(), keyword()) ::
          {:ok, ExOctocat.Model.CheckSuite.t()} | {:error, Tesla.Env.t()}
  def checks_get_suite(connection, owner, repo, check_suite_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/check-suites/#{check_suite_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.CheckSuite{}}
    ])
  end

  @doc """
  List check run annotations
  Lists annotations for a check run using the annotation `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get annotations for a check run. OAuth Apps and authenticated users must have the `repo` scope to get annotations for a check run in a private repository.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - check_run_id (integer()): check_run_id parameter
  - opts (KeywordList): [optional] Optional parameters
    - :per_page (integer()): Results per page (max 100)
    - :page (integer()): Page number of the results to fetch.
  ## Returns

  {:ok, [%CheckAnnotation{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec checks_list_annotations(Tesla.Env.client(), String.t(), String.t(), integer(), keyword()) ::
          {:ok, list(ExOctocat.Model.CheckAnnotation.t())} | {:error, Tesla.Env.t()}
  def checks_list_annotations(connection, owner, repo, check_run_id, opts \\ []) do
    optional_params = %{
      :per_page => :query,
      :page => :query
    }

    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/check-runs/#{check_run_id}/annotations")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, [%ExOctocat.Model.CheckAnnotation{}]}
    ])
  end

  @doc """
  List check runs for a Git reference
  **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.  Lists check runs for a commit ref. The `ref` can be a SHA, branch name, or a tag name. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the `repo` scope to get check runs in a private repository.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - ref (String.t): ref parameter
  - opts (KeywordList): [optional] Optional parameters
    - :check_name (String.t): Returns check runs with the specified `name`.
    - :status (String.t): Returns check runs with the specified `status`. Can be one of `queued`, `in_progress`, or `completed`.
    - :filter (String.t): Filters check runs by their `completed_at` timestamp. Can be one of `latest` (returning the most recent check runs) or `all`.
    - :per_page (integer()): Results per page (max 100)
    - :page (integer()): Page number of the results to fetch.
    - :app_id (integer()):
  ## Returns

  {:ok, ExOctocat.Model.InlineResponse20018.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec checks_list_for_ref(Tesla.Env.client(), String.t(), String.t(), String.t(), keyword()) ::
          {:ok, ExOctocat.Model.InlineResponse20018.t()} | {:error, Tesla.Env.t()}
  def checks_list_for_ref(connection, owner, repo, ref, opts \\ []) do
    optional_params = %{
      :check_name => :query,
      :status => :query,
      :filter => :query,
      :per_page => :query,
      :page => :query,
      :app_id => :query
    }

    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/commits/#{ref}/check-runs")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.InlineResponse20018{}}
    ])
  end

  @doc """
  List check runs in a check suite
  **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.  Lists check runs for a check suite using its `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the `repo` scope to get check runs in a private repository.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - check_suite_id (integer()): check_suite_id parameter
  - opts (KeywordList): [optional] Optional parameters
    - :check_name (String.t): Returns check runs with the specified `name`.
    - :status (String.t): Returns check runs with the specified `status`. Can be one of `queued`, `in_progress`, or `completed`.
    - :filter (String.t): Filters check runs by their `completed_at` timestamp. Can be one of `latest` (returning the most recent check runs) or `all`.
    - :per_page (integer()): Results per page (max 100)
    - :page (integer()): Page number of the results to fetch.
  ## Returns

  {:ok, ExOctocat.Model.InlineResponse20018.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec checks_list_for_suite(Tesla.Env.client(), String.t(), String.t(), integer(), keyword()) ::
          {:ok, ExOctocat.Model.InlineResponse20018.t()} | {:error, Tesla.Env.t()}
  def checks_list_for_suite(connection, owner, repo, check_suite_id, opts \\ []) do
    optional_params = %{
      :check_name => :query,
      :status => :query,
      :filter => :query,
      :per_page => :query,
      :page => :query
    }

    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/check-suites/#{check_suite_id}/check-runs")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.InlineResponse20018{}}
    ])
  end

  @doc """
  List check suites for a Git reference
  **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.  Lists check suites for a commit `ref`. The `ref` can be a SHA, branch name, or a tag name. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to list check suites. OAuth Apps and authenticated users must have the `repo` scope to get check suites in a private repository.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - ref (String.t): ref parameter
  - opts (KeywordList): [optional] Optional parameters
    - :app_id (integer()): Filters check suites by GitHub App `id`.
    - :check_name (String.t): Returns check runs with the specified `name`.
    - :per_page (integer()): Results per page (max 100)
    - :page (integer()): Page number of the results to fetch.
  ## Returns

  {:ok, ExOctocat.Model.InlineResponse20019.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec checks_list_suites_for_ref(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, ExOctocat.Model.InlineResponse20019.t()} | {:error, Tesla.Env.t()}
  def checks_list_suites_for_ref(connection, owner, repo, ref, opts \\ []) do
    optional_params = %{
      :app_id => :query,
      :check_name => :query,
      :per_page => :query,
      :page => :query
    }

    %{}
    |> method(:get)
    |> url("/repos/#{owner}/#{repo}/commits/#{ref}/check-suites")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.InlineResponse20019{}}
    ])
  end

  @doc """
  Rerequest a check suite
  Triggers GitHub to rerequest an existing check suite, without pushing new code to a repository. This endpoint will trigger the [`check_suite` webhook](https://docs.github.com/webhooks/event-payloads/#check_suite) event with the action `rerequested`. When a check suite is `rerequested`, its `status` is reset to `queued` and the `conclusion` is cleared.  To rerequest a check suite, your GitHub App must have the `checks:read` permission on a private repository or pull access to a public repository.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - check_suite_id (integer()): check_suite_id parameter
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, map()} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec checks_rerequest_suite(Tesla.Env.client(), String.t(), String.t(), integer(), keyword()) ::
          {:ok, Map.t()} | {:error, Tesla.Env.t()}
  def checks_rerequest_suite(connection, owner, repo, check_suite_id, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/repos/#{owner}/#{repo}/check-suites/#{check_suite_id}/rerequest")
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {201, false}
    ])
  end

  @doc """
  Update repository preferences for check suites
  Changes the default automatic flow when creating check suites. By default, a check suite is automatically created each time code is pushed to a repository. When you disable the automatic creation of check suites, you can manually [Create a check suite](https://docs.github.com/rest/reference/checks#create-a-check-suite). You must have admin permissions in the repository to set preferences for check suites.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject70):
  ## Returns

  {:ok, ExOctocat.Model.CheckSuitePreference.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec checks_set_suites_preferences(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, ExOctocat.Model.CheckSuitePreference.t()} | {:error, Tesla.Env.t()}
  def checks_set_suites_preferences(connection, owner, repo, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:patch)
    |> url("/repos/#{owner}/#{repo}/check-suites/preferences")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.CheckSuitePreference{}}
    ])
  end

  @doc """
  Update a check run
  **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.  Updates a check run for a specific commit in a repository. Your GitHub App must have the `checks:write` permission to edit check runs.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - owner (String.t):
  - repo (String.t):
  - check_run_id (integer()): check_run_id parameter
  - opts (KeywordList): [optional] Optional parameters
    - :body (UNKNOWN_BASE_TYPE):
  ## Returns

  {:ok, ExOctocat.Model.CheckRun.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec checks_update(Tesla.Env.client(), String.t(), String.t(), integer(), keyword()) ::
          {:ok, ExOctocat.Model.CheckRun.t()} | {:error, Tesla.Env.t()}
  def checks_update(connection, owner, repo, check_run_id, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:patch)
    |> url("/repos/#{owner}/#{repo}/check-runs/#{check_run_id}")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.CheckRun{}}
    ])
  end
end
