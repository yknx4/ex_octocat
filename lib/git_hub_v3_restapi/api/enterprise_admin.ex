# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule ExOctocat.Api.EnterpriseAdmin do
  @moduledoc """
  API calls for all endpoints tagged `EnterpriseAdmin`.
  """

  alias ExOctocat.Connection
  import ExOctocat.RequestBuilder

  @doc """
  Add organization access to a self-hosted runner group in an enterprise
  Adds an organization to the list of selected organizations that can access a self-hosted runner group. The runner group must have `visibility` set to `selected`. For more information, see \"[Create a self-hosted runner group for an enterprise](#create-a-self-hosted-runner-group-for-an-enterprise).\"  You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - enterprise (String.t): The slug version of the enterprise name. You can also substitute this value with the enterprise id.
  - runner_group_id (integer()): Unique identifier of the self-hosted runner group.
  - org_id (integer()): Unique identifier of an organization.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec enterprise_admin_add_org_access_to_self_hosted_runner_group_in_enterprise(
          Tesla.Env.client(),
          String.t(),
          integer(),
          integer(),
          keyword()
        ) :: {:ok, nil} | {:error, Tesla.Env.t()}
  def enterprise_admin_add_org_access_to_self_hosted_runner_group_in_enterprise(
        connection,
        enterprise,
        runner_group_id,
        org_id,
        _opts \\ []
      ) do
    %{}
    |> method(:put)
    |> url(
      "/enterprises/#{enterprise}/actions/runner-groups/#{runner_group_id}/organizations/#{org_id}"
    )
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false}
    ])
  end

  @doc """
  Add a self-hosted runner to a group for an enterprise
  Adds a self-hosted runner to a runner group configured in an enterprise.  You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - enterprise (String.t): The slug version of the enterprise name. You can also substitute this value with the enterprise id.
  - runner_group_id (integer()): Unique identifier of the self-hosted runner group.
  - runner_id (integer()): Unique identifier of the self-hosted runner.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec enterprise_admin_add_self_hosted_runner_to_group_for_enterprise(
          Tesla.Env.client(),
          String.t(),
          integer(),
          integer(),
          keyword()
        ) :: {:ok, nil} | {:error, Tesla.Env.t()}
  def enterprise_admin_add_self_hosted_runner_to_group_for_enterprise(
        connection,
        enterprise,
        runner_group_id,
        runner_id,
        _opts \\ []
      ) do
    %{}
    |> method(:put)
    |> url(
      "/enterprises/#{enterprise}/actions/runner-groups/#{runner_group_id}/runners/#{runner_id}"
    )
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false}
    ])
  end

  @doc """
  Create a registration token for an enterprise
  Returns a token that you can pass to the `config` script. The token expires after one hour.  You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.  #### Example using registration token  Configure your self-hosted runner, replacing `TOKEN` with the registration token provided by this endpoint.  ``` ./config.sh --url https://github.com/enterprises/octo-enterprise --token TOKEN ```

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - enterprise (String.t): The slug version of the enterprise name. You can also substitute this value with the enterprise id.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, ExOctocat.Model.AuthenticationToken.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec enterprise_admin_create_registration_token_for_enterprise(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) :: {:ok, ExOctocat.Model.AuthenticationToken.t()} | {:error, Tesla.Env.t()}
  def enterprise_admin_create_registration_token_for_enterprise(
        connection,
        enterprise,
        _opts \\ []
      ) do
    %{}
    |> method(:post)
    |> url("/enterprises/#{enterprise}/actions/runners/registration-token")
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {201, %ExOctocat.Model.AuthenticationToken{}}
    ])
  end

  @doc """
  Create a remove token for an enterprise
  Returns a token that you can pass to the `config` script to remove a self-hosted runner from an enterprise. The token expires after one hour.  You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.  #### Example using remove token  To remove your self-hosted runner from an enterprise, replace `TOKEN` with the remove token provided by this endpoint.  ``` ./config.sh remove --token TOKEN ```

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - enterprise (String.t): The slug version of the enterprise name. You can also substitute this value with the enterprise id.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, ExOctocat.Model.AuthenticationToken.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec enterprise_admin_create_remove_token_for_enterprise(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) :: {:ok, ExOctocat.Model.AuthenticationToken.t()} | {:error, Tesla.Env.t()}
  def enterprise_admin_create_remove_token_for_enterprise(connection, enterprise, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/enterprises/#{enterprise}/actions/runners/remove-token")
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {201, %ExOctocat.Model.AuthenticationToken{}}
    ])
  end

  @doc """
  Create a self-hosted runner group for an enterprise
  Creates a new self-hosted runner group for an enterprise.  You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - enterprise (String.t): The slug version of the enterprise name. You can also substitute this value with the enterprise id.
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject13):
  ## Returns

  {:ok, ExOctocat.Model.RunnerGroupsEnterprise.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec enterprise_admin_create_self_hosted_runner_group_for_enterprise(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) :: {:ok, ExOctocat.Model.RunnerGroupsEnterprise.t()} | {:error, Tesla.Env.t()}
  def enterprise_admin_create_self_hosted_runner_group_for_enterprise(
        connection,
        enterprise,
        opts \\ []
      ) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:post)
    |> url("/enterprises/#{enterprise}/actions/runner-groups")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {201, %ExOctocat.Model.RunnerGroupsEnterprise{}}
    ])
  end

  @doc """
  Delete a SCIM group from an enterprise
  **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - enterprise (String.t): The slug version of the enterprise name. You can also substitute this value with the enterprise id.
  - scim_group_id (String.t): Identifier generated by the GitHub SCIM endpoint.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec enterprise_admin_delete_scim_group_from_enterprise(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, nil} | {:error, Tesla.Env.t()}
  def enterprise_admin_delete_scim_group_from_enterprise(
        connection,
        enterprise,
        scim_group_id,
        _opts \\ []
      ) do
    %{}
    |> method(:delete)
    |> url("/scim/v2/enterprises/#{enterprise}/Groups/#{scim_group_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false}
    ])
  end

  @doc """
  Delete a self-hosted runner from an enterprise
  Forces the removal of a self-hosted runner from an enterprise. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.  You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - enterprise (String.t): The slug version of the enterprise name. You can also substitute this value with the enterprise id.
  - runner_id (integer()): Unique identifier of the self-hosted runner.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec enterprise_admin_delete_self_hosted_runner_from_enterprise(
          Tesla.Env.client(),
          String.t(),
          integer(),
          keyword()
        ) :: {:ok, nil} | {:error, Tesla.Env.t()}
  def enterprise_admin_delete_self_hosted_runner_from_enterprise(
        connection,
        enterprise,
        runner_id,
        _opts \\ []
      ) do
    %{}
    |> method(:delete)
    |> url("/enterprises/#{enterprise}/actions/runners/#{runner_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false}
    ])
  end

  @doc """
  Delete a self-hosted runner group from an enterprise
  Deletes a self-hosted runner group for an enterprise.  You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - enterprise (String.t): The slug version of the enterprise name. You can also substitute this value with the enterprise id.
  - runner_group_id (integer()): Unique identifier of the self-hosted runner group.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec enterprise_admin_delete_self_hosted_runner_group_from_enterprise(
          Tesla.Env.client(),
          String.t(),
          integer(),
          keyword()
        ) :: {:ok, nil} | {:error, Tesla.Env.t()}
  def enterprise_admin_delete_self_hosted_runner_group_from_enterprise(
        connection,
        enterprise,
        runner_group_id,
        _opts \\ []
      ) do
    %{}
    |> method(:delete)
    |> url("/enterprises/#{enterprise}/actions/runner-groups/#{runner_group_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false}
    ])
  end

  @doc """
  Delete a SCIM user from an enterprise
  **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - enterprise (String.t): The slug version of the enterprise name. You can also substitute this value with the enterprise id.
  - scim_user_id (String.t): scim_user_id parameter
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec enterprise_admin_delete_user_from_enterprise(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, nil} | {:error, Tesla.Env.t()}
  def enterprise_admin_delete_user_from_enterprise(
        connection,
        enterprise,
        scim_user_id,
        _opts \\ []
      ) do
    %{}
    |> method(:delete)
    |> url("/scim/v2/enterprises/#{enterprise}/Users/#{scim_user_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false}
    ])
  end

  @doc """
  Disable a selected organization for GitHub Actions in an enterprise
  Removes an organization from the list of selected organizations that are enabled for GitHub Actions in an enterprise. To use this endpoint, the enterprise permission policy for `enabled_organizations` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise).\"  You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - enterprise (String.t): The slug version of the enterprise name. You can also substitute this value with the enterprise id.
  - org_id (integer()): Unique identifier of an organization.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec enterprise_admin_disable_selected_organization_github_actions_enterprise(
          Tesla.Env.client(),
          String.t(),
          integer(),
          keyword()
        ) :: {:ok, nil} | {:error, Tesla.Env.t()}
  def enterprise_admin_disable_selected_organization_github_actions_enterprise(
        connection,
        enterprise,
        org_id,
        _opts \\ []
      ) do
    %{}
    |> method(:delete)
    |> url("/enterprises/#{enterprise}/actions/permissions/organizations/#{org_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false}
    ])
  end

  @doc """
  Enable a selected organization for GitHub Actions in an enterprise
  Adds an organization to the list of selected organizations that are enabled for GitHub Actions in an enterprise. To use this endpoint, the enterprise permission policy for `enabled_organizations` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise).\"  You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - enterprise (String.t): The slug version of the enterprise name. You can also substitute this value with the enterprise id.
  - org_id (integer()): Unique identifier of an organization.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec enterprise_admin_enable_selected_organization_github_actions_enterprise(
          Tesla.Env.client(),
          String.t(),
          integer(),
          keyword()
        ) :: {:ok, nil} | {:error, Tesla.Env.t()}
  def enterprise_admin_enable_selected_organization_github_actions_enterprise(
        connection,
        enterprise,
        org_id,
        _opts \\ []
      ) do
    %{}
    |> method(:put)
    |> url("/enterprises/#{enterprise}/actions/permissions/organizations/#{org_id}")
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false}
    ])
  end

  @doc """
  Get allowed actions for an enterprise
  Gets the selected actions that are allowed in an enterprise. To use this endpoint, the enterprise permission policy for `allowed_actions` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise).\"  You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - enterprise (String.t): The slug version of the enterprise name. You can also substitute this value with the enterprise id.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, ExOctocat.Model.SelectedActions.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec enterprise_admin_get_allowed_actions_enterprise(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, ExOctocat.Model.SelectedActions.t()} | {:error, Tesla.Env.t()}
  def enterprise_admin_get_allowed_actions_enterprise(connection, enterprise, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/enterprises/#{enterprise}/actions/permissions/selected-actions")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.SelectedActions{}}
    ])
  end

  @doc """
  Get the audit log for an enterprise
  Gets the audit log for an enterprise. To use this endpoint, you must be an enterprise admin, and you must use an access token with the `admin:enterprise` scope.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - enterprise (String.t): The slug version of the enterprise name. You can also substitute this value with the enterprise id.
  - opts (KeywordList): [optional] Optional parameters
    - :phrase (String.t): A search phrase. For more information, see [Searching the audit log](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/reviewing-the-audit-log-for-your-organization#searching-the-audit-log).
    - :include (String.t): The event types to include:  - `web` - returns web (non-Git) events - `git` - returns Git events - `all` - returns both web and Git events  The default is `web`.
    - :after (String.t): A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events after this cursor.
    - :before (String.t): A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events before this cursor.
    - :order (String.t): The order of audit log events. To list newest events first, specify `desc`. To list oldest events first, specify `asc`.  The default is `desc`.
    - :page (integer()): Page number of the results to fetch.
    - :per_page (integer()): Results per page (max 100)
  ## Returns

  {:ok, [%AuditLogEvent{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec enterprise_admin_get_audit_log(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, list(ExOctocat.Model.AuditLogEvent.t())} | {:error, Tesla.Env.t()}
  def enterprise_admin_get_audit_log(connection, enterprise, opts \\ []) do
    optional_params = %{
      :phrase => :query,
      :include => :query,
      :after => :query,
      :before => :query,
      :order => :query,
      :page => :query,
      :per_page => :query
    }

    %{}
    |> method(:get)
    |> url("/enterprises/#{enterprise}/audit-log")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, [%ExOctocat.Model.AuditLogEvent{}]}
    ])
  end

  @doc """
  Get GitHub Actions permissions for an enterprise
  Gets the GitHub Actions permissions policy for organizations and allowed actions in an enterprise.  You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - enterprise (String.t): The slug version of the enterprise name. You can also substitute this value with the enterprise id.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, ExOctocat.Model.ActionsEnterprisePermissions.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec enterprise_admin_get_github_actions_permissions_enterprise(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, ExOctocat.Model.ActionsEnterprisePermissions.t()} | {:error, Tesla.Env.t()}
  def enterprise_admin_get_github_actions_permissions_enterprise(
        connection,
        enterprise,
        _opts \\ []
      ) do
    %{}
    |> method(:get)
    |> url("/enterprises/#{enterprise}/actions/permissions")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.ActionsEnterprisePermissions{}}
    ])
  end

  @doc """
  Get SCIM provisioning information for an enterprise group
  **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - enterprise (String.t): The slug version of the enterprise name. You can also substitute this value with the enterprise id.
  - scim_group_id (String.t): Identifier generated by the GitHub SCIM endpoint.
  - opts (KeywordList): [optional] Optional parameters
    - :excluded_attributes (String.t): Attributes to exclude.
  ## Returns

  {:ok, ExOctocat.Model.ScimEnterpriseGroup.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec enterprise_admin_get_provisioning_information_for_enterprise_group(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, ExOctocat.Model.ScimEnterpriseGroup.t()} | {:error, Tesla.Env.t()}
  def enterprise_admin_get_provisioning_information_for_enterprise_group(
        connection,
        enterprise,
        scim_group_id,
        opts \\ []
      ) do
    optional_params = %{
      :excludedAttributes => :query
    }

    %{}
    |> method(:get)
    |> url("/scim/v2/enterprises/#{enterprise}/Groups/#{scim_group_id}")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.ScimEnterpriseGroup{}}
    ])
  end

  @doc """
  Get SCIM provisioning information for an enterprise user
  **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - enterprise (String.t): The slug version of the enterprise name. You can also substitute this value with the enterprise id.
  - scim_user_id (String.t): scim_user_id parameter
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, ExOctocat.Model.ScimEnterpriseUser.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec enterprise_admin_get_provisioning_information_for_enterprise_user(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, ExOctocat.Model.ScimEnterpriseUser.t()} | {:error, Tesla.Env.t()}
  def enterprise_admin_get_provisioning_information_for_enterprise_user(
        connection,
        enterprise,
        scim_user_id,
        _opts \\ []
      ) do
    %{}
    |> method(:get)
    |> url("/scim/v2/enterprises/#{enterprise}/Users/#{scim_user_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.ScimEnterpriseUser{}}
    ])
  end

  @doc """
  Get a self-hosted runner for an enterprise
  Gets a specific self-hosted runner configured in an enterprise.  You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - enterprise (String.t): The slug version of the enterprise name. You can also substitute this value with the enterprise id.
  - runner_id (integer()): Unique identifier of the self-hosted runner.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, ExOctocat.Model.Runner.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec enterprise_admin_get_self_hosted_runner_for_enterprise(
          Tesla.Env.client(),
          String.t(),
          integer(),
          keyword()
        ) :: {:ok, ExOctocat.Model.Runner.t()} | {:error, Tesla.Env.t()}
  def enterprise_admin_get_self_hosted_runner_for_enterprise(
        connection,
        enterprise,
        runner_id,
        _opts \\ []
      ) do
    %{}
    |> method(:get)
    |> url("/enterprises/#{enterprise}/actions/runners/#{runner_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.Runner{}}
    ])
  end

  @doc """
  Get a self-hosted runner group for an enterprise
  Gets a specific self-hosted runner group for an enterprise.  You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - enterprise (String.t): The slug version of the enterprise name. You can also substitute this value with the enterprise id.
  - runner_group_id (integer()): Unique identifier of the self-hosted runner group.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, ExOctocat.Model.RunnerGroupsEnterprise.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec enterprise_admin_get_self_hosted_runner_group_for_enterprise(
          Tesla.Env.client(),
          String.t(),
          integer(),
          keyword()
        ) :: {:ok, ExOctocat.Model.RunnerGroupsEnterprise.t()} | {:error, Tesla.Env.t()}
  def enterprise_admin_get_self_hosted_runner_group_for_enterprise(
        connection,
        enterprise,
        runner_group_id,
        _opts \\ []
      ) do
    %{}
    |> method(:get)
    |> url("/enterprises/#{enterprise}/actions/runner-groups/#{runner_group_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.RunnerGroupsEnterprise{}}
    ])
  end

  @doc """
  List organization access to a self-hosted runner group in an enterprise
  Lists the organizations with access to a self-hosted runner group.  You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - enterprise (String.t): The slug version of the enterprise name. You can also substitute this value with the enterprise id.
  - runner_group_id (integer()): Unique identifier of the self-hosted runner group.
  - opts (KeywordList): [optional] Optional parameters
    - :per_page (integer()): Results per page (max 100)
    - :page (integer()): Page number of the results to fetch.
  ## Returns

  {:ok, ExOctocat.Model.InlineResponse2001.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec enterprise_admin_list_org_access_to_self_hosted_runner_group_in_enterprise(
          Tesla.Env.client(),
          String.t(),
          integer(),
          keyword()
        ) :: {:ok, ExOctocat.Model.InlineResponse2001.t()} | {:error, Tesla.Env.t()}
  def enterprise_admin_list_org_access_to_self_hosted_runner_group_in_enterprise(
        connection,
        enterprise,
        runner_group_id,
        opts \\ []
      ) do
    optional_params = %{
      :per_page => :query,
      :page => :query
    }

    %{}
    |> method(:get)
    |> url("/enterprises/#{enterprise}/actions/runner-groups/#{runner_group_id}/organizations")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.InlineResponse2001{}}
    ])
  end

  @doc """
  List provisioned SCIM groups for an enterprise
  **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - enterprise (String.t): The slug version of the enterprise name. You can also substitute this value with the enterprise id.
  - opts (KeywordList): [optional] Optional parameters
    - :start_index (integer()): Used for pagination: the index of the first result to return.
    - :count (integer()): Used for pagination: the number of results to return.
    - :filter (String.t): filter results
    - :excluded_attributes (String.t): attributes to exclude
  ## Returns

  {:ok, ExOctocat.Model.ScimGroupListEnterprise.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec enterprise_admin_list_provisioned_groups_enterprise(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) :: {:ok, ExOctocat.Model.ScimGroupListEnterprise.t()} | {:error, Tesla.Env.t()}
  def enterprise_admin_list_provisioned_groups_enterprise(connection, enterprise, opts \\ []) do
    optional_params = %{
      :startIndex => :query,
      :count => :query,
      :filter => :query,
      :excludedAttributes => :query
    }

    %{}
    |> method(:get)
    |> url("/scim/v2/enterprises/#{enterprise}/Groups")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.ScimGroupListEnterprise{}}
    ])
  end

  @doc """
  List SCIM provisioned identities for an enterprise
  **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.  Retrieves a paginated list of all provisioned enterprise members, including pending invitations.  When a user with a SAML-provisioned external identity leaves (or is removed from) an enterprise, the account's metadata is immediately removed. However, the returned list of user accounts might not always match the organization or enterprise member list you see on GitHub. This can happen in certain cases where an external identity associated with an organization will not match an organization member:   - When a user with a SCIM-provisioned external identity is removed from an enterprise, the account's metadata is preserved to allow the user to re-join the organization in the future.   - When inviting a user to join an organization, you can expect to see their external identity in the results before they accept the invitation, or if the invitation is cancelled (or never accepted).   - When a user is invited over SCIM, an external identity is created that matches with the invitee's email address. However, this identity is only linked to a user account when the user accepts the invitation by going through SAML SSO.  The returned list of external identities can include an entry for a `null` user. These are unlinked SAML identities that are created when a user goes through the following Single Sign-On (SSO) process but does not sign in to their GitHub account after completing SSO:  1. The user is granted access by the IdP and is not a member of the GitHub enterprise.  1. The user attempts to access the GitHub enterprise and initiates the SAML SSO process, and is not currently signed in to their GitHub account.  1. After successfully authenticating with the SAML SSO IdP, the `null` external identity entry is created and the user is prompted to sign in to their GitHub account:    - If the user signs in, their GitHub account is linked to this entry.    - If the user does not sign in (or does not create a new account when prompted), they are not added to the GitHub enterprise, and the external identity `null` entry remains in place.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - enterprise (String.t): The slug version of the enterprise name. You can also substitute this value with the enterprise id.
  - opts (KeywordList): [optional] Optional parameters
    - :start_index (integer()): Used for pagination: the index of the first result to return.
    - :count (integer()): Used for pagination: the number of results to return.
    - :filter (String.t): filter results
  ## Returns

  {:ok, ExOctocat.Model.ScimUserListEnterprise.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec enterprise_admin_list_provisioned_identities_enterprise(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) :: {:ok, ExOctocat.Model.ScimUserListEnterprise.t()} | {:error, Tesla.Env.t()}
  def enterprise_admin_list_provisioned_identities_enterprise(connection, enterprise, opts \\ []) do
    optional_params = %{
      :startIndex => :query,
      :count => :query,
      :filter => :query
    }

    %{}
    |> method(:get)
    |> url("/scim/v2/enterprises/#{enterprise}/Users")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.ScimUserListEnterprise{}}
    ])
  end

  @doc """
  List runner applications for an enterprise
  Lists binaries for the runner application that you can download and run.  You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - enterprise (String.t): The slug version of the enterprise name. You can also substitute this value with the enterprise id.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, [%RunnerApplication{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec enterprise_admin_list_runner_applications_for_enterprise(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) :: {:ok, list(ExOctocat.Model.RunnerApplication.t())} | {:error, Tesla.Env.t()}
  def enterprise_admin_list_runner_applications_for_enterprise(
        connection,
        enterprise,
        _opts \\ []
      ) do
    %{}
    |> method(:get)
    |> url("/enterprises/#{enterprise}/actions/runners/downloads")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, [%ExOctocat.Model.RunnerApplication{}]}
    ])
  end

  @doc """
  List selected organizations enabled for GitHub Actions in an enterprise
  Lists the organizations that are selected to have GitHub Actions enabled in an enterprise. To use this endpoint, the enterprise permission policy for `enabled_organizations` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise).\"  You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - enterprise (String.t): The slug version of the enterprise name. You can also substitute this value with the enterprise id.
  - opts (KeywordList): [optional] Optional parameters
    - :per_page (integer()): Results per page (max 100)
    - :page (integer()): Page number of the results to fetch.
  ## Returns

  {:ok, ExOctocat.Model.InlineResponse2001.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec enterprise_admin_list_selected_organizations_enabled_github_actions_enterprise(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) :: {:ok, ExOctocat.Model.InlineResponse2001.t()} | {:error, Tesla.Env.t()}
  def enterprise_admin_list_selected_organizations_enabled_github_actions_enterprise(
        connection,
        enterprise,
        opts \\ []
      ) do
    optional_params = %{
      :per_page => :query,
      :page => :query
    }

    %{}
    |> method(:get)
    |> url("/enterprises/#{enterprise}/actions/permissions/organizations")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.InlineResponse2001{}}
    ])
  end

  @doc """
  List self-hosted runner groups for an enterprise
  Lists all self-hosted runner groups for an enterprise.  You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - enterprise (String.t): The slug version of the enterprise name. You can also substitute this value with the enterprise id.
  - opts (KeywordList): [optional] Optional parameters
    - :per_page (integer()): Results per page (max 100)
    - :page (integer()): Page number of the results to fetch.
  ## Returns

  {:ok, ExOctocat.Model.InlineResponse2002.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec enterprise_admin_list_self_hosted_runner_groups_for_enterprise(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) :: {:ok, ExOctocat.Model.InlineResponse2002.t()} | {:error, Tesla.Env.t()}
  def enterprise_admin_list_self_hosted_runner_groups_for_enterprise(
        connection,
        enterprise,
        opts \\ []
      ) do
    optional_params = %{
      :per_page => :query,
      :page => :query
    }

    %{}
    |> method(:get)
    |> url("/enterprises/#{enterprise}/actions/runner-groups")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.InlineResponse2002{}}
    ])
  end

  @doc """
  List self-hosted runners for an enterprise
  Lists all self-hosted runners configured for an enterprise.  You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - enterprise (String.t): The slug version of the enterprise name. You can also substitute this value with the enterprise id.
  - opts (KeywordList): [optional] Optional parameters
    - :per_page (integer()): Results per page (max 100)
    - :page (integer()): Page number of the results to fetch.
  ## Returns

  {:ok, ExOctocat.Model.InlineResponse2004.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec enterprise_admin_list_self_hosted_runners_for_enterprise(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) :: {:ok, ExOctocat.Model.InlineResponse2004.t()} | {:error, Tesla.Env.t()}
  def enterprise_admin_list_self_hosted_runners_for_enterprise(connection, enterprise, opts \\ []) do
    optional_params = %{
      :per_page => :query,
      :page => :query
    }

    %{}
    |> method(:get)
    |> url("/enterprises/#{enterprise}/actions/runners")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.InlineResponse2004{}}
    ])
  end

  @doc """
  List self-hosted runners in a group for an enterprise
  Lists the self-hosted runners that are in a specific enterprise group.  You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - enterprise (String.t): The slug version of the enterprise name. You can also substitute this value with the enterprise id.
  - runner_group_id (integer()): Unique identifier of the self-hosted runner group.
  - opts (KeywordList): [optional] Optional parameters
    - :per_page (integer()): Results per page (max 100)
    - :page (integer()): Page number of the results to fetch.
  ## Returns

  {:ok, ExOctocat.Model.InlineResponse2003.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec enterprise_admin_list_self_hosted_runners_in_group_for_enterprise(
          Tesla.Env.client(),
          String.t(),
          integer(),
          keyword()
        ) :: {:ok, ExOctocat.Model.InlineResponse2003.t()} | {:error, Tesla.Env.t()}
  def enterprise_admin_list_self_hosted_runners_in_group_for_enterprise(
        connection,
        enterprise,
        runner_group_id,
        opts \\ []
      ) do
    optional_params = %{
      :per_page => :query,
      :page => :query
    }

    %{}
    |> method(:get)
    |> url("/enterprises/#{enterprise}/actions/runner-groups/#{runner_group_id}/runners")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.InlineResponse2003{}}
    ])
  end

  @doc """
  Provision a SCIM enterprise group and invite users
  **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.  Provision an enterprise group, and invite users to the group. This sends invitation emails to the email address of the invited users to join the GitHub organization that the SCIM group corresponds to.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - enterprise (String.t): The slug version of the enterprise name. You can also substitute this value with the enterprise id.
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject141):
  ## Returns

  {:ok, ExOctocat.Model.ScimEnterpriseGroup.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec enterprise_admin_provision_and_invite_enterprise_group(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) :: {:ok, ExOctocat.Model.ScimEnterpriseGroup.t()} | {:error, Tesla.Env.t()}
  def enterprise_admin_provision_and_invite_enterprise_group(connection, enterprise, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:post)
    |> url("/scim/v2/enterprises/#{enterprise}/Groups")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {201, %ExOctocat.Model.ScimEnterpriseGroup{}}
    ])
  end

  @doc """
  Provision and invite a SCIM enterprise user
  **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.  Provision enterprise membership for a user, and send organization invitation emails to the email address.  You can optionally include the groups a user will be invited to join. If you do not provide a list of `groups`, the user is provisioned for the enterprise, but no organization invitation emails will be sent.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - enterprise (String.t): The slug version of the enterprise name. You can also substitute this value with the enterprise id.
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject144):
  ## Returns

  {:ok, ExOctocat.Model.ScimEnterpriseUser.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec enterprise_admin_provision_and_invite_enterprise_user(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) :: {:ok, ExOctocat.Model.ScimEnterpriseUser.t()} | {:error, Tesla.Env.t()}
  def enterprise_admin_provision_and_invite_enterprise_user(connection, enterprise, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:post)
    |> url("/scim/v2/enterprises/#{enterprise}/Users")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {201, %ExOctocat.Model.ScimEnterpriseUser{}}
    ])
  end

  @doc """
  Remove organization access to a self-hosted runner group in an enterprise
  Removes an organization from the list of selected organizations that can access a self-hosted runner group. The runner group must have `visibility` set to `selected`. For more information, see \"[Create a self-hosted runner group for an enterprise](#create-a-self-hosted-runner-group-for-an-enterprise).\"  You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - enterprise (String.t): The slug version of the enterprise name. You can also substitute this value with the enterprise id.
  - runner_group_id (integer()): Unique identifier of the self-hosted runner group.
  - org_id (integer()): Unique identifier of an organization.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec enterprise_admin_remove_org_access_to_self_hosted_runner_group_in_enterprise(
          Tesla.Env.client(),
          String.t(),
          integer(),
          integer(),
          keyword()
        ) :: {:ok, nil} | {:error, Tesla.Env.t()}
  def enterprise_admin_remove_org_access_to_self_hosted_runner_group_in_enterprise(
        connection,
        enterprise,
        runner_group_id,
        org_id,
        _opts \\ []
      ) do
    %{}
    |> method(:delete)
    |> url(
      "/enterprises/#{enterprise}/actions/runner-groups/#{runner_group_id}/organizations/#{org_id}"
    )
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false}
    ])
  end

  @doc """
  Remove a self-hosted runner from a group for an enterprise
  Removes a self-hosted runner from a group configured in an enterprise. The runner is then returned to the default group.  You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - enterprise (String.t): The slug version of the enterprise name. You can also substitute this value with the enterprise id.
  - runner_group_id (integer()): Unique identifier of the self-hosted runner group.
  - runner_id (integer()): Unique identifier of the self-hosted runner.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec enterprise_admin_remove_self_hosted_runner_from_group_for_enterprise(
          Tesla.Env.client(),
          String.t(),
          integer(),
          integer(),
          keyword()
        ) :: {:ok, nil} | {:error, Tesla.Env.t()}
  def enterprise_admin_remove_self_hosted_runner_from_group_for_enterprise(
        connection,
        enterprise,
        runner_group_id,
        runner_id,
        _opts \\ []
      ) do
    %{}
    |> method(:delete)
    |> url(
      "/enterprises/#{enterprise}/actions/runner-groups/#{runner_group_id}/runners/#{runner_id}"
    )
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false}
    ])
  end

  @doc """
  Set allowed actions for an enterprise
  Sets the actions that are allowed in an enterprise. To use this endpoint, the enterprise permission policy for `allowed_actions` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise).\"  You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - enterprise (String.t): The slug version of the enterprise name. You can also substitute this value with the enterprise id.
  - opts (KeywordList): [optional] Optional parameters
    - :body (SelectedActions):
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec enterprise_admin_set_allowed_actions_enterprise(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, nil} | {:error, Tesla.Env.t()}
  def enterprise_admin_set_allowed_actions_enterprise(connection, enterprise, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:put)
    |> url("/enterprises/#{enterprise}/actions/permissions/selected-actions")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false}
    ])
  end

  @doc """
  Set GitHub Actions permissions for an enterprise
  Sets the GitHub Actions permissions policy for organizations and allowed actions in an enterprise.  You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - enterprise (String.t): The slug version of the enterprise name. You can also substitute this value with the enterprise id.
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject11):
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec enterprise_admin_set_github_actions_permissions_enterprise(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) :: {:ok, nil} | {:error, Tesla.Env.t()}
  def enterprise_admin_set_github_actions_permissions_enterprise(
        connection,
        enterprise,
        opts \\ []
      ) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:put)
    |> url("/enterprises/#{enterprise}/actions/permissions")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false}
    ])
  end

  @doc """
  Set SCIM information for a provisioned enterprise group
  **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.  Replaces an existing provisioned group’s information. You must provide all the information required for the group as if you were provisioning it for the first time. Any existing group information that you don't provide will be removed, including group membership. If you want to only update a specific attribute, use the [Update an attribute for a SCIM enterprise group](#update-an-attribute-for-a-scim-enterprise-group) endpoint instead.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - enterprise (String.t): The slug version of the enterprise name. You can also substitute this value with the enterprise id.
  - scim_group_id (String.t): Identifier generated by the GitHub SCIM endpoint.
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject142):
  ## Returns

  {:ok, ExOctocat.Model.ScimEnterpriseGroup.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec enterprise_admin_set_information_for_provisioned_enterprise_group(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, ExOctocat.Model.ScimEnterpriseGroup.t()} | {:error, Tesla.Env.t()}
  def enterprise_admin_set_information_for_provisioned_enterprise_group(
        connection,
        enterprise,
        scim_group_id,
        opts \\ []
      ) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:put)
    |> url("/scim/v2/enterprises/#{enterprise}/Groups/#{scim_group_id}")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.ScimEnterpriseGroup{}}
    ])
  end

  @doc """
  Set SCIM information for a provisioned enterprise user
  **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.  Replaces an existing provisioned user's information. You must provide all the information required for the user as if you were provisioning them for the first time. Any existing user information that you don't provide will be removed. If you want to only update a specific attribute, use the [Update an attribute for a SCIM user](#update-an-attribute-for-an-enterprise-scim-user) endpoint instead.  You must at least provide the required values for the user: `userName`, `name`, and `emails`.  **Warning:** Setting `active: false` removes the user from the enterprise, deletes the external identity, and deletes the associated `{scim_user_id}`.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - enterprise (String.t): The slug version of the enterprise name. You can also substitute this value with the enterprise id.
  - scim_user_id (String.t): scim_user_id parameter
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject145):
  ## Returns

  {:ok, ExOctocat.Model.ScimEnterpriseUser.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec enterprise_admin_set_information_for_provisioned_enterprise_user(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, ExOctocat.Model.ScimEnterpriseUser.t()} | {:error, Tesla.Env.t()}
  def enterprise_admin_set_information_for_provisioned_enterprise_user(
        connection,
        enterprise,
        scim_user_id,
        opts \\ []
      ) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:put)
    |> url("/scim/v2/enterprises/#{enterprise}/Users/#{scim_user_id}")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.ScimEnterpriseUser{}}
    ])
  end

  @doc """
  Set organization access for a self-hosted runner group in an enterprise
  Replaces the list of organizations that have access to a self-hosted runner configured in an enterprise.  You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - enterprise (String.t): The slug version of the enterprise name. You can also substitute this value with the enterprise id.
  - runner_group_id (integer()): Unique identifier of the self-hosted runner group.
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject15):
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec enterprise_admin_set_org_access_to_self_hosted_runner_group_in_enterprise(
          Tesla.Env.client(),
          String.t(),
          integer(),
          keyword()
        ) :: {:ok, nil} | {:error, Tesla.Env.t()}
  def enterprise_admin_set_org_access_to_self_hosted_runner_group_in_enterprise(
        connection,
        enterprise,
        runner_group_id,
        opts \\ []
      ) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:put)
    |> url("/enterprises/#{enterprise}/actions/runner-groups/#{runner_group_id}/organizations")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false}
    ])
  end

  @doc """
  Set selected organizations enabled for GitHub Actions in an enterprise
  Replaces the list of selected organizations that are enabled for GitHub Actions in an enterprise. To use this endpoint, the enterprise permission policy for `enabled_organizations` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise).\"  You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - enterprise (String.t): The slug version of the enterprise name. You can also substitute this value with the enterprise id.
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject12):
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec enterprise_admin_set_selected_organizations_enabled_github_actions_enterprise(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) :: {:ok, nil} | {:error, Tesla.Env.t()}
  def enterprise_admin_set_selected_organizations_enabled_github_actions_enterprise(
        connection,
        enterprise,
        opts \\ []
      ) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:put)
    |> url("/enterprises/#{enterprise}/actions/permissions/organizations")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false}
    ])
  end

  @doc """
  Set self-hosted runners in a group for an enterprise
  Replaces the list of self-hosted runners that are part of an enterprise runner group.  You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - enterprise (String.t): The slug version of the enterprise name. You can also substitute this value with the enterprise id.
  - runner_group_id (integer()): Unique identifier of the self-hosted runner group.
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject16):
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec enterprise_admin_set_self_hosted_runners_in_group_for_enterprise(
          Tesla.Env.client(),
          String.t(),
          integer(),
          keyword()
        ) :: {:ok, nil} | {:error, Tesla.Env.t()}
  def enterprise_admin_set_self_hosted_runners_in_group_for_enterprise(
        connection,
        enterprise,
        runner_group_id,
        opts \\ []
      ) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:put)
    |> url("/enterprises/#{enterprise}/actions/runner-groups/#{runner_group_id}/runners")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false}
    ])
  end

  @doc """
  Update an attribute for a SCIM enterprise group
  **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.  Allows you to change a provisioned group’s individual attributes. To change a group’s values, you must provide a specific Operations JSON format that contains at least one of the add, remove, or replace operations. For examples and more information on the SCIM operations format, see the [SCIM specification](https://tools.ietf.org/html/rfc7644#section-3.5.2).

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - enterprise (String.t): The slug version of the enterprise name. You can also substitute this value with the enterprise id.
  - scim_group_id (String.t): Identifier generated by the GitHub SCIM endpoint.
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject143):
  ## Returns

  {:ok, ExOctocat.Model.ScimEnterpriseGroup.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec enterprise_admin_update_attribute_for_enterprise_group(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, ExOctocat.Model.ScimEnterpriseGroup.t()} | {:error, Tesla.Env.t()}
  def enterprise_admin_update_attribute_for_enterprise_group(
        connection,
        enterprise,
        scim_group_id,
        opts \\ []
      ) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:patch)
    |> url("/scim/v2/enterprises/#{enterprise}/Groups/#{scim_group_id}")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.ScimEnterpriseGroup{}}
    ])
  end

  @doc """
  Update an attribute for a SCIM enterprise user
  **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.  Allows you to change a provisioned user's individual attributes. To change a user's values, you must provide a specific `Operations` JSON format that contains at least one of the `add`, `remove`, or `replace` operations. For examples and more information on the SCIM operations format, see the [SCIM specification](https://tools.ietf.org/html/rfc7644#section-3.5.2).  **Note:** Complicated SCIM `path` selectors that include filters are not supported. For example, a `path` selector defined as `\"path\": \"emails[type eq \\\"work\\\"]\"` will not work.  **Warning:** If you set `active:false` using the `replace` operation (as shown in the JSON example below), it removes the user from the enterprise, deletes the external identity, and deletes the associated `:scim_user_id`.  ``` {   \"Operations\":[{     \"op\":\"replace\",     \"value\":{       \"active\":false     }   }] } ```

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - enterprise (String.t): The slug version of the enterprise name. You can also substitute this value with the enterprise id.
  - scim_user_id (String.t): scim_user_id parameter
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject146):
  ## Returns

  {:ok, ExOctocat.Model.ScimEnterpriseUser.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec enterprise_admin_update_attribute_for_enterprise_user(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, ExOctocat.Model.ScimEnterpriseUser.t()} | {:error, Tesla.Env.t()}
  def enterprise_admin_update_attribute_for_enterprise_user(
        connection,
        enterprise,
        scim_user_id,
        opts \\ []
      ) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:patch)
    |> url("/scim/v2/enterprises/#{enterprise}/Users/#{scim_user_id}")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.ScimEnterpriseUser{}}
    ])
  end

  @doc """
  Update a self-hosted runner group for an enterprise
  Updates the `name` and `visibility` of a self-hosted runner group in an enterprise.  You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - enterprise (String.t): The slug version of the enterprise name. You can also substitute this value with the enterprise id.
  - runner_group_id (integer()): Unique identifier of the self-hosted runner group.
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject14):
  ## Returns

  {:ok, ExOctocat.Model.RunnerGroupsEnterprise.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec enterprise_admin_update_self_hosted_runner_group_for_enterprise(
          Tesla.Env.client(),
          String.t(),
          integer(),
          keyword()
        ) :: {:ok, ExOctocat.Model.RunnerGroupsEnterprise.t()} | {:error, Tesla.Env.t()}
  def enterprise_admin_update_self_hosted_runner_group_for_enterprise(
        connection,
        enterprise,
        runner_group_id,
        opts \\ []
      ) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:patch)
    |> url("/enterprises/#{enterprise}/actions/runner-groups/#{runner_group_id}")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.RunnerGroupsEnterprise{}}
    ])
  end
end
