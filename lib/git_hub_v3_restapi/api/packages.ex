# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule ExOctocat.Api.Packages do
  @moduledoc """
  API calls for all endpoints tagged `Packages`.
  """

  alias ExOctocat.Connection
  import ExOctocat.RequestBuilder

  @doc """
  Delete a package for the authenticated user
  Deletes a package owned by the authenticated user. You cannot delete a public package if any version of the package has more than 5,000 downloads. In this scenario, contact GitHub support for further assistance.  To use this endpoint, you must authenticate using an access token with the `packages:read` and `packages:delete` scopes. If `package_type` is not `container`, your token must also include the `repo` scope.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - package_type (String.t): The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or `container`. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
  - package_name (String.t): The name of the package.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec packages_delete_package_for_authenticated_user(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, nil} | {:ok, ExOctocat.Model.BasicError.t()} | {:error, Tesla.Env.t()}
  def packages_delete_package_for_authenticated_user(
        connection,
        package_type,
        package_name,
        _opts \\ []
      ) do
    %{}
    |> method(:delete)
    |> url("/user/packages/#{package_type}/#{package_name}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false},
      {404, %ExOctocat.Model.BasicError{}},
      {403, %ExOctocat.Model.BasicError{}},
      {401, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  Delete a package for an organization
  Deletes an entire package in an organization. You cannot delete a public package if any version of the package has more than 5,000 downloads. In this scenario, contact GitHub support for further assistance.  To use this endpoint, you must have admin permissions in the organization and authenticate using an access token with the `packages:read` and `packages:delete` scopes. In addition: - If `package_type` is not `container`, your token must also include the `repo` scope. - If `package_type` is `container`, you must also have admin permissions to the container you want to delete.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - package_type (String.t): The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or `container`. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
  - package_name (String.t): The name of the package.
  - org (String.t):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec packages_delete_package_for_org(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, nil} | {:ok, ExOctocat.Model.BasicError.t()} | {:error, Tesla.Env.t()}
  def packages_delete_package_for_org(connection, package_type, package_name, org, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/orgs/#{org}/packages/#{package_type}/#{package_name}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false},
      {404, %ExOctocat.Model.BasicError{}},
      {403, %ExOctocat.Model.BasicError{}},
      {401, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  Delete a package version for the authenticated user
  Deletes a specific package version for a package owned by the authenticated user.  If the package is public and the package version has more than 5,000 downloads, you cannot delete the package version. In this scenario, contact GitHub support for further assistance.  To use this endpoint, you must have admin permissions in the organization and authenticate using an access token with the `packages:read` and `packages:delete` scopes. If `package_type` is not `container`, your token must also include the `repo` scope.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - package_type (String.t): The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or `container`. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
  - package_name (String.t): The name of the package.
  - package_version_id (integer()): Unique identifier of the package version.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec packages_delete_package_version_for_authenticated_user(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          integer(),
          keyword()
        ) :: {:ok, nil} | {:ok, ExOctocat.Model.BasicError.t()} | {:error, Tesla.Env.t()}
  def packages_delete_package_version_for_authenticated_user(
        connection,
        package_type,
        package_name,
        package_version_id,
        _opts \\ []
      ) do
    %{}
    |> method(:delete)
    |> url("/user/packages/#{package_type}/#{package_name}/versions/#{package_version_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false},
      {404, %ExOctocat.Model.BasicError{}},
      {403, %ExOctocat.Model.BasicError{}},
      {401, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  Delete package version for an organization
  Deletes a specific package version in an organization. If the package is public and the package version has more than 5,000 downloads, you cannot delete the package version. In this scenario, contact GitHub support for further assistance.  To use this endpoint, you must have admin permissions in the organization and authenticate using an access token with the `packages:read` and `packages:delete` scopes. In addition: - If `package_type` is not `container`, your token must also include the `repo` scope. - If `package_type` is `container`, you must also have admin permissions to the container you want to delete.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - package_type (String.t): The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or `container`. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
  - package_name (String.t): The name of the package.
  - org (String.t):
  - package_version_id (integer()): Unique identifier of the package version.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec packages_delete_package_version_for_org(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          integer(),
          keyword()
        ) :: {:ok, nil} | {:ok, ExOctocat.Model.BasicError.t()} | {:error, Tesla.Env.t()}
  def packages_delete_package_version_for_org(
        connection,
        package_type,
        package_name,
        org,
        package_version_id,
        _opts \\ []
      ) do
    %{}
    |> method(:delete)
    |> url("/orgs/#{org}/packages/#{package_type}/#{package_name}/versions/#{package_version_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false},
      {404, %ExOctocat.Model.BasicError{}},
      {403, %ExOctocat.Model.BasicError{}},
      {401, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  Get all package versions for a package owned by the authenticated user
  Returns all package versions for a package owned by the authenticated user.  To use this endpoint, you must authenticate using an access token with the `packages:read` scope. If `package_type` is not `container`, your token must also include the `repo` scope.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - package_type (String.t): The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or `container`. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
  - package_name (String.t): The name of the package.
  - opts (KeywordList): [optional] Optional parameters
    - :page (integer()): Page number of the results to fetch.
    - :per_page (integer()): Results per page (max 100)
    - :state (String.t): The state of the package, either active or deleted.
  ## Returns

  {:ok, [%PackageVersion{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec packages_get_all_package_versions_for_package_owned_by_authenticated_user(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, list(ExOctocat.Model.PackageVersion.t())}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:error, Tesla.Env.t()}
  def packages_get_all_package_versions_for_package_owned_by_authenticated_user(
        connection,
        package_type,
        package_name,
        opts \\ []
      ) do
    optional_params = %{
      :page => :query,
      :per_page => :query,
      :state => :query
    }

    %{}
    |> method(:get)
    |> url("/user/packages/#{package_type}/#{package_name}/versions")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, [%ExOctocat.Model.PackageVersion{}]},
      {404, %ExOctocat.Model.BasicError{}},
      {403, %ExOctocat.Model.BasicError{}},
      {401, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  Get all package versions for a package owned by an organization
  Returns all package versions for a package owned by an organization.  To use this endpoint, you must authenticate using an access token with the `packages:read` scope. If `package_type` is not `container`, your token must also include the `repo` scope.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - package_type (String.t): The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or `container`. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
  - package_name (String.t): The name of the package.
  - org (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :page (integer()): Page number of the results to fetch.
    - :per_page (integer()): Results per page (max 100)
    - :state (String.t): The state of the package, either active or deleted.
  ## Returns

  {:ok, [%PackageVersion{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec packages_get_all_package_versions_for_package_owned_by_org(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, list(ExOctocat.Model.PackageVersion.t())}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:error, Tesla.Env.t()}
  def packages_get_all_package_versions_for_package_owned_by_org(
        connection,
        package_type,
        package_name,
        org,
        opts \\ []
      ) do
    optional_params = %{
      :page => :query,
      :per_page => :query,
      :state => :query
    }

    %{}
    |> method(:get)
    |> url("/orgs/#{org}/packages/#{package_type}/#{package_name}/versions")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, [%ExOctocat.Model.PackageVersion{}]},
      {404, %ExOctocat.Model.BasicError{}},
      {403, %ExOctocat.Model.BasicError{}},
      {401, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  Get all package versions for a package owned by a user
  Returns all package versions for a public package owned by a specified user.  To use this endpoint, you must authenticate using an access token with the `packages:read` scope. If `package_type` is not `container`, your token must also include the `repo` scope.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - package_type (String.t): The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or `container`. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
  - package_name (String.t): The name of the package.
  - username (String.t):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, [%PackageVersion{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec packages_get_all_package_versions_for_package_owned_by_user(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, list(ExOctocat.Model.PackageVersion.t())}
          | {:ok, ExOctocat.Model.BasicError.t()}
          | {:error, Tesla.Env.t()}
  def packages_get_all_package_versions_for_package_owned_by_user(
        connection,
        package_type,
        package_name,
        username,
        _opts \\ []
      ) do
    %{}
    |> method(:get)
    |> url("/users/#{username}/packages/#{package_type}/#{package_name}/versions")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, [%ExOctocat.Model.PackageVersion{}]},
      {404, %ExOctocat.Model.BasicError{}},
      {403, %ExOctocat.Model.BasicError{}},
      {401, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  Get a package for the authenticated user
  Gets a specific package for a package owned by the authenticated user.  To use this endpoint, you must authenticate using an access token with the `packages:read` scope. If `package_type` is not `container`, your token must also include the `repo` scope.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - package_type (String.t): The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or `container`. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
  - package_name (String.t): The name of the package.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, ExOctocat.Model.Package.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec packages_get_package_for_authenticated_user(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, ExOctocat.Model.Package.t()} | {:error, Tesla.Env.t()}
  def packages_get_package_for_authenticated_user(
        connection,
        package_type,
        package_name,
        _opts \\ []
      ) do
    %{}
    |> method(:get)
    |> url("/user/packages/#{package_type}/#{package_name}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.Package{}}
    ])
  end

  @doc """
  Get a package for an organization
  Gets a specific package in an organization.  To use this endpoint, you must authenticate using an access token with the `packages:read` scope. If `package_type` is not `container`, your token must also include the `repo` scope.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - package_type (String.t): The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or `container`. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
  - package_name (String.t): The name of the package.
  - org (String.t):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, ExOctocat.Model.Package.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec packages_get_package_for_organization(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, ExOctocat.Model.Package.t()} | {:error, Tesla.Env.t()}
  def packages_get_package_for_organization(
        connection,
        package_type,
        package_name,
        org,
        _opts \\ []
      ) do
    %{}
    |> method(:get)
    |> url("/orgs/#{org}/packages/#{package_type}/#{package_name}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.Package{}}
    ])
  end

  @doc """
  Get a package for a user
  Gets a specific package metadata for a public package owned by a user.  To use this endpoint, you must authenticate using an access token with the `packages:read` scope. If `package_type` is not `container`, your token must also include the `repo` scope.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - package_type (String.t): The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or `container`. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
  - package_name (String.t): The name of the package.
  - username (String.t):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, ExOctocat.Model.Package.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec packages_get_package_for_user(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, ExOctocat.Model.Package.t()} | {:error, Tesla.Env.t()}
  def packages_get_package_for_user(connection, package_type, package_name, username, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/users/#{username}/packages/#{package_type}/#{package_name}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.Package{}}
    ])
  end

  @doc """
  Get a package version for the authenticated user
  Gets a specific package version for a package owned by the authenticated user.  To use this endpoint, you must authenticate using an access token with the `packages:read` scope. If `package_type` is not `container`, your token must also include the `repo` scope.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - package_type (String.t): The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or `container`. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
  - package_name (String.t): The name of the package.
  - package_version_id (integer()): Unique identifier of the package version.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, ExOctocat.Model.PackageVersion.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec packages_get_package_version_for_authenticated_user(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          integer(),
          keyword()
        ) :: {:ok, ExOctocat.Model.PackageVersion.t()} | {:error, Tesla.Env.t()}
  def packages_get_package_version_for_authenticated_user(
        connection,
        package_type,
        package_name,
        package_version_id,
        _opts \\ []
      ) do
    %{}
    |> method(:get)
    |> url("/user/packages/#{package_type}/#{package_name}/versions/#{package_version_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.PackageVersion{}}
    ])
  end

  @doc """
  Get a package version for an organization
  Gets a specific package version in an organization.  You must authenticate using an access token with the `packages:read` scope. If `package_type` is not `container`, your token must also include the `repo` scope.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - package_type (String.t): The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or `container`. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
  - package_name (String.t): The name of the package.
  - org (String.t):
  - package_version_id (integer()): Unique identifier of the package version.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, ExOctocat.Model.PackageVersion.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec packages_get_package_version_for_organization(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          integer(),
          keyword()
        ) :: {:ok, ExOctocat.Model.PackageVersion.t()} | {:error, Tesla.Env.t()}
  def packages_get_package_version_for_organization(
        connection,
        package_type,
        package_name,
        org,
        package_version_id,
        _opts \\ []
      ) do
    %{}
    |> method(:get)
    |> url("/orgs/#{org}/packages/#{package_type}/#{package_name}/versions/#{package_version_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.PackageVersion{}}
    ])
  end

  @doc """
  Get a package version for a user
  Gets a specific package version for a public package owned by a specified user.  At this time, to use this endpoint, you must authenticate using an access token with the `packages:read` scope. If `package_type` is not `container`, your token must also include the `repo` scope.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - package_type (String.t): The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or `container`. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
  - package_name (String.t): The name of the package.
  - package_version_id (integer()): Unique identifier of the package version.
  - username (String.t):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, ExOctocat.Model.PackageVersion.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec packages_get_package_version_for_user(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          integer(),
          String.t(),
          keyword()
        ) :: {:ok, ExOctocat.Model.PackageVersion.t()} | {:error, Tesla.Env.t()}
  def packages_get_package_version_for_user(
        connection,
        package_type,
        package_name,
        package_version_id,
        username,
        _opts \\ []
      ) do
    %{}
    |> method(:get)
    |> url(
      "/users/#{username}/packages/#{package_type}/#{package_name}/versions/#{package_version_id}"
    )
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %ExOctocat.Model.PackageVersion{}}
    ])
  end

  @doc """
  Restore a package for the authenticated user
  Restores a package owned by the authenticated user.  You can restore a deleted package under the following conditions:   - The package was deleted within the last 30 days.   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.  To use this endpoint, you must authenticate using an access token with the `packages:read` and `packages:write` scopes. If `package_type` is not `container`, your token must also include the `repo` scope.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - package_type (String.t): The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or `container`. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
  - package_name (String.t): The name of the package.
  - opts (KeywordList): [optional] Optional parameters
    - :token (String.t): package token
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec packages_restore_package_for_authenticated_user(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, nil} | {:ok, ExOctocat.Model.BasicError.t()} | {:error, Tesla.Env.t()}
  def packages_restore_package_for_authenticated_user(
        connection,
        package_type,
        package_name,
        opts \\ []
      ) do
    optional_params = %{
      :token => :query
    }

    %{}
    |> method(:post)
    |> url("/user/packages/#{package_type}/#{package_name}/restore")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false},
      {404, %ExOctocat.Model.BasicError{}},
      {403, %ExOctocat.Model.BasicError{}},
      {401, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  Restore a package for an organization
  Restores an entire package in an organization.  You can restore a deleted package under the following conditions:   - The package was deleted within the last 30 days.   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.  To use this endpoint, you must have admin permissions in the organization and authenticate using an access token with the `packages:read` and `packages:write` scopes. In addition: - If `package_type` is not `container`, your token must also include the `repo` scope. - If `package_type` is `container`, you must also have admin permissions to the container that you want to restore.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - package_type (String.t): The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or `container`. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
  - package_name (String.t): The name of the package.
  - org (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :token (String.t): package token
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec packages_restore_package_for_org(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, nil} | {:ok, ExOctocat.Model.BasicError.t()} | {:error, Tesla.Env.t()}
  def packages_restore_package_for_org(connection, package_type, package_name, org, opts \\ []) do
    optional_params = %{
      :token => :query
    }

    %{}
    |> method(:post)
    |> url("/orgs/#{org}/packages/#{package_type}/#{package_name}/restore")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false},
      {404, %ExOctocat.Model.BasicError{}},
      {403, %ExOctocat.Model.BasicError{}},
      {401, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  Restore a package version for the authenticated user
  Restores a package version owned by the authenticated user.  You can restore a deleted package version under the following conditions:   - The package was deleted within the last 30 days.   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.  To use this endpoint, you must authenticate using an access token with the `packages:read` and `packages:write` scopes. If `package_type` is not `container`, your token must also include the `repo` scope.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - package_type (String.t): The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or `container`. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
  - package_name (String.t): The name of the package.
  - package_version_id (integer()): Unique identifier of the package version.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec packages_restore_package_version_for_authenticated_user(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          integer(),
          keyword()
        ) :: {:ok, nil} | {:ok, ExOctocat.Model.BasicError.t()} | {:error, Tesla.Env.t()}
  def packages_restore_package_version_for_authenticated_user(
        connection,
        package_type,
        package_name,
        package_version_id,
        _opts \\ []
      ) do
    %{}
    |> method(:post)
    |> url(
      "/user/packages/#{package_type}/#{package_name}/versions/#{package_version_id}/restore"
    )
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false},
      {404, %ExOctocat.Model.BasicError{}},
      {403, %ExOctocat.Model.BasicError{}},
      {401, %ExOctocat.Model.BasicError{}}
    ])
  end

  @doc """
  Restore package version for an organization
  Restores a specific package version in an organization.  You can restore a deleted package under the following conditions:   - The package was deleted within the last 30 days.   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.  To use this endpoint, you must have admin permissions in the organization and authenticate using an access token with the `packages:read` and `packages:write` scopes. In addition: - If `package_type` is not `container`, your token must also include the `repo` scope. - If `package_type` is `container`, you must also have admin permissions to the container that you want to restore.

  ## Parameters

  - connection (ExOctocat.Connection): Connection to server
  - package_type (String.t): The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or `container`. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
  - package_name (String.t): The name of the package.
  - org (String.t):
  - package_version_id (integer()): Unique identifier of the package version.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec packages_restore_package_version_for_org(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          integer(),
          keyword()
        ) :: {:ok, nil} | {:ok, ExOctocat.Model.BasicError.t()} | {:error, Tesla.Env.t()}
  def packages_restore_package_version_for_org(
        connection,
        package_type,
        package_name,
        org,
        package_version_id,
        _opts \\ []
      ) do
    %{}
    |> method(:post)
    |> url(
      "/orgs/#{org}/packages/#{package_type}/#{package_name}/versions/#{package_version_id}/restore"
    )
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false},
      {404, %ExOctocat.Model.BasicError{}},
      {403, %ExOctocat.Model.BasicError{}},
      {401, %ExOctocat.Model.BasicError{}}
    ])
  end
end
